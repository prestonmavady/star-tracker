
stm-star-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000307c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00061f58  08003230  08003230  00004230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08065188  08065188  0006705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08065188  08065188  00066188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08065190  08065190  0006705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08065190  08065190  00066190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08065194  08065194  00066194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08065198  00067000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080651f4  0006705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080651f4  000671c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0006705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000411a  00000000  00000000  0006708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010db  00000000  00000000  0006b1a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000490  00000000  00000000  0006c288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ef  00000000  00000000  0006c718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027adb  00000000  00000000  0006ca07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006260  00000000  00000000  000944e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f27e6  00000000  00000000  0009a742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cf28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001730  00000000  00000000  0018cf6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018e69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003214 	.word	0x08003214

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08003214 	.word	0x08003214

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <LPUART_Config>:
#include "main.h"
#include "stm32l4xx_hal.h"
#include "LPUART.h"


void LPUART_Config (void){
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
// Configure GPIOG as LPUART
  //RCC->AHB2ENR |= RCC_AHB2ENR_GPIOGEN;
  //
  PWR->CR2 |= (PWR_CR2_IOSV);              // power avail on PG[15:2] (LPUART1)
 8000bbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ca4 <LPUART_Config+0xec>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	4a38      	ldr	r2, [pc, #224]	@ (8000ca4 <LPUART_Config+0xec>)
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc6:	6053      	str	r3, [r2, #4]
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN);   // enable GPIOG clock
 8000bc8:	4b37      	ldr	r3, [pc, #220]	@ (8000ca8 <LPUART_Config+0xf0>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bcc:	4a36      	ldr	r2, [pc, #216]	@ (8000ca8 <LPUART_Config+0xf0>)
 8000bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN; // enable LPUART clock bridge
 8000bd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ca8 <LPUART_Config+0xf0>)
 8000bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bd8:	4a33      	ldr	r2, [pc, #204]	@ (8000ca8 <LPUART_Config+0xf0>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	65d3      	str	r3, [r2, #92]	@ 0x5c
  /* USER: configure GPIOG registers MODER/PUPDR/OTYPER/OSPEEDR then
     select AF mode and specify which function with AFR[0] and AFR[1] */
  GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8);
 8000be0:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <LPUART_Config+0xf4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a31      	ldr	r2, [pc, #196]	@ (8000cac <LPUART_Config+0xf4>)
 8000be6:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8000bea:	6013      	str	r3, [r2, #0]
  GPIOG->MODER |= (0b10 << GPIO_MODER_MODE7_Pos | 0b10 << GPIO_MODER_MODE8_Pos); //Config as AF
 8000bec:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <LPUART_Config+0xf4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8000cac <LPUART_Config+0xf4>)
 8000bf2:	f443 3320 	orr.w	r3, r3, #163840	@ 0x28000
 8000bf6:	6013      	str	r3, [r2, #0]
  GPIOG->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <LPUART_Config+0xf4>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8000cac <LPUART_Config+0xf4>)
 8000bfe:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 8000c02:	6053      	str	r3, [r2, #4]
  GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <LPUART_Config+0xf4>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <LPUART_Config+0xf4>)
 8000c0a:	f423 3370 	bic.w	r3, r3, #245760	@ 0x3c000
 8000c0e:	60d3      	str	r3, [r2, #12]
  GPIOG->OSPEEDR |= (3 << GPIO_OSPEEDR_OSPEED7_Pos | 3 << GPIO_OSPEEDR_OSPEED8_Pos);
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <LPUART_Config+0xf4>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a25      	ldr	r2, [pc, #148]	@ (8000cac <LPUART_Config+0xf4>)
 8000c16:	f443 3370 	orr.w	r3, r3, #245760	@ 0x3c000
 8000c1a:	6093      	str	r3, [r2, #8]
  GPIOG->AFR[0] &= ~(0xF << GPIO_AFRL_AFSEL7_Pos);             // Clear PG7 bits in AFRL
 8000c1c:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <LPUART_Config+0xf4>)
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	4a22      	ldr	r2, [pc, #136]	@ (8000cac <LPUART_Config+0xf4>)
 8000c22:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8000c26:	6213      	str	r3, [r2, #32]
  GPIOG->AFR[0] |=  (8 << GPIO_AFRL_AFSEL7_Pos);               // Set AF8 for PG7 (TX)
 8000c28:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <LPUART_Config+0xf4>)
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8000cac <LPUART_Config+0xf4>)
 8000c2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c32:	6213      	str	r3, [r2, #32]
  GPIOG->AFR[1] &= ~(0xF << GPIO_AFRH_AFSEL8_Pos);             // Clear PG8 bits in AFRH
 8000c34:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <LPUART_Config+0xf4>)
 8000c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c38:	4a1c      	ldr	r2, [pc, #112]	@ (8000cac <LPUART_Config+0xf4>)
 8000c3a:	f023 030f 	bic.w	r3, r3, #15
 8000c3e:	6253      	str	r3, [r2, #36]	@ 0x24
  GPIOG->AFR[1] |=  (8 << GPIO_AFRH_AFSEL8_Pos);               // Set AF8 for PG8 (RX)
 8000c40:	4b1a      	ldr	r3, [pc, #104]	@ (8000cac <LPUART_Config+0xf4>)
 8000c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c44:	4a19      	ldr	r2, [pc, #100]	@ (8000cac <LPUART_Config+0xf4>)
 8000c46:	f043 0308 	orr.w	r3, r3, #8
 8000c4a:	6253      	str	r3, [r2, #36]	@ 0x24
//   GPIOG->AFR[0] &= ~((0xF << GPIO_AFRL_AFSEL7_Pos) | (0xF << GPIO_AFRL_AFSEL8_Pos)); //set to AF
//   GPIOG->AFR[0] |= (8 << GPIO_AFRL_AFSEL7_Pos); //PG7 - TX
//   GPIOG->AFR[1] |= (8 << (GPIO_AFRH_AFSEL8_Pos - 32)); //PG8 - RX (offset in AFRH)
  LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0); // 8-bit data
 8000c4c:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a17      	ldr	r2, [pc, #92]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c52:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8000c56:	6013      	str	r3, [r2, #0]
  LPUART1->CR1 |= USART_CR1_UE;                   // enable LPUART1
 8000c58:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a14      	ldr	r2, [pc, #80]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c5e:	f043 0301 	orr.w	r3, r3, #1
 8000c62:	6013      	str	r3, [r2, #0]
  LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);  // enable xmit & recv
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a11      	ldr	r2, [pc, #68]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c6a:	f043 030c 	orr.w	r3, r3, #12
 8000c6e:	6013      	str	r3, [r2, #0]
  LPUART1->CR1 |= USART_CR1_RXNEIE;        // enable LPUART1 recv interrupt
 8000c70:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c76:	f043 0320 	orr.w	r3, r3, #32
 8000c7a:	6013      	str	r3, [r2, #0]
  LPUART1->ISR &= ~(USART_ISR_RXNE);       // clear Recv-Not-Empty flag
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a0b      	ldr	r2, [pc, #44]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c82:	f023 0320 	bic.w	r3, r3, #32
 8000c86:	61d3      	str	r3, [r2, #28]
  /* USER: set baud rate register (LPUART1->BRR) */
  LPUART1->BRR = 8899;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <LPUART_Config+0xf8>)
 8000c8a:	f242 22c3 	movw	r2, #8899	@ 0x22c3
 8000c8e:	60da      	str	r2, [r3, #12]
  NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <LPUART_Config+0xfc>)
 8000c92:	2240      	movs	r2, #64	@ 0x40
 8000c94:	609a      	str	r2, [r3, #8]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000c96:	b662      	cpsie	i
}
 8000c98:	bf00      	nop
  __enable_irq();                          // enable global interrupts
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40007000 	.word	0x40007000
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	48001800 	.word	0x48001800
 8000cb0:	40008000 	.word	0x40008000
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <LPUART_Print>:


void LPUART_Print( const char* message ) {
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint16_t iStrIdx = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	81fb      	strh	r3, [r7, #14]
  while ( message[iStrIdx] != 0 ) {
 8000cc4:	e00f      	b.n	8000ce6 <LPUART_Print+0x2e>
     while(!(LPUART1->ISR & USART_ISR_TXE)) // wait for empty xmit buffer
 8000cc6:	bf00      	nop
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d00 <LPUART_Print+0x48>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d0f9      	beq.n	8000cc8 <LPUART_Print+0x10>
        ;
     LPUART1->TDR = message[iStrIdx];       // send this character
 8000cd4:	89fb      	ldrh	r3, [r7, #14]
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781a      	ldrb	r2, [r3, #0]
 8000cdc:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <LPUART_Print+0x48>)
 8000cde:	851a      	strh	r2, [r3, #40]	@ 0x28
	iStrIdx++;                             // advance index to next char
 8000ce0:	89fb      	ldrh	r3, [r7, #14]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	81fb      	strh	r3, [r7, #14]
  while ( message[iStrIdx] != 0 ) {
 8000ce6:	89fb      	ldrh	r3, [r7, #14]
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d1e9      	bne.n	8000cc6 <LPUART_Print+0xe>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	40008000 	.word	0x40008000

08000d04 <LPUART1_IRQHandler>:


void LPUART1_IRQHandler( void  ) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
  uint8_t echo_enabled = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t charRecv;
  if (LPUART1->ISR & USART_ISR_RXNE) {
 8000d0e:	4b33      	ldr	r3, [pc, #204]	@ (8000ddc <LPUART1_IRQHandler+0xd8>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 0320 	and.w	r3, r3, #32
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d05c      	beq.n	8000dd4 <LPUART1_IRQHandler+0xd0>
     charRecv = LPUART1->RDR;
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <LPUART1_IRQHandler+0xd8>)
 8000d1c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	71bb      	strb	r3, [r7, #6]
     switch ( charRecv ) {
 8000d22:	79bb      	ldrb	r3, [r7, #6]
 8000d24:	3b42      	subs	r3, #66	@ 0x42
 8000d26:	2b15      	cmp	r3, #21
 8000d28:	d83e      	bhi.n	8000da8 <LPUART1_IRQHandler+0xa4>
 8000d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <LPUART1_IRQHandler+0x2c>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d99 	.word	0x08000d99
 8000d34:	08000da9 	.word	0x08000da9
 8000d38:	08000da9 	.word	0x08000da9
 8000d3c:	08000da9 	.word	0x08000da9
 8000d40:	08000da9 	.word	0x08000da9
 8000d44:	08000d91 	.word	0x08000d91
 8000d48:	08000da9 	.word	0x08000da9
 8000d4c:	08000da9 	.word	0x08000da9
 8000d50:	08000da9 	.word	0x08000da9
 8000d54:	08000da9 	.word	0x08000da9
 8000d58:	08000da9 	.word	0x08000da9
 8000d5c:	08000da9 	.word	0x08000da9
 8000d60:	08000da9 	.word	0x08000da9
 8000d64:	08000da9 	.word	0x08000da9
 8000d68:	08000da9 	.word	0x08000da9
 8000d6c:	08000da9 	.word	0x08000da9
 8000d70:	08000d89 	.word	0x08000d89
 8000d74:	08000da9 	.word	0x08000da9
 8000d78:	08000da9 	.word	0x08000da9
 8000d7c:	08000da9 	.word	0x08000da9
 8000d80:	08000da9 	.word	0x08000da9
 8000d84:	08000da1 	.word	0x08000da1
	   case 'R':
           /* USER: process R to ESCape code back to terminal  0-7*/
		  LPUART_Send_ESC_Seq("31m");  //Change to red (0 or 1)
 8000d88:	4815      	ldr	r0, [pc, #84]	@ (8000de0 <LPUART1_IRQHandler+0xdc>)
 8000d8a:	f000 f831 	bl	8000df0 <LPUART_Send_ESC_Seq>
	      break;
 8000d8e:	e021      	b.n	8000dd4 <LPUART1_IRQHandler+0xd0>
	   case 'G':
	      LPUART_Send_ESC_Seq("32m");  //Change to green
 8000d90:	4814      	ldr	r0, [pc, #80]	@ (8000de4 <LPUART1_IRQHandler+0xe0>)
 8000d92:	f000 f82d 	bl	8000df0 <LPUART_Send_ESC_Seq>
	   	  break;
 8000d96:	e01d      	b.n	8000dd4 <LPUART1_IRQHandler+0xd0>
	   case 'B':
	   	  LPUART_Send_ESC_Seq("34m");  //Change to blue
 8000d98:	4813      	ldr	r0, [pc, #76]	@ (8000de8 <LPUART1_IRQHandler+0xe4>)
 8000d9a:	f000 f829 	bl	8000df0 <LPUART_Send_ESC_Seq>
	   	   break;
 8000d9e:	e019      	b.n	8000dd4 <LPUART1_IRQHandler+0xd0>
	   case 'W':
	   	  LPUART_Send_ESC_Seq("37m");  //Change to white (7)
 8000da0:	4812      	ldr	r0, [pc, #72]	@ (8000dec <LPUART1_IRQHandler+0xe8>)
 8000da2:	f000 f825 	bl	8000df0 <LPUART_Send_ESC_Seq>
	   	  break;
 8000da6:	e015      	b.n	8000dd4 <LPUART1_IRQHandler+0xd0>
        /* USER : handle other ESCape code cases */
	   default:
	      while( !(LPUART1->ISR & USART_ISR_TXE) )
 8000da8:	bf00      	nop
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <LPUART1_IRQHandler+0xd8>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d0f9      	beq.n	8000daa <LPUART1_IRQHandler+0xa6>
              ;    // wait for empty TX buffer
	      if (echo_enabled) {
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00a      	beq.n	8000dd2 <LPUART1_IRQHandler+0xce>
	          while (!(LPUART1->ISR & USART_ISR_TXE));
 8000dbc:	bf00      	nop
 8000dbe:	4b07      	ldr	r3, [pc, #28]	@ (8000ddc <LPUART1_IRQHandler+0xd8>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f9      	beq.n	8000dbe <LPUART1_IRQHandler+0xba>
	          LPUART1->TDR = charRecv;  // Echo only if enabled
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <LPUART1_IRQHandler+0xd8>)
 8000dcc:	79ba      	ldrb	r2, [r7, #6]
 8000dce:	b292      	uxth	r2, r2
 8000dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
	      }
		break;
 8000dd2:	bf00      	nop
	}  // end switch
  }
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40008000 	.word	0x40008000
 8000de0:	08003230 	.word	0x08003230
 8000de4:	08003234 	.word	0x08003234
 8000de8:	08003238 	.word	0x08003238
 8000dec:	0800323c 	.word	0x0800323c

08000df0 <LPUART_Send_ESC_Seq>:


void LPUART_Send_ESC_Seq(const char* sequence) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
   LPUART_Print("\x1B[");  // ESC character followed by [
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <LPUART_Send_ESC_Seq+0x1c>)
 8000dfa:	f7ff ff5d 	bl	8000cb8 <LPUART_Print>
   LPUART_Print(sequence);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff ff5a 	bl	8000cb8 <LPUART_Print>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	08003240 	.word	0x08003240

08000e10 <Delay_init>:
 *            Disables interrupts and sets it to use the processor clock.
 * authors  : Preston Mavady
 * version  : 0.3
 * date     : 253004
 * -------------------------------------------------------------------------- */
void Delay_init(void) {
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
   SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |       // Enable SysTick
 8000e14:	4b08      	ldr	r3, [pc, #32]	@ (8000e38 <Delay_init+0x28>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <Delay_init+0x28>)
 8000e1a:	f043 0305 	orr.w	r3, r3, #5
 8000e1e:	6013      	str	r3, [r2, #0]
                     SysTick_CTRL_CLKSOURCE_Msk);    // Use processor clock
   SysTick->CTRL &= ~(SysTick_CTRL_TICKINT_Msk);     // Disable SysTick interrupt
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <Delay_init+0x28>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <Delay_init+0x28>)
 8000e26:	f023 0302 	bic.w	r3, r3, #2
 8000e2a:	6013      	str	r3, [r2, #0]
}
 8000e2c:	bf00      	nop
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <delay_us>:
 *            Note: small values may result in longer-than-expected delay.
 * authors  : Preston Mavady
 * version  : 0.3
 * date     : 253004
 * -------------------------------------------------------------------------- */
void delay_us(const uint32_t time_us) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
   // Calculate number of clock cycles for the desired delay
   SysTick->LOAD = (uint32_t)((time_us * (SystemCoreClock / 1000000)) - 1);
 8000e44:	4b11      	ldr	r3, [pc, #68]	@ (8000e8c <delay_us+0x50>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a11      	ldr	r2, [pc, #68]	@ (8000e90 <delay_us+0x54>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	fb02 f303 	mul.w	r3, r2, r3
 8000e56:	4a0f      	ldr	r2, [pc, #60]	@ (8000e94 <delay_us+0x58>)
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	6053      	str	r3, [r2, #4]
   SysTick->VAL = 0;                                     // Reset SysTick counter
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000e94 <delay_us+0x58>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
   SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);       // Clear count flag
 8000e62:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <delay_us+0x58>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	@ (8000e94 <delay_us+0x58>)
 8000e68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
   while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)); // Wait for countdown
 8000e6e:	bf00      	nop
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <delay_us+0x58>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0f9      	beq.n	8000e70 <delay_us+0x34>
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000000 	.word	0x20000000
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <gvalg>:
#include "catalog_bytestream.h"

uint8_t setmode(int nums[], int numsize);

void gvalg(const double cat[][4], const double tab_cat[][3], double **tab_image,
           int *id, double *v2, int n_image, int n_stars_img) {
 8000e98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e9c:	b0e5      	sub	sp, #404	@ 0x194
 8000e9e:	af04      	add	r7, sp, #16
 8000ea0:	f507 76c0 	add.w	r6, r7, #384	@ 0x180
 8000ea4:	f5a6 76ba 	sub.w	r6, r6, #372	@ 0x174
 8000ea8:	6030      	str	r0, [r6, #0]
 8000eaa:	f507 70c0 	add.w	r0, r7, #384	@ 0x180
 8000eae:	f5a0 70bc 	sub.w	r0, r0, #376	@ 0x178
 8000eb2:	6001      	str	r1, [r0, #0]
 8000eb4:	f507 71c0 	add.w	r1, r7, #384	@ 0x180
 8000eb8:	f5a1 71be 	sub.w	r1, r1, #380	@ 0x17c
 8000ebc:	600a      	str	r2, [r1, #0]
 8000ebe:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8000ec2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8000ec6:	6013      	str	r3, [r2, #0]


    // ---------------- MEMORY ALLOCATION ----------------
    // allocate k_n - (used in future loops) counts how many
    // catalog pairs have been voted for a specific star in the image
    int *k_n = (int *)calloc(n_stars_img, sizeof(int));
 8000ec8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f001 fc9e 	bl	8002810 <calloc>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150

    // allocate v - an array for storing matches for each centroid.
    // Each row v[i] holds a list of voted catalog star IDs
    int **v = (int **)calloc(n_stars_img, sizeof(int *));
 8000eda:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000ede:	2104      	movs	r1, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 fc95 	bl	8002810 <calloc>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
    for (int i = 0; i < n_stars_img; i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000ef2:	e011      	b.n	8000f18 <gvalg+0x80>
        v[i] = (int *)calloc(512, sizeof(int));  // Enough space for 256 pairs (2 votes per pair)
 8000ef4:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8000efe:	18d6      	adds	r6, r2, r3
 8000f00:	2104      	movs	r1, #4
 8000f02:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f06:	f001 fc83 	bl	8002810 <calloc>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6033      	str	r3, [r6, #0]
    for (int i = 0; i < n_stars_img; i++) {
 8000f0e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000f12:	3301      	adds	r3, #1
 8000f14:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000f18:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8000f1c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbe7      	blt.n	8000ef4 <gvalg+0x5c>
    }


    // ---------------- FIRST ROUND ----------------
    // for each centroid pair from the image (each entry in tab_image[i][3]
    for (int i = 0; i < n_image; i++) {
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8000f2a:	e1d5      	b.n	80012d8 <gvalg+0x440>

    	// store the angle of the current pair (in millidegrees
    	int angle = tab_image[i][2];
 8000f2c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8000f36:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8000f3a:	6812      	ldr	r2, [r2, #0]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	3310      	adds	r3, #16
 8000f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fe0d 	bl	8000b68 <__aeabi_d2iz>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        // find the starting address of the bin (milidegrees/100 - i.e. 84000/100 = 840)
    	int bin_index = (int)(angle/100);
 8000f54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000f58:	4a3d      	ldr	r2, [pc, #244]	@ (8001050 <gvalg+0x1b8>)
 8000f5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f5e:	1152      	asrs	r2, r2, #5
 8000f60:	17db      	asrs	r3, r3, #31
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    	int bin_addr = bin_angle_to_address_lut[bin_index];
 8000f68:	4a3a      	ldr	r2, [pc, #232]	@ (8001054 <gvalg+0x1bc>)
 8000f6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f72:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
        // starting index to add a vote to (location of first pair in bin)
        int index_min = (bin_addr + 1);
 8000f76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        // stopping index to add a vote to (location of last pair in bin)
        int index_max = (bin_addr + catalog_bytestream[bin_addr]);
 8000f80:	4a35      	ldr	r2, [pc, #212]	@ (8001058 <gvalg+0x1c0>)
 8000f82:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f86:	4413      	add	r3, r2
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000f90:	4413      	add	r3, r2
 8000f92:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
        // --- DEBUG 1 DEBUG 1 DEBUG 1 DEBUG 1 ---
        char dbg[256];

        // Print image pair and angle
        snprintf(dbg, sizeof(dbg), "\n[DEBUG] Image Pair %d: centroid (%d, %d), angle = %d\r\n",
                 i, (int)tab_image[i][0], (int)tab_image[i][1], angle);
 8000f96:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8000fa0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	e9d3 2300 	ldrd	r2, r3, [r3]
        snprintf(dbg, sizeof(dbg), "\n[DEBUG] Image Pair %d: centroid (%d, %d), angle = %d\r\n",
 8000fae:	4610      	mov	r0, r2
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fdd9 	bl	8000b68 <__aeabi_d2iz>
 8000fb6:	4606      	mov	r6, r0
                 i, (int)tab_image[i][0], (int)tab_image[i][1], angle);
 8000fb8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8000fc2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	4413      	add	r3, r2
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	3308      	adds	r3, #8
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
        snprintf(dbg, sizeof(dbg), "\n[DEBUG] Image Pair %d: centroid (%d, %d), angle = %d\r\n",
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fdc7 	bl	8000b68 <__aeabi_d2iz>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f107 0010 	add.w	r0, r7, #16
 8000fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	9201      	str	r2, [sp, #4]
 8000fe8:	9600      	str	r6, [sp, #0]
 8000fea:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000fee:	4a1b      	ldr	r2, [pc, #108]	@ (800105c <gvalg+0x1c4>)
 8000ff0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ff4:	f001 fcda 	bl	80029ac <sniprintf>
        LPUART_Print(dbg);
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fe5b 	bl	8000cb8 <LPUART_Print>

        // Print bin info
        snprintf(dbg, sizeof(dbg), "         → bin_index = %d, bin_addr = %d\r\n", bin_index, bin_addr);
 8001002:	f107 0010 	add.w	r0, r7, #16
 8001006:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001010:	4a13      	ldr	r2, [pc, #76]	@ (8001060 <gvalg+0x1c8>)
 8001012:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001016:	f001 fcc9 	bl	80029ac <sniprintf>
        LPUART_Print(dbg);
 800101a:	f107 0310 	add.w	r3, r7, #16
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fe4a 	bl	8000cb8 <LPUART_Print>
        snprintf(dbg, sizeof(dbg), "         → index_min = %d, index_max = %d\r\n", index_min, index_max);
 8001024:	f107 0010 	add.w	r0, r7, #16
 8001028:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001032:	4a0c      	ldr	r2, [pc, #48]	@ (8001064 <gvalg+0x1cc>)
 8001034:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001038:	f001 fcb8 	bl	80029ac <sniprintf>
        LPUART_Print(dbg);
 800103c:	f107 0310 	add.w	r3, r7, #16
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fe39 	bl	8000cb8 <LPUART_Print>
        // ------------------------------------


        for (int j = index_min; j <= index_max + 4; j++) {// iterate through all pairs in bin
 8001046:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800104a:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800104e:	e136      	b.n	80012be <gvalg+0x426>
 8001050:	51eb851f 	.word	0x51eb851f
 8001054:	0800ac88 	.word	0x0800ac88
 8001058:	08003410 	.word	0x08003410
 800105c:	08003244 	.word	0x08003244
 8001060:	0800327c 	.word	0x0800327c
 8001064:	080032ac 	.word	0x080032ac

        	int idx0 = (int)tab_image[i][0];
 8001068:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001072:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001076:	6812      	ldr	r2, [r2, #0]
 8001078:	4413      	add	r3, r2
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	4610      	mov	r0, r2
 8001082:	4619      	mov	r1, r3
 8001084:	f7ff fd70 	bl	8000b68 <__aeabi_d2iz>
 8001088:	4603      	mov	r3, r0
 800108a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        	int idx1 = (int)tab_image[i][1];
 800108e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001098:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	3308      	adds	r3, #8
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd5c 	bl	8000b68 <__aeabi_d2iz>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

        	// Vote for star A
        	v[idx0][2 * k_n[idx0] + 0] = (int)catalog_bytestream[j];
 80010b6:	4ac7      	ldr	r2, [pc, #796]	@ (80013d4 <gvalg+0x53c>)
 80010b8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80010bc:	4413      	add	r3, r2
 80010be:	7818      	ldrb	r0, [r3, #0]
 80010c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80010ca:	4413      	add	r3, r2
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80010d8:	440b      	add	r3, r1
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	4413      	add	r3, r2
 80010e0:	4602      	mov	r2, r0
 80010e2:	601a      	str	r2, [r3, #0]
        	v[idx0][2 * k_n[idx0] + 1] = (int)catalog_bytestream[j+1];
 80010e4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80010e8:	3301      	adds	r3, #1
 80010ea:	4aba      	ldr	r2, [pc, #744]	@ (80013d4 <gvalg+0x53c>)
 80010ec:	5cd0      	ldrb	r0, [r2, r3]
 80010ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80010f8:	4413      	add	r3, r2
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8001106:	440b      	add	r3, r1
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	3304      	adds	r3, #4
 800110e:	4413      	add	r3, r2
 8001110:	4602      	mov	r2, r0
 8001112:	601a      	str	r2, [r3, #0]

        	// Vote for star B
        	v[idx1][2 * k_n[idx1] + 0] = (int)catalog_bytestream[j];
 8001114:	4aaf      	ldr	r2, [pc, #700]	@ (80013d4 <gvalg+0x53c>)
 8001116:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800111a:	4413      	add	r3, r2
 800111c:	7818      	ldrb	r0, [r3, #0]
 800111e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001128:	4413      	add	r3, r2
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8001136:	440b      	add	r3, r1
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	4413      	add	r3, r2
 800113e:	4602      	mov	r2, r0
 8001140:	601a      	str	r2, [r3, #0]
        	v[idx1][2 * k_n[idx1] + 1] = (int)catalog_bytestream[j+1];
 8001142:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001146:	3301      	adds	r3, #1
 8001148:	4aa2      	ldr	r2, [pc, #648]	@ (80013d4 <gvalg+0x53c>)
 800114a:	5cd0      	ldrb	r0, [r2, r3]
 800114c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001156:	4413      	add	r3, r2
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8001164:	440b      	add	r3, r1
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	00db      	lsls	r3, r3, #3
 800116a:	3304      	adds	r3, #4
 800116c:	4413      	add	r3, r2
 800116e:	4602      	mov	r2, r0
 8001170:	601a      	str	r2, [r3, #0]

            // --- DEBUG 2 DEBUG 2 DEBUG 2 DEBUG 2 ---
            // Vote print for tab_image[i][0]
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
            (int)tab_image[i][0], v[idx1][2 * k_n[idx1] + 0], v[idx0][2 * k_n[idx0] + 1]);
 8001172:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800117c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001180:	6812      	ldr	r2, [r2, #0]
 8001182:	4413      	add	r3, r2
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	e9d3 2300 	ldrd	r2, r3, [r3]
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f7ff fceb 	bl	8000b68 <__aeabi_d2iz>
 8001192:	4606      	mov	r6, r0
            (int)tab_image[i][0], v[idx1][2 * k_n[idx1] + 0], v[idx0][2 * k_n[idx0] + 1]);
 8001194:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800119e:	4413      	add	r3, r2
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80011ac:	440b      	add	r3, r1
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
 80011b4:	681b      	ldr	r3, [r3, #0]
            (int)tab_image[i][0], v[idx1][2 * k_n[idx1] + 0], v[idx0][2 * k_n[idx0] + 1]);
 80011b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80011ba:	0092      	lsls	r2, r2, #2
 80011bc:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 80011c0:	440a      	add	r2, r1
 80011c2:	6811      	ldr	r1, [r2, #0]
 80011c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 80011ce:	4402      	add	r2, r0
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	00d2      	lsls	r2, r2, #3
 80011d4:	3204      	adds	r2, #4
 80011d6:	440a      	add	r2, r1
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	f107 0010 	add.w	r0, r7, #16
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	9300      	str	r3, [sp, #0]
 80011e2:	4633      	mov	r3, r6
 80011e4:	4a7c      	ldr	r2, [pc, #496]	@ (80013d8 <gvalg+0x540>)
 80011e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80011ea:	f001 fbdf 	bl	80029ac <sniprintf>
            LPUART_Print(dbg);
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fd60 	bl	8000cb8 <LPUART_Print>

            // Vote print for tab_image[i][1]
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
            (int)tab_image[i][1], v[idx1][2 * k_n[idx1] + 0], v[idx1][2 * k_n[idx1] + 1]);
 80011f8:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001202:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001206:	6812      	ldr	r2, [r2, #0]
 8001208:	4413      	add	r3, r2
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	3308      	adds	r3, #8
 800120e:	e9d3 2300 	ldrd	r2, r3, [r3]
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
 8001212:	4610      	mov	r0, r2
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff fca7 	bl	8000b68 <__aeabi_d2iz>
 800121a:	4606      	mov	r6, r0
            (int)tab_image[i][1], v[idx1][2 * k_n[idx1] + 0], v[idx1][2 * k_n[idx1] + 1]);
 800121c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001226:	4413      	add	r3, r2
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8001234:	440b      	add	r3, r1
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
 800123c:	681b      	ldr	r3, [r3, #0]
            (int)tab_image[i][1], v[idx1][2 * k_n[idx1] + 0], v[idx1][2 * k_n[idx1] + 1]);
 800123e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	f8d7 114c 	ldr.w	r1, [r7, #332]	@ 0x14c
 8001248:	440a      	add	r2, r1
 800124a:	6811      	ldr	r1, [r2, #0]
 800124c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8001256:	4402      	add	r2, r0
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	00d2      	lsls	r2, r2, #3
 800125c:	3204      	adds	r2, #4
 800125e:	440a      	add	r2, r1
            snprintf(dbg, sizeof(dbg), "         → VOTE[%d] += (%d, %d)\r\n",
 8001260:	6812      	ldr	r2, [r2, #0]
 8001262:	f107 0010 	add.w	r0, r7, #16
 8001266:	9201      	str	r2, [sp, #4]
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	4633      	mov	r3, r6
 800126c:	4a5a      	ldr	r2, [pc, #360]	@ (80013d8 <gvalg+0x540>)
 800126e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001272:	f001 fb9b 	bl	80029ac <sniprintf>
            LPUART_Print(dbg);
 8001276:	f107 0310 	add.w	r3, r7, #16
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fd1c 	bl	8000cb8 <LPUART_Print>
            delay_us(200000);
 8001280:	4856      	ldr	r0, [pc, #344]	@ (80013dc <gvalg+0x544>)
 8001282:	f7ff fddb 	bl	8000e3c <delay_us>
            // ------------------------------------


        	// Now increment vote counters
        	k_n[idx0]++;
 8001286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8001290:	4413      	add	r3, r2
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	3201      	adds	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
        	k_n[idx1]++;
 8001298:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80012a2:	4413      	add	r3, r2
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	3201      	adds	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]
        	j+=1;
 80012aa:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80012ae:	3301      	adds	r3, #1
 80012b0:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
        for (int j = index_min; j <= index_max + 4; j++) {// iterate through all pairs in bin
 80012b4:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80012b8:	3301      	adds	r3, #1
 80012ba:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80012be:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80012c2:	3304      	adds	r3, #4
 80012c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f77f aecd 	ble.w	8001068 <gvalg+0x1d0>
    for (int i = 0; i < n_image; i++) {
 80012ce:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80012d2:	3301      	adds	r3, #1
 80012d4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80012d8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80012dc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f6ff ae23 	blt.w	8000f2c <gvalg+0x94>
        }
    }

    LPUART_Print(" \r\n");
 80012e6:	483e      	ldr	r0, [pc, #248]	@ (80013e0 <gvalg+0x548>)
 80012e8:	f7ff fce6 	bl	8000cb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80012f2:	e018      	b.n	8001326 <gvalg+0x48e>
        char buf[128];
        sprintf(buf, "Centroid %d received %d votes\r\n", i, k_n[i] * 2);
 80012f4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 80012fe:	4413      	add	r3, r2
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	f107 0010 	add.w	r0, r7, #16
 8001308:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800130c:	4935      	ldr	r1, [pc, #212]	@ (80013e4 <gvalg+0x54c>)
 800130e:	f001 fb8f 	bl	8002a30 <siprintf>
        LPUART_Print(buf);
 8001312:	f107 0310 	add.w	r3, r7, #16
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fcce 	bl	8000cb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 800131c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001320:	3301      	adds	r3, #1
 8001322:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001326:	f8d7 2170 	ldr.w	r2, [r7, #368]	@ 0x170
 800132a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800132e:	429a      	cmp	r2, r3
 8001330:	dbe0      	blt.n	80012f4 <gvalg+0x45c>
    }


    // -*-*-----*-*- count votes -*-*------*-*-
    for (int i = 0; i < n_stars_img; i++) {
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001338:	e03e      	b.n	80013b8 <gvalg+0x520>
    	int vote_count = k_n[i] * 2;  // Each pair adds 2 votes
 800133a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f8d7 2150 	ldr.w	r2, [r7, #336]	@ 0x150
 8001344:	4413      	add	r3, r2
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    	id[i] = setmode(v[i], vote_count);
 800134e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001358:	4413      	add	r3, r2
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fa27 	bl	80017b4 <setmode>
 8001366:	4603      	mov	r3, r0
 8001368:	4619      	mov	r1, r3
 800136a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001374:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001378:	6812      	ldr	r2, [r2, #0]
 800137a:	4413      	add	r3, r2
 800137c:	460a      	mov	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

        // Fallback in case of invalid match
        if (id[i] < 0) id[i] = 0;
 8001380:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800138a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800138e:	6812      	ldr	r2, [r2, #0]
 8001390:	4413      	add	r3, r2
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	da0a      	bge.n	80013ae <gvalg+0x516>
 8001398:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80013a2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	4413      	add	r3, r2
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < n_stars_img; i++) {
 80013ae:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80013b2:	3301      	adds	r3, #1
 80013b4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80013b8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80013bc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80013c0:	429a      	cmp	r2, r3
 80013c2:	dbba      	blt.n	800133a <gvalg+0x4a2>
    }

    LPUART_Print(" \r\n");
 80013c4:	4806      	ldr	r0, [pc, #24]	@ (80013e0 <gvalg+0x548>)
 80013c6:	f7ff fc77 	bl	8000cb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80013d0:	e025      	b.n	800141e <gvalg+0x586>
 80013d2:	bf00      	nop
 80013d4:	08003410 	.word	0x08003410
 80013d8:	080032dc 	.word	0x080032dc
 80013dc:	00030d40 	.word	0x00030d40
 80013e0:	08003300 	.word	0x08003300
 80013e4:	08003304 	.word	0x08003304
        char buf[128];
        sprintf(buf, "Centroid %d assigned HIP ID %d\r\n", i, id[i]);
 80013e8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80013f2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	4413      	add	r3, r2
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f107 0010 	add.w	r0, r7, #16
 8001400:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8001404:	4948      	ldr	r1, [pc, #288]	@ (8001528 <gvalg+0x690>)
 8001406:	f001 fb13 	bl	8002a30 <siprintf>
        LPUART_Print(buf);
 800140a:	f107 0310 	add.w	r3, r7, #16
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fc52 	bl	8000cb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 8001414:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001418:	3301      	adds	r3, #1
 800141a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800141e:	f8d7 2168 	ldr.w	r2, [r7, #360]	@ 0x168
 8001422:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001426:	429a      	cmp	r2, r3
 8001428:	dbde      	blt.n	80013e8 <gvalg+0x550>


    // ---------------- SECOND ROUND ----------------
    // Now that stars have been matched, calculate real pairwise
    // angles from catalog to confirm that matches are correct.
    for (int i = 0; i < n_image; i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001430:	e190      	b.n	8001754 <gvalg+0x8bc>
    	if (tab_image[i][0] >= 0 && tab_image[i][1] >= 0) {
 8001432:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800143c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	4413      	add	r3, r2
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	f04f 0300 	mov.w	r3, #0
 8001452:	f7ff fb5f 	bl	8000b14 <__aeabi_dcmpge>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8176 	beq.w	800174a <gvalg+0x8b2>
 800145e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001468:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	4413      	add	r3, r2
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	3308      	adds	r3, #8
 8001474:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	f7ff fb48 	bl	8000b14 <__aeabi_dcmpge>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	f000 815f 	beq.w	800174a <gvalg+0x8b2>
            int a = id[(int)tab_image[i][0]];
 800148c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001496:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800149a:	6812      	ldr	r2, [r2, #0]
 800149c:	4413      	add	r3, r2
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb5e 	bl	8000b68 <__aeabi_d2iz>
 80014ac:	4603      	mov	r3, r0
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80014b4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	4413      	add	r3, r2
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
            int b = id[(int)tab_image[i][1]];
 80014c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80014cc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3308      	adds	r3, #8
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb42 	bl	8000b68 <__aeabi_d2iz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80014ec:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	4413      	add	r3, r2
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

            // Check that both centroids were successfully ID'd
            if (a != 0 && b != 0) {
 80014fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 8123 	beq.w	800174a <gvalg+0x8b2>
 8001504:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 811e 	beq.w	800174a <gvalg+0x8b2>
                // Calculate catalog angle between identified stars
            	int a_idx = -1, b_idx = -1;
 800150e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001512:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001516:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800151a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
            	for (int j = 0; j < 256; j++) {
 800151e:	2300      	movs	r3, #0
 8001520:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001524:	e037      	b.n	8001596 <gvalg+0x6fe>
 8001526:	bf00      	nop
 8001528:	08003324 	.word	0x08003324
            	    if ((int)cat[j][0] == a) a_idx = j;
 800152c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001536:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800153a:	6812      	ldr	r2, [r2, #0]
 800153c:	4413      	add	r3, r2
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	4610      	mov	r0, r2
 8001544:	4619      	mov	r1, r3
 8001546:	f7ff fb0f 	bl	8000b68 <__aeabi_d2iz>
 800154a:	4602      	mov	r2, r0
 800154c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001550:	4293      	cmp	r3, r2
 8001552:	d103      	bne.n	800155c <gvalg+0x6c4>
 8001554:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001558:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
            	    if ((int)cat[j][0] == b) b_idx = j;
 800155c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001566:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	4413      	add	r3, r2
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	4610      	mov	r0, r2
 8001574:	4619      	mov	r1, r3
 8001576:	f7ff faf7 	bl	8000b68 <__aeabi_d2iz>
 800157a:	4602      	mov	r2, r0
 800157c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8001580:	4293      	cmp	r3, r2
 8001582:	d103      	bne.n	800158c <gvalg+0x6f4>
 8001584:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001588:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
            	for (int j = 0; j < 256; j++) {
 800158c:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001590:	3301      	adds	r3, #1
 8001592:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001596:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800159a:	2bff      	cmp	r3, #255	@ 0xff
 800159c:	ddc6      	ble.n	800152c <gvalg+0x694>
            	}

            	if (a_idx >= 0 && b_idx >= 0) {
 800159e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f2c0 80d1 	blt.w	800174a <gvalg+0x8b2>
 80015a8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f2c0 80cc 	blt.w	800174a <gvalg+0x8b2>
            	    double d_cat = acos(cat[a_idx][1] * cat[b_idx][1] +
 80015b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80015b6:	015b      	lsls	r3, r3, #5
 80015b8:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80015bc:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	4413      	add	r3, r2
 80015c4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015c8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80015cc:	015b      	lsls	r3, r3, #5
 80015ce:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80015d2:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015de:	f7ff f813 	bl	8000608 <__aeabi_dmul>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4690      	mov	r8, r2
 80015e8:	4699      	mov	r9, r3
            	                        cat[a_idx][2] * cat[b_idx][2] +
 80015ea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80015ee:	015b      	lsls	r3, r3, #5
 80015f0:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80015f4:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001600:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001604:	015b      	lsls	r3, r3, #5
 8001606:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800160a:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	4413      	add	r3, r2
 8001612:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001616:	f7fe fff7 	bl	8000608 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
            	    double d_cat = acos(cat[a_idx][1] * cat[b_idx][1] +
 800161e:	4640      	mov	r0, r8
 8001620:	4649      	mov	r1, r9
 8001622:	f7fe fe3b 	bl	800029c <__adddf3>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4690      	mov	r8, r2
 800162c:	4699      	mov	r9, r3
            	                        cat[a_idx][3] * cat[b_idx][3]);
 800162e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001638:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	4413      	add	r3, r2
 8001640:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001644:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001648:	015b      	lsls	r3, r3, #5
 800164a:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800164e:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	4413      	add	r3, r2
 8001656:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800165a:	f7fe ffd5 	bl	8000608 <__aeabi_dmul>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
            	    double d_cat = acos(cat[a_idx][1] * cat[b_idx][1] +
 8001662:	4640      	mov	r0, r8
 8001664:	4649      	mov	r1, r9
 8001666:	f7fe fe19 	bl	800029c <__adddf3>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	ec43 2b17 	vmov	d7, r2, r3
 8001672:	eeb0 0a47 	vmov.f32	s0, s14
 8001676:	eef0 0a67 	vmov.f32	s1, s15
 800167a:	f000 fd4f 	bl	800211c <acos>
 800167e:	ed87 0b4e 	vstr	d0, [r7, #312]	@ 0x138

            	    double d_image = tab_image[i][2];
 8001682:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 800168c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	4413      	add	r3, r2
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800169a:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

            	    if (fabs(d_cat - d_image) < 1) {
 800169e:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80016a2:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	@ 0x138
 80016a6:	f7fe fdf7 	bl	8000298 <__aeabi_dsub>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4614      	mov	r4, r2
 80016b0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <gvalg+0x918>)
 80016ba:	4620      	mov	r0, r4
 80016bc:	4629      	mov	r1, r5
 80016be:	f7ff fa15 	bl	8000aec <__aeabi_dcmplt>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d040      	beq.n	800174a <gvalg+0x8b2>
            	        v2[(int)tab_image[i][0]]++;
 80016c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 80016d2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	4413      	add	r3, r2
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa40 	bl	8000b68 <__aeabi_d2iz>
 80016e8:	4603      	mov	r3, r0
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80016f0:	18d6      	adds	r6, r2, r3
 80016f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b2d      	ldr	r3, [pc, #180]	@ (80017b0 <gvalg+0x918>)
 80016fc:	f7fe fdce 	bl	800029c <__adddf3>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c6 2300 	strd	r2, r3, [r6]
            	        v2[(int)tab_image[i][1]]++;
 8001708:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	f507 72c0 	add.w	r2, r7, #384	@ 0x180
 8001712:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	4413      	add	r3, r2
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3308      	adds	r3, #8
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	f7ff fa1f 	bl	8000b68 <__aeabi_d2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001732:	18d6      	adds	r6, r2, r3
 8001734:	e9d6 0100 	ldrd	r0, r1, [r6]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b1c      	ldr	r3, [pc, #112]	@ (80017b0 <gvalg+0x918>)
 800173e:	f7fe fdad 	bl	800029c <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	e9c6 2300 	strd	r2, r3, [r6]
    for (int i = 0; i < n_image; i++) {
 800174a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001754:	f8d7 2164 	ldr.w	r2, [r7, #356]	@ 0x164
 8001758:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800175c:	429a      	cmp	r2, r3
 800175e:	f6ff ae68 	blt.w	8001432 <gvalg+0x59a>
            }
        }
    }

    // --- Free dynamically allocated memory ---
    free(k_n);
 8001762:	f8d7 0150 	ldr.w	r0, [r7, #336]	@ 0x150
 8001766:	f001 f877 	bl	8002858 <free>
    for (int i = 0; i < n_stars_img; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001770:	e00e      	b.n	8001790 <gvalg+0x8f8>
    {
        free(v[i]);
 8001772:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800177c:	4413      	add	r3, r2
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f001 f869 	bl	8002858 <free>
    for (int i = 0; i < n_stars_img; i++)
 8001786:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800178a:	3301      	adds	r3, #1
 800178c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001790:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001794:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001798:	429a      	cmp	r2, r3
 800179a:	dbea      	blt.n	8001772 <gvalg+0x8da>
    }
    free(v);
 800179c:	f8d7 014c 	ldr.w	r0, [r7, #332]	@ 0x14c
 80017a0:	f001 f85a 	bl	8002858 <free>
}
 80017a4:	bf00      	nop
 80017a6:	f507 77c2 	add.w	r7, r7, #388	@ 0x184
 80017aa:	46bd      	mov	sp, r7
 80017ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017b0:	3ff00000 	.word	0x3ff00000

080017b4 <setmode>:

uint8_t setmode(int nums[], int numsize){
 80017b4:	b480      	push	{r7}
 80017b6:	b089      	sub	sp, #36	@ 0x24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
	int mode = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
    int counting = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
    int maxcount = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numsize; i++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	e029      	b.n	8001824 <setmode+0x70>
        for (int x = 0; x < numsize; x++) {
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e011      	b.n	80017fa <setmode+0x46>
            if (nums[i] == nums[x]) {
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	6879      	ldr	r1, [r7, #4]
 80017e6:	440b      	add	r3, r1
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d102      	bne.n	80017f4 <setmode+0x40>
                counting++;
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	3301      	adds	r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
        for (int x = 0; x < numsize; x++) {
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	dbe9      	blt.n	80017d6 <setmode+0x22>
            }
        }
        if (counting > maxcount) {
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	429a      	cmp	r2, r3
 8001808:	dd07      	ble.n	800181a <setmode+0x66>
            mode = nums[i];
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	61fb      	str	r3, [r7, #28]
            maxcount = counting;
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	617b      	str	r3, [r7, #20]
        }
        counting = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numsize; i++) {
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	3301      	adds	r3, #1
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbd1      	blt.n	80017d0 <setmode+0x1c>
    }
    return mode;
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	b2db      	uxtb	r3, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	3724      	adds	r7, #36	@ 0x24
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	0000      	movs	r0, r0
	...

08001840 <main>:

void SystemClock_Config(void);
double **allocate_matrix(int rows, int cols);
void free_matrix(double **mat, int rows);

int main(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b0b6      	sub	sp, #216	@ 0xd8
 8001844:	af04      	add	r7, sp, #16
	 HAL_Init();
 8001846:	f000 fb1a 	bl	8001e7e <HAL_Init>
	 SystemClock_Config();
 800184a:	f000 f995 	bl	8001b78 <SystemClock_Config>
	 LPUART_Config();
 800184e:	f7ff f9b3 	bl	8000bb8 <LPUART_Config>
	 Userled_init();
 8001852:	f000 fa99 	bl	8001d88 <Userled_init>
	 Delay_init();
 8001856:	f7ff fadb 	bl	8000e10 <Delay_init>

    // >> Clear Screen
	LPUART_Send_ESC_Seq("2J");
 800185a:	48bb      	ldr	r0, [pc, #748]	@ (8001b48 <main+0x308>)
 800185c:	f7ff fac8 	bl	8000df0 <LPUART_Send_ESC_Seq>
    LPUART_Send_ESC_Seq("H");
 8001860:	48ba      	ldr	r0, [pc, #744]	@ (8001b4c <main+0x30c>)
 8001862:	f7ff fac5 	bl	8000df0 <LPUART_Send_ESC_Seq>
    // >> -----------
    LPUART_Print("Starting GValg... ...\r\n");
 8001866:	48ba      	ldr	r0, [pc, #744]	@ (8001b50 <main+0x310>)
 8001868:	f7ff fa26 	bl	8000cb8 <LPUART_Print>
	//	{0.47423032, 0.11979696, 0.87221230},  // CENT 2 (HIP 8 = 4427)
	//	{0.38942390, 0.21230918, 0.89625545},  // CENT 3 (HIP 13 = 8886)
	// };
	// Image pair angle table [indexA, indexB, angle_millideg]
	#define n_image 6
	double **tab_image = allocate_matrix(n_image, 3);
 800186c:	2103      	movs	r1, #3
 800186e:	2006      	movs	r0, #6
 8001870:	f000 f9ab 	bl	8001bca <allocate_matrix>
 8001874:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

	tab_image[0][0] = 0; tab_image[0][1] = 1; tab_image[0][2] = 4916;   // 1 and 6
 8001878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800187c:	6819      	ldr	r1, [r3, #0]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9c1 2300 	strd	r2, r3, [r1]
 800188a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f103 0108 	add.w	r1, r3, #8
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4bae      	ldr	r3, [pc, #696]	@ (8001b54 <main+0x314>)
 800189a:	e9c1 2300 	strd	r2, r3, [r1]
 800189e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f103 0110 	add.w	r1, r3, #16
 80018a8:	a39b      	add	r3, pc, #620	@ (adr r3, 8001b18 <main+0x2d8>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[1][0] = 0; tab_image[1][1] = 2; tab_image[1][2] = 6147;   // 1 and 8
 80018b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018b6:	3304      	adds	r3, #4
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	e9c1 2300 	strd	r2, r3, [r1]
 80018c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018ca:	3304      	adds	r3, #4
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f103 0108 	add.w	r1, r3, #8
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80018da:	e9c1 2300 	strd	r2, r3, [r1]
 80018de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018e2:	3304      	adds	r3, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f103 0110 	add.w	r1, r3, #16
 80018ea:	a38d      	add	r3, pc, #564	@ (adr r3, 8001b20 <main+0x2e0>)
 80018ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f0:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[2][0] = 0; tab_image[2][1] = 3; tab_image[2][2] = 13261;  // 1 and 13
 80018f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018f8:	3308      	adds	r3, #8
 80018fa:	6819      	ldr	r1, [r3, #0]
 80018fc:	f04f 0200 	mov.w	r2, #0
 8001900:	f04f 0300 	mov.w	r3, #0
 8001904:	e9c1 2300 	strd	r2, r3, [r1]
 8001908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800190c:	3308      	adds	r3, #8
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f103 0108 	add.w	r1, r3, #8
 8001914:	f04f 0200 	mov.w	r2, #0
 8001918:	4b8f      	ldr	r3, [pc, #572]	@ (8001b58 <main+0x318>)
 800191a:	e9c1 2300 	strd	r2, r3, [r1]
 800191e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001922:	3308      	adds	r3, #8
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f103 0110 	add.w	r1, r3, #16
 800192a:	a37f      	add	r3, pc, #508	@ (adr r3, 8001b28 <main+0x2e8>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[3][0] = 1; tab_image[3][1] = 2; tab_image[3][2] = 4679;   // 6 and 8
 8001934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001938:	330c      	adds	r3, #12
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b84      	ldr	r3, [pc, #528]	@ (8001b54 <main+0x314>)
 8001942:	e9c1 2300 	strd	r2, r3, [r1]
 8001946:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800194a:	330c      	adds	r3, #12
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f103 0108 	add.w	r1, r3, #8
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800195a:	e9c1 2300 	strd	r2, r3, [r1]
 800195e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001962:	330c      	adds	r3, #12
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f103 0110 	add.w	r1, r3, #16
 800196a:	a371      	add	r3, pc, #452	@ (adr r3, 8001b30 <main+0x2f0>)
 800196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001970:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[4][0] = 1; tab_image[4][1] = 3; tab_image[4][2] = 11575;  // 6 and 13
 8001974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001978:	3310      	adds	r3, #16
 800197a:	6819      	ldr	r1, [r3, #0]
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b74      	ldr	r3, [pc, #464]	@ (8001b54 <main+0x314>)
 8001982:	e9c1 2300 	strd	r2, r3, [r1]
 8001986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800198a:	3310      	adds	r3, #16
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f103 0108 	add.w	r1, r3, #8
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b70      	ldr	r3, [pc, #448]	@ (8001b58 <main+0x318>)
 8001998:	e9c1 2300 	strd	r2, r3, [r1]
 800199c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019a0:	3310      	adds	r3, #16
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f103 0110 	add.w	r1, r3, #16
 80019a8:	a363      	add	r3, pc, #396	@ (adr r3, 8001b38 <main+0x2f8>)
 80019aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ae:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[5][0] = 2; tab_image[5][1] = 3; tab_image[5][2] = 7326;   // 8 and 13
 80019b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019b6:	3314      	adds	r3, #20
 80019b8:	6819      	ldr	r1, [r3, #0]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019c2:	e9c1 2300 	strd	r2, r3, [r1]
 80019c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019ca:	3314      	adds	r3, #20
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f103 0108 	add.w	r1, r3, #8
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b60      	ldr	r3, [pc, #384]	@ (8001b58 <main+0x318>)
 80019d8:	e9c1 2300 	strd	r2, r3, [r1]
 80019dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019e0:	3314      	adds	r3, #20
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f103 0110 	add.w	r1, r3, #16
 80019e8:	a355      	add	r3, pc, #340	@ (adr r3, 8001b40 <main+0x300>)
 80019ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ee:	e9c1 2300 	strd	r2, r3, [r1]
//	// bin 132: 1,13 + 29,36 + 39,46...
//	tab_image[3][0] = 1; tab_image[4][1] = 2; tab_image[4][2] = 4679; // 6 and 8
//	// bin 46: 6,8 + 160,167 + 213,215 + 213,216
//	tab_image[4][0] = 1; tab_image[5][1] = 3; tab_image[5][2] = 11575; // 6 and 13
//	tab_image[5][0] = 2; tab_image[7][1] = 3; tab_image[7][2] = 7326; // 8 and 13
    LPUART_Print("Successfully Created Fake Starfield... ...\r\n");
 80019f2:	485a      	ldr	r0, [pc, #360]	@ (8001b5c <main+0x31c>)
 80019f4:	f7ff f960 	bl	8000cb8 <LPUART_Print>
	// ---------------------------------------------------

    // Output buffers
    int id[n_stars_img];
    double v2[n_stars_img];
    for (int i = 0; i < n_stars_img; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80019fe:	e011      	b.n	8001a24 <main+0x1e4>
        v2[i] = 0;
 8001a00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	33c8      	adds	r3, #200	@ 0xc8
 8001a08:	443b      	add	r3, r7
 8001a0a:	f1a3 0148 	sub.w	r1, r3, #72	@ 0x48
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i = 0; i < n_stars_img; i++) {
 8001a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a1e:	3301      	adds	r3, #1
 8001a20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001a24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	dde9      	ble.n	8001a00 <main+0x1c0>
    }

    // Call algorithm
    gvalg(cat, tab_cat, tab_image, id, v2, n_image, n_stars_img);
 8001a2c:	f107 02a4 	add.w	r2, r7, #164	@ 0xa4
 8001a30:	2304      	movs	r3, #4
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2306      	movs	r3, #6
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001a44:	4946      	ldr	r1, [pc, #280]	@ (8001b60 <main+0x320>)
 8001a46:	4847      	ldr	r0, [pc, #284]	@ (8001b64 <main+0x324>)
 8001a48:	f7ff fa26 	bl	8000e98 <gvalg>
    LPUART_Print("Successfully Ran GValg... ...\r\n\r\n");
 8001a4c:	4846      	ldr	r0, [pc, #280]	@ (8001b68 <main+0x328>)
 8001a4e:	f7ff f933 	bl	8000cb8 <LPUART_Print>

    // Print output
    LPUART_Print(":: STAR MATCHES ::\r\n");
 8001a52:	4846      	ldr	r0, [pc, #280]	@ (8001b6c <main+0x32c>)
 8001a54:	f7ff f930 	bl	8000cb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 8001a58:	2300      	movs	r3, #0
 8001a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001a5e:	e02f      	b.n	8001ac0 <main+0x280>
        char buffer[128];
        int v2_rounded = (int)(v2[i] + 0.5);  // manual round instead of %.0f
 8001a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	33c8      	adds	r3, #200	@ 0xc8
 8001a68:	443b      	add	r3, r7
 8001a6a:	3b48      	subs	r3, #72	@ 0x48
 8001a6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b3e      	ldr	r3, [pc, #248]	@ (8001b70 <main+0x330>)
 8001a76:	f7fe fc11 	bl	800029c <__adddf3>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f871 	bl	8000b68 <__aeabi_d2iz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        sprintf(buffer, "Image Star %d → Catalog HIP ID %d, verified %d times\r\n", i, id[i], v2_rounded);
 8001a8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	33c8      	adds	r3, #200	@ 0xc8
 8001a94:	443b      	add	r3, r7
 8001a96:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8001a9a:	4638      	mov	r0, r7
 8001a9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001aa8:	4932      	ldr	r1, [pc, #200]	@ (8001b74 <main+0x334>)
 8001aaa:	f000 ffc1 	bl	8002a30 <siprintf>
        LPUART_Print(buffer);
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f901 	bl	8000cb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 8001ab6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001aba:	3301      	adds	r3, #1
 8001abc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ac0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	ddcb      	ble.n	8001a60 <main+0x220>
    	}

    // Cleanup
    free_matrix(tab_image, n_image);
 8001ac8:	2106      	movs	r1, #6
 8001aca:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8001ace:	f000 f8a1 	bl	8001c14 <free_matrix>

    // Blink LED if Done
    for (int i = 0; i < 100; i++){
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001ad8:	e012      	b.n	8001b00 <main+0x2c0>
    	userled_set(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f000 f988 	bl	8001df0 <userled_set>
    	delay_us(20000);
 8001ae0:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001ae4:	f7ff f9aa 	bl	8000e3c <delay_us>
    	userled_set(0);
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f000 f981 	bl	8001df0 <userled_set>
    	delay_us(20000);
 8001aee:	f644 6020 	movw	r0, #20000	@ 0x4e20
 8001af2:	f7ff f9a3 	bl	8000e3c <delay_us>
    for (int i = 0; i < 100; i++){
 8001af6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001afa:	3301      	adds	r3, #1
 8001afc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8001b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001b04:	2b63      	cmp	r3, #99	@ 0x63
 8001b06:	dde8      	ble.n	8001ada <main+0x29a>
    }

    return 0;
 8001b08:	2300      	movs	r3, #0

}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	37c8      	adds	r7, #200	@ 0xc8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	40b33400 	.word	0x40b33400
 8001b20:	00000000 	.word	0x00000000
 8001b24:	40b80300 	.word	0x40b80300
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	40c9e680 	.word	0x40c9e680
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40b24700 	.word	0x40b24700
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40c69b80 	.word	0x40c69b80
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40bc9e00 	.word	0x40bc9e00
 8001b48:	08003348 	.word	0x08003348
 8001b4c:	0800334c 	.word	0x0800334c
 8001b50:	08003350 	.word	0x08003350
 8001b54:	3ff00000 	.word	0x3ff00000
 8001b58:	40080000 	.word	0x40080000
 8001b5c:	08003368 	.word	0x08003368
 8001b60:	0800d318 	.word	0x0800d318
 8001b64:	0800b318 	.word	0x0800b318
 8001b68:	08003398 	.word	0x08003398
 8001b6c:	080033bc 	.word	0x080033bc
 8001b70:	3fe00000 	.word	0x3fe00000
 8001b74:	080033d4 	.word	0x080033d4

08001b78 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b096      	sub	sp, #88	@ 0x58
 8001b7c:	af00      	add	r7, sp, #0
	 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	2244      	movs	r2, #68	@ 0x44
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f000 ff74 	bl	8002a74 <memset>
	 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
 8001b98:	611a      	str	r2, [r3, #16]
	 /** Configure the main internal regulator output voltage */

	 /** Initializes the RCC Oscillators according to the specified parameters
	 in the RCC_OscInitTypeDef structure. */
	 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	617b      	str	r3, [r7, #20]
	 RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	 RCC_OscInitStruct.MSICalibrationValue = 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	633b      	str	r3, [r7, #48]	@ 0x30
	 RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001ba6:	2360      	movs	r3, #96	@ 0x60
 8001ba8:	637b      	str	r3, [r7, #52]	@ 0x34
	 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	63fb      	str	r3, [r7, #60]	@ 0x3c

	 /** Initializes the CPU, AHB and APB buses clocks */
	 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bae:	230f      	movs	r3, #15
 8001bb0:	603b      	str	r3, [r7, #0]
	                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
	 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
	 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
	 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
}
 8001bc2:	bf00      	nop
 8001bc4:	3758      	adds	r7, #88	@ 0x58
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <allocate_matrix>:

// ------------- HELPER FUNCTIONS: -------------
// ---- allocate_matrix() ----
double **allocate_matrix(int rows, int cols) {
 8001bca:	b590      	push	{r4, r7, lr}
 8001bcc:	b085      	sub	sp, #20
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
    double **mat = (double **)malloc(rows * sizeof(double *));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fe35 	bl	8002848 <malloc>
 8001bde:	4603      	mov	r3, r0
 8001be0:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < rows; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e00c      	b.n	8001c02 <allocate_matrix+0x38>
        mat[i] = (double *)calloc(cols, sizeof(double));
 8001be8:	6838      	ldr	r0, [r7, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	68ba      	ldr	r2, [r7, #8]
 8001bf0:	18d4      	adds	r4, r2, r3
 8001bf2:	2108      	movs	r1, #8
 8001bf4:	f000 fe0c 	bl	8002810 <calloc>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < rows; i++) {
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	dbee      	blt.n	8001be8 <allocate_matrix+0x1e>
    }
    return mat;
 8001c0a:	68bb      	ldr	r3, [r7, #8]
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}

08001c14 <free_matrix>:
// ---- free_matrix() ----
void free_matrix(double **mat, int rows) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < rows; i++) {
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	e00a      	b.n	8001c3a <free_matrix+0x26>
        free(mat[i]);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 fe12 	bl	8002858 <free>
    for (int i = 0; i < rows; i++) {
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	3301      	adds	r3, #1
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dbf0      	blt.n	8001c24 <free_matrix+0x10>
    }
    free(mat);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 fe08 	bl	8002858 <free>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b0f      	ldr	r3, [pc, #60]	@ (8001c94 <HAL_MspInit+0x44>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c94 <HAL_MspInit+0x44>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c62:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <HAL_MspInit+0x44>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	@ (8001c94 <HAL_MspInit+0x44>)
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	4a08      	ldr	r2, [pc, #32]	@ (8001c94 <HAL_MspInit+0x44>)
 8001c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_MspInit+0x44>)
 8001c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000

08001c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <NMI_Handler+0x4>

08001ca0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <HardFault_Handler+0x4>

08001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <MemManage_Handler+0x4>

08001cb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <BusFault_Handler+0x4>

08001cb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <UsageFault_Handler+0x4>

08001cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f000 f91b 	bl	8001f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	@ (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	@ (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f000 febc 	bl	8002aa4 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	@ (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20050000 	.word	0x20050000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	20000078 	.word	0x20000078
 8001d60:	200001c8 	.word	0x200001c8

08001d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	@ (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <Userled_init>:
#include <userled.h>

void Userled_init(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
    // Enable GPIOC clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <Userled_init+0x60>)
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d90:	4a15      	ldr	r2, [pc, #84]	@ (8001de8 <Userled_init+0x60>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Configure PC7 (USER LED) as output (MODER = 01)
    USERLED_PORT->MODER &= ~(0x3 << (USERLED_PIN * 2));   // Clear mode bits for PC7
 8001d98:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <Userled_init+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a13      	ldr	r2, [pc, #76]	@ (8001dec <Userled_init+0x64>)
 8001d9e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001da2:	6013      	str	r3, [r2, #0]
    USERLED_PORT->MODER |=  (0x1 << (USERLED_PIN * 2));   // Set PC7 to output mode
 8001da4:	4b11      	ldr	r3, [pc, #68]	@ (8001dec <Userled_init+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a10      	ldr	r2, [pc, #64]	@ (8001dec <Userled_init+0x64>)
 8001daa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dae:	6013      	str	r3, [r2, #0]

    // Push-pull output (OTYPER = 0)
    USERLED_PORT->OTYPER &= ~(1 << USERLED_PIN);
 8001db0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dec <Userled_init+0x64>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dec <Userled_init+0x64>)
 8001db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dba:	6053      	str	r3, [r2, #4]

    // No pull-up, no pull-down (PUPDR = 00)
    USERLED_PORT->PUPDR &= ~(0x3 << (USERLED_PIN * 2));
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dec <Userled_init+0x64>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dec <Userled_init+0x64>)
 8001dc2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001dc6:	60d3      	str	r3, [r2, #12]

    // High speed (OSPEEDR = 11)
    USERLED_PORT->OSPEEDR |= (0x3 << (USERLED_PIN * 2));
 8001dc8:	4b08      	ldr	r3, [pc, #32]	@ (8001dec <Userled_init+0x64>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	4a07      	ldr	r2, [pc, #28]	@ (8001dec <Userled_init+0x64>)
 8001dce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dd2:	6093      	str	r3, [r2, #8]

    // Set PC7 low (LED off if active-high)
    USERLED_PORT->BSRR = (1 << (USERLED_PIN + 16));
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <Userled_init+0x64>)
 8001dd6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001dda:	619a      	str	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40021000 	.word	0x40021000
 8001dec:	48000800 	.word	0x48000800

08001df0 <userled_set>:

void userled_set(uint8_t enable)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
    if (enable)
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <userled_set+0x1e>
    	USERLED_PORT->ODR |= (1 << USERLED_PIN);  // WP HIGH
 8001e00:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <userled_set+0x38>)
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	4a08      	ldr	r2, [pc, #32]	@ (8001e28 <userled_set+0x38>)
 8001e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0a:	6153      	str	r3, [r2, #20]
    else
    	USERLED_PORT->ODR &= ~(1 << USERLED_PIN); // WP LOW
}
 8001e0c:	e005      	b.n	8001e1a <userled_set+0x2a>
    	USERLED_PORT->ODR &= ~(1 << USERLED_PIN); // WP LOW
 8001e0e:	4b06      	ldr	r3, [pc, #24]	@ (8001e28 <userled_set+0x38>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	4a05      	ldr	r2, [pc, #20]	@ (8001e28 <userled_set+0x38>)
 8001e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e18:	6153      	str	r3, [r2, #20]
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	48000800 	.word	0x48000800

08001e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e30:	f7ff ff98 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e34:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e36:	490d      	ldr	r1, [pc, #52]	@ (8001e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e38:	4a0d      	ldr	r2, [pc, #52]	@ (8001e70 <LoopForever+0xe>)
  movs r3, #0
 8001e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e3c:	e002      	b.n	8001e44 <LoopCopyDataInit>

08001e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e42:	3304      	adds	r3, #4

08001e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e48:	d3f9      	bcc.n	8001e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e78 <LoopForever+0x16>)
  movs r3, #0
 8001e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e50:	e001      	b.n	8001e56 <LoopFillZerobss>

08001e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e54:	3204      	adds	r2, #4

08001e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e58:	d3fb      	bcc.n	8001e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e5a:	f000 fe29 	bl	8002ab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e5e:	f7ff fcef 	bl	8001840 <main>

08001e62 <LoopForever>:

LoopForever:
    b LoopForever
 8001e62:	e7fe      	b.n	8001e62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e64:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e70:	08065198 	.word	0x08065198
  ldr r2, =_sbss
 8001e74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e78:	200001c8 	.word	0x200001c8

08001e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e7c:	e7fe      	b.n	8001e7c <ADC1_2_IRQHandler>

08001e7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f913 	bl	80020b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 f80e 	bl	8001eb0 <HAL_InitTick>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	e001      	b.n	8001ea4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea0:	f7ff fed6 	bl	8001c50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ebc:	4b17      	ldr	r3, [pc, #92]	@ (8001f1c <HAL_InitTick+0x6c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d023      	beq.n	8001f0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ec4:	4b16      	ldr	r3, [pc, #88]	@ (8001f20 <HAL_InitTick+0x70>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b14      	ldr	r3, [pc, #80]	@ (8001f1c <HAL_InitTick+0x6c>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 f911 	bl	8002102 <HAL_SYSTICK_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d809      	bhi.n	8001f00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ef4:	f000 f8e9 	bl	80020ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <HAL_InitTick+0x74>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e007      	b.n	8001f10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	73fb      	strb	r3, [r7, #15]
 8001f04:	e004      	b.n	8001f10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e001      	b.n	8001f10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	20000000 	.word	0x20000000
 8001f24:	20000004 	.word	0x20000004

08001f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	@ (8001f48 <HAL_IncTick+0x20>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4413      	add	r3, r2
 8001f38:	4a04      	ldr	r2, [pc, #16]	@ (8001f4c <HAL_IncTick+0x24>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000008 	.word	0x20000008
 8001f4c:	2000007c 	.word	0x2000007c

08001f50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f60:	4b0c      	ldr	r3, [pc, #48]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f82:	4a04      	ldr	r2, [pc, #16]	@ (8001f94 <__NVIC_SetPriorityGrouping+0x44>)
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	60d3      	str	r3, [r2, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f9c:	4b04      	ldr	r3, [pc, #16]	@ (8001fb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	f003 0307 	and.w	r3, r3, #7
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	6039      	str	r1, [r7, #0]
 8001fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	db0a      	blt.n	8001fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	490c      	ldr	r1, [pc, #48]	@ (8002000 <__NVIC_SetPriority+0x4c>)
 8001fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd2:	0112      	lsls	r2, r2, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fdc:	e00a      	b.n	8001ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4908      	ldr	r1, [pc, #32]	@ (8002004 <__NVIC_SetPriority+0x50>)
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	3b04      	subs	r3, #4
 8001fec:	0112      	lsls	r2, r2, #4
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	761a      	strb	r2, [r3, #24]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000e100 	.word	0xe000e100
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	@ 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	bf28      	it	cs
 8002026:	2304      	movcs	r3, #4
 8002028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3304      	adds	r3, #4
 800202e:	2b06      	cmp	r3, #6
 8002030:	d902      	bls.n	8002038 <NVIC_EncodePriority+0x30>
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	3b03      	subs	r3, #3
 8002036:	e000      	b.n	800203a <NVIC_EncodePriority+0x32>
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800203c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	401a      	ands	r2, r3
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002050:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	43d9      	mvns	r1, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	4313      	orrs	r3, r2
         );
}
 8002062:	4618      	mov	r0, r3
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
	...

08002070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3b01      	subs	r3, #1
 800207c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002080:	d301      	bcc.n	8002086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002082:	2301      	movs	r3, #1
 8002084:	e00f      	b.n	80020a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <SysTick_Config+0x40>)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3b01      	subs	r3, #1
 800208c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208e:	210f      	movs	r1, #15
 8002090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002094:	f7ff ff8e 	bl	8001fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002098:	4b05      	ldr	r3, [pc, #20]	@ (80020b0 <SysTick_Config+0x40>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209e:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <SysTick_Config+0x40>)
 80020a0:	2207      	movs	r2, #7
 80020a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	e000e010 	.word	0xe000e010

080020b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ff47 	bl	8001f50 <__NVIC_SetPriorityGrouping>
}
 80020c2:	bf00      	nop
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b086      	sub	sp, #24
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	60b9      	str	r1, [r7, #8]
 80020d4:	607a      	str	r2, [r7, #4]
 80020d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff5c 	bl	8001f98 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff8e 	bl	8002008 <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5d 	bl	8001fb4 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ffb0 	bl	8002070 <SysTick_Config>
 8002110:	4603      	mov	r3, r0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <acos>:
 800211c:	b538      	push	{r3, r4, r5, lr}
 800211e:	ed2d 8b02 	vpush	{d8}
 8002122:	ec55 4b10 	vmov	r4, r5, d0
 8002126:	f000 f82f 	bl	8002188 <__ieee754_acos>
 800212a:	4622      	mov	r2, r4
 800212c:	462b      	mov	r3, r5
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	eeb0 8a40 	vmov.f32	s16, s0
 8002136:	eef0 8a60 	vmov.f32	s17, s1
 800213a:	f7fe fcff 	bl	8000b3c <__aeabi_dcmpun>
 800213e:	b9a8      	cbnz	r0, 800216c <acos+0x50>
 8002140:	ec45 4b10 	vmov	d0, r4, r5
 8002144:	f000 fa7c 	bl	8002640 <fabs>
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <acos+0x60>)
 800214a:	ec51 0b10 	vmov	r0, r1, d0
 800214e:	2200      	movs	r2, #0
 8002150:	f7fe fcea 	bl	8000b28 <__aeabi_dcmpgt>
 8002154:	b150      	cbz	r0, 800216c <acos+0x50>
 8002156:	f000 fca5 	bl	8002aa4 <__errno>
 800215a:	ecbd 8b02 	vpop	{d8}
 800215e:	2321      	movs	r3, #33	@ 0x21
 8002160:	6003      	str	r3, [r0, #0]
 8002162:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002166:	4806      	ldr	r0, [pc, #24]	@ (8002180 <acos+0x64>)
 8002168:	f000 bb4a 	b.w	8002800 <nan>
 800216c:	eeb0 0a48 	vmov.f32	s0, s16
 8002170:	eef0 0a68 	vmov.f32	s1, s17
 8002174:	ecbd 8b02 	vpop	{d8}
 8002178:	bd38      	pop	{r3, r4, r5, pc}
 800217a:	bf00      	nop
 800217c:	3ff00000 	.word	0x3ff00000
 8002180:	08065145 	.word	0x08065145
 8002184:	00000000 	.word	0x00000000

08002188 <__ieee754_acos>:
 8002188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800218c:	ec55 4b10 	vmov	r4, r5, d0
 8002190:	49b7      	ldr	r1, [pc, #732]	@ (8002470 <__ieee754_acos+0x2e8>)
 8002192:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8002196:	428b      	cmp	r3, r1
 8002198:	d919      	bls.n	80021ce <__ieee754_acos+0x46>
 800219a:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800219e:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80021a2:	4323      	orrs	r3, r4
 80021a4:	d106      	bne.n	80021b4 <__ieee754_acos+0x2c>
 80021a6:	2d00      	cmp	r5, #0
 80021a8:	f340 8210 	ble.w	80025cc <__ieee754_acos+0x444>
 80021ac:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8002400 <__ieee754_acos+0x278>
 80021b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021b4:	4622      	mov	r2, r4
 80021b6:	462b      	mov	r3, r5
 80021b8:	4620      	mov	r0, r4
 80021ba:	4629      	mov	r1, r5
 80021bc:	f7fe f86c 	bl	8000298 <__aeabi_dsub>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	f7fe fb4a 	bl	800085c <__aeabi_ddiv>
 80021c8:	ec41 0b10 	vmov	d0, r0, r1
 80021cc:	e7f0      	b.n	80021b0 <__ieee754_acos+0x28>
 80021ce:	49a9      	ldr	r1, [pc, #676]	@ (8002474 <__ieee754_acos+0x2ec>)
 80021d0:	428b      	cmp	r3, r1
 80021d2:	f200 8085 	bhi.w	80022e0 <__ieee754_acos+0x158>
 80021d6:	4aa8      	ldr	r2, [pc, #672]	@ (8002478 <__ieee754_acos+0x2f0>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	f240 81fa 	bls.w	80025d2 <__ieee754_acos+0x44a>
 80021de:	4622      	mov	r2, r4
 80021e0:	462b      	mov	r3, r5
 80021e2:	4620      	mov	r0, r4
 80021e4:	4629      	mov	r1, r5
 80021e6:	f7fe fa0f 	bl	8000608 <__aeabi_dmul>
 80021ea:	a387      	add	r3, pc, #540	@ (adr r3, 8002408 <__ieee754_acos+0x280>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	4606      	mov	r6, r0
 80021f2:	460f      	mov	r7, r1
 80021f4:	f7fe fa08 	bl	8000608 <__aeabi_dmul>
 80021f8:	a385      	add	r3, pc, #532	@ (adr r3, 8002410 <__ieee754_acos+0x288>)
 80021fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fe:	f7fe f84d 	bl	800029c <__adddf3>
 8002202:	4632      	mov	r2, r6
 8002204:	463b      	mov	r3, r7
 8002206:	f7fe f9ff 	bl	8000608 <__aeabi_dmul>
 800220a:	a383      	add	r3, pc, #524	@ (adr r3, 8002418 <__ieee754_acos+0x290>)
 800220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002210:	f7fe f842 	bl	8000298 <__aeabi_dsub>
 8002214:	4632      	mov	r2, r6
 8002216:	463b      	mov	r3, r7
 8002218:	f7fe f9f6 	bl	8000608 <__aeabi_dmul>
 800221c:	a380      	add	r3, pc, #512	@ (adr r3, 8002420 <__ieee754_acos+0x298>)
 800221e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002222:	f7fe f83b 	bl	800029c <__adddf3>
 8002226:	4632      	mov	r2, r6
 8002228:	463b      	mov	r3, r7
 800222a:	f7fe f9ed 	bl	8000608 <__aeabi_dmul>
 800222e:	a37e      	add	r3, pc, #504	@ (adr r3, 8002428 <__ieee754_acos+0x2a0>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fe f830 	bl	8000298 <__aeabi_dsub>
 8002238:	4632      	mov	r2, r6
 800223a:	463b      	mov	r3, r7
 800223c:	f7fe f9e4 	bl	8000608 <__aeabi_dmul>
 8002240:	a37b      	add	r3, pc, #492	@ (adr r3, 8002430 <__ieee754_acos+0x2a8>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fe f829 	bl	800029c <__adddf3>
 800224a:	4632      	mov	r2, r6
 800224c:	463b      	mov	r3, r7
 800224e:	f7fe f9db 	bl	8000608 <__aeabi_dmul>
 8002252:	a379      	add	r3, pc, #484	@ (adr r3, 8002438 <__ieee754_acos+0x2b0>)
 8002254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002258:	4680      	mov	r8, r0
 800225a:	4689      	mov	r9, r1
 800225c:	4630      	mov	r0, r6
 800225e:	4639      	mov	r1, r7
 8002260:	f7fe f9d2 	bl	8000608 <__aeabi_dmul>
 8002264:	a376      	add	r3, pc, #472	@ (adr r3, 8002440 <__ieee754_acos+0x2b8>)
 8002266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226a:	f7fe f815 	bl	8000298 <__aeabi_dsub>
 800226e:	4632      	mov	r2, r6
 8002270:	463b      	mov	r3, r7
 8002272:	f7fe f9c9 	bl	8000608 <__aeabi_dmul>
 8002276:	a374      	add	r3, pc, #464	@ (adr r3, 8002448 <__ieee754_acos+0x2c0>)
 8002278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227c:	f7fe f80e 	bl	800029c <__adddf3>
 8002280:	4632      	mov	r2, r6
 8002282:	463b      	mov	r3, r7
 8002284:	f7fe f9c0 	bl	8000608 <__aeabi_dmul>
 8002288:	a371      	add	r3, pc, #452	@ (adr r3, 8002450 <__ieee754_acos+0x2c8>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fe f803 	bl	8000298 <__aeabi_dsub>
 8002292:	4632      	mov	r2, r6
 8002294:	463b      	mov	r3, r7
 8002296:	f7fe f9b7 	bl	8000608 <__aeabi_dmul>
 800229a:	4b78      	ldr	r3, [pc, #480]	@ (800247c <__ieee754_acos+0x2f4>)
 800229c:	2200      	movs	r2, #0
 800229e:	f7fd fffd 	bl	800029c <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4640      	mov	r0, r8
 80022a8:	4649      	mov	r1, r9
 80022aa:	f7fe fad7 	bl	800085c <__aeabi_ddiv>
 80022ae:	4622      	mov	r2, r4
 80022b0:	462b      	mov	r3, r5
 80022b2:	f7fe f9a9 	bl	8000608 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	a167      	add	r1, pc, #412	@ (adr r1, 8002458 <__ieee754_acos+0x2d0>)
 80022bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022c0:	f7fd ffea 	bl	8000298 <__aeabi_dsub>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	4620      	mov	r0, r4
 80022ca:	4629      	mov	r1, r5
 80022cc:	f7fd ffe4 	bl	8000298 <__aeabi_dsub>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	a162      	add	r1, pc, #392	@ (adr r1, 8002460 <__ieee754_acos+0x2d8>)
 80022d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022da:	f7fd ffdd 	bl	8000298 <__aeabi_dsub>
 80022de:	e773      	b.n	80021c8 <__ieee754_acos+0x40>
 80022e0:	2d00      	cmp	r5, #0
 80022e2:	f280 80cf 	bge.w	8002484 <__ieee754_acos+0x2fc>
 80022e6:	4b65      	ldr	r3, [pc, #404]	@ (800247c <__ieee754_acos+0x2f4>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ffd5 	bl	800029c <__adddf3>
 80022f2:	4b63      	ldr	r3, [pc, #396]	@ (8002480 <__ieee754_acos+0x2f8>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	f7fe f987 	bl	8000608 <__aeabi_dmul>
 80022fa:	a343      	add	r3, pc, #268	@ (adr r3, 8002408 <__ieee754_acos+0x280>)
 80022fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002300:	4604      	mov	r4, r0
 8002302:	460d      	mov	r5, r1
 8002304:	f7fe f980 	bl	8000608 <__aeabi_dmul>
 8002308:	a341      	add	r3, pc, #260	@ (adr r3, 8002410 <__ieee754_acos+0x288>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fd ffc5 	bl	800029c <__adddf3>
 8002312:	4622      	mov	r2, r4
 8002314:	462b      	mov	r3, r5
 8002316:	f7fe f977 	bl	8000608 <__aeabi_dmul>
 800231a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002418 <__ieee754_acos+0x290>)
 800231c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002320:	f7fd ffba 	bl	8000298 <__aeabi_dsub>
 8002324:	4622      	mov	r2, r4
 8002326:	462b      	mov	r3, r5
 8002328:	f7fe f96e 	bl	8000608 <__aeabi_dmul>
 800232c:	a33c      	add	r3, pc, #240	@ (adr r3, 8002420 <__ieee754_acos+0x298>)
 800232e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002332:	f7fd ffb3 	bl	800029c <__adddf3>
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	f7fe f965 	bl	8000608 <__aeabi_dmul>
 800233e:	a33a      	add	r3, pc, #232	@ (adr r3, 8002428 <__ieee754_acos+0x2a0>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fd ffa8 	bl	8000298 <__aeabi_dsub>
 8002348:	4622      	mov	r2, r4
 800234a:	462b      	mov	r3, r5
 800234c:	f7fe f95c 	bl	8000608 <__aeabi_dmul>
 8002350:	a337      	add	r3, pc, #220	@ (adr r3, 8002430 <__ieee754_acos+0x2a8>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f7fd ffa1 	bl	800029c <__adddf3>
 800235a:	4622      	mov	r2, r4
 800235c:	462b      	mov	r3, r5
 800235e:	f7fe f953 	bl	8000608 <__aeabi_dmul>
 8002362:	a335      	add	r3, pc, #212	@ (adr r3, 8002438 <__ieee754_acos+0x2b0>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	4606      	mov	r6, r0
 800236a:	460f      	mov	r7, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fe f94a 	bl	8000608 <__aeabi_dmul>
 8002374:	a332      	add	r3, pc, #200	@ (adr r3, 8002440 <__ieee754_acos+0x2b8>)
 8002376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237a:	f7fd ff8d 	bl	8000298 <__aeabi_dsub>
 800237e:	4622      	mov	r2, r4
 8002380:	462b      	mov	r3, r5
 8002382:	f7fe f941 	bl	8000608 <__aeabi_dmul>
 8002386:	a330      	add	r3, pc, #192	@ (adr r3, 8002448 <__ieee754_acos+0x2c0>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fd ff86 	bl	800029c <__adddf3>
 8002390:	4622      	mov	r2, r4
 8002392:	462b      	mov	r3, r5
 8002394:	f7fe f938 	bl	8000608 <__aeabi_dmul>
 8002398:	a32d      	add	r3, pc, #180	@ (adr r3, 8002450 <__ieee754_acos+0x2c8>)
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	f7fd ff7b 	bl	8000298 <__aeabi_dsub>
 80023a2:	4622      	mov	r2, r4
 80023a4:	462b      	mov	r3, r5
 80023a6:	f7fe f92f 	bl	8000608 <__aeabi_dmul>
 80023aa:	4b34      	ldr	r3, [pc, #208]	@ (800247c <__ieee754_acos+0x2f4>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	f7fd ff75 	bl	800029c <__adddf3>
 80023b2:	ec45 4b10 	vmov	d0, r4, r5
 80023b6:	4680      	mov	r8, r0
 80023b8:	4689      	mov	r9, r1
 80023ba:	f000 f949 	bl	8002650 <__ieee754_sqrt>
 80023be:	ec55 4b10 	vmov	r4, r5, d0
 80023c2:	4642      	mov	r2, r8
 80023c4:	464b      	mov	r3, r9
 80023c6:	4630      	mov	r0, r6
 80023c8:	4639      	mov	r1, r7
 80023ca:	f7fe fa47 	bl	800085c <__aeabi_ddiv>
 80023ce:	4622      	mov	r2, r4
 80023d0:	462b      	mov	r3, r5
 80023d2:	f7fe f919 	bl	8000608 <__aeabi_dmul>
 80023d6:	a320      	add	r3, pc, #128	@ (adr r3, 8002458 <__ieee754_acos+0x2d0>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fd ff5c 	bl	8000298 <__aeabi_dsub>
 80023e0:	4622      	mov	r2, r4
 80023e2:	462b      	mov	r3, r5
 80023e4:	f7fd ff5a 	bl	800029c <__adddf3>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	f7fd ff56 	bl	800029c <__adddf3>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	a11c      	add	r1, pc, #112	@ (adr r1, 8002468 <__ieee754_acos+0x2e0>)
 80023f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023fa:	e76e      	b.n	80022da <__ieee754_acos+0x152>
 80023fc:	f3af 8000 	nop.w
	...
 8002408:	0dfdf709 	.word	0x0dfdf709
 800240c:	3f023de1 	.word	0x3f023de1
 8002410:	7501b288 	.word	0x7501b288
 8002414:	3f49efe0 	.word	0x3f49efe0
 8002418:	b5688f3b 	.word	0xb5688f3b
 800241c:	3fa48228 	.word	0x3fa48228
 8002420:	0e884455 	.word	0x0e884455
 8002424:	3fc9c155 	.word	0x3fc9c155
 8002428:	03eb6f7d 	.word	0x03eb6f7d
 800242c:	3fd4d612 	.word	0x3fd4d612
 8002430:	55555555 	.word	0x55555555
 8002434:	3fc55555 	.word	0x3fc55555
 8002438:	b12e9282 	.word	0xb12e9282
 800243c:	3fb3b8c5 	.word	0x3fb3b8c5
 8002440:	1b8d0159 	.word	0x1b8d0159
 8002444:	3fe6066c 	.word	0x3fe6066c
 8002448:	9c598ac8 	.word	0x9c598ac8
 800244c:	40002ae5 	.word	0x40002ae5
 8002450:	1c8a2d4b 	.word	0x1c8a2d4b
 8002454:	40033a27 	.word	0x40033a27
 8002458:	33145c07 	.word	0x33145c07
 800245c:	3c91a626 	.word	0x3c91a626
 8002460:	54442d18 	.word	0x54442d18
 8002464:	3ff921fb 	.word	0x3ff921fb
 8002468:	54442d18 	.word	0x54442d18
 800246c:	400921fb 	.word	0x400921fb
 8002470:	3fefffff 	.word	0x3fefffff
 8002474:	3fdfffff 	.word	0x3fdfffff
 8002478:	3c600000 	.word	0x3c600000
 800247c:	3ff00000 	.word	0x3ff00000
 8002480:	3fe00000 	.word	0x3fe00000
 8002484:	4622      	mov	r2, r4
 8002486:	462b      	mov	r3, r5
 8002488:	496b      	ldr	r1, [pc, #428]	@ (8002638 <__ieee754_acos+0x4b0>)
 800248a:	2000      	movs	r0, #0
 800248c:	f7fd ff04 	bl	8000298 <__aeabi_dsub>
 8002490:	4b6a      	ldr	r3, [pc, #424]	@ (800263c <__ieee754_acos+0x4b4>)
 8002492:	2200      	movs	r2, #0
 8002494:	f7fe f8b8 	bl	8000608 <__aeabi_dmul>
 8002498:	4604      	mov	r4, r0
 800249a:	460d      	mov	r5, r1
 800249c:	ec45 4b10 	vmov	d0, r4, r5
 80024a0:	f000 f8d6 	bl	8002650 <__ieee754_sqrt>
 80024a4:	a34c      	add	r3, pc, #304	@ (adr r3, 80025d8 <__ieee754_acos+0x450>)
 80024a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024aa:	4620      	mov	r0, r4
 80024ac:	4629      	mov	r1, r5
 80024ae:	ec59 8b10 	vmov	r8, r9, d0
 80024b2:	f7fe f8a9 	bl	8000608 <__aeabi_dmul>
 80024b6:	a34a      	add	r3, pc, #296	@ (adr r3, 80025e0 <__ieee754_acos+0x458>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fd feee 	bl	800029c <__adddf3>
 80024c0:	4622      	mov	r2, r4
 80024c2:	462b      	mov	r3, r5
 80024c4:	f7fe f8a0 	bl	8000608 <__aeabi_dmul>
 80024c8:	a347      	add	r3, pc, #284	@ (adr r3, 80025e8 <__ieee754_acos+0x460>)
 80024ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ce:	f7fd fee3 	bl	8000298 <__aeabi_dsub>
 80024d2:	4622      	mov	r2, r4
 80024d4:	462b      	mov	r3, r5
 80024d6:	f7fe f897 	bl	8000608 <__aeabi_dmul>
 80024da:	a345      	add	r3, pc, #276	@ (adr r3, 80025f0 <__ieee754_acos+0x468>)
 80024dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e0:	f7fd fedc 	bl	800029c <__adddf3>
 80024e4:	4622      	mov	r2, r4
 80024e6:	462b      	mov	r3, r5
 80024e8:	f7fe f88e 	bl	8000608 <__aeabi_dmul>
 80024ec:	a342      	add	r3, pc, #264	@ (adr r3, 80025f8 <__ieee754_acos+0x470>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fd fed1 	bl	8000298 <__aeabi_dsub>
 80024f6:	4622      	mov	r2, r4
 80024f8:	462b      	mov	r3, r5
 80024fa:	f7fe f885 	bl	8000608 <__aeabi_dmul>
 80024fe:	a340      	add	r3, pc, #256	@ (adr r3, 8002600 <__ieee754_acos+0x478>)
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f7fd feca 	bl	800029c <__adddf3>
 8002508:	4622      	mov	r2, r4
 800250a:	462b      	mov	r3, r5
 800250c:	f7fe f87c 	bl	8000608 <__aeabi_dmul>
 8002510:	a33d      	add	r3, pc, #244	@ (adr r3, 8002608 <__ieee754_acos+0x480>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	4682      	mov	sl, r0
 8002518:	468b      	mov	fp, r1
 800251a:	4620      	mov	r0, r4
 800251c:	4629      	mov	r1, r5
 800251e:	f7fe f873 	bl	8000608 <__aeabi_dmul>
 8002522:	a33b      	add	r3, pc, #236	@ (adr r3, 8002610 <__ieee754_acos+0x488>)
 8002524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002528:	f7fd feb6 	bl	8000298 <__aeabi_dsub>
 800252c:	4622      	mov	r2, r4
 800252e:	462b      	mov	r3, r5
 8002530:	f7fe f86a 	bl	8000608 <__aeabi_dmul>
 8002534:	a338      	add	r3, pc, #224	@ (adr r3, 8002618 <__ieee754_acos+0x490>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fd feaf 	bl	800029c <__adddf3>
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f7fe f861 	bl	8000608 <__aeabi_dmul>
 8002546:	a336      	add	r3, pc, #216	@ (adr r3, 8002620 <__ieee754_acos+0x498>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fd fea4 	bl	8000298 <__aeabi_dsub>
 8002550:	4622      	mov	r2, r4
 8002552:	462b      	mov	r3, r5
 8002554:	f7fe f858 	bl	8000608 <__aeabi_dmul>
 8002558:	4b37      	ldr	r3, [pc, #220]	@ (8002638 <__ieee754_acos+0x4b0>)
 800255a:	2200      	movs	r2, #0
 800255c:	f7fd fe9e 	bl	800029c <__adddf3>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4650      	mov	r0, sl
 8002566:	4659      	mov	r1, fp
 8002568:	f7fe f978 	bl	800085c <__aeabi_ddiv>
 800256c:	4642      	mov	r2, r8
 800256e:	464b      	mov	r3, r9
 8002570:	f7fe f84a 	bl	8000608 <__aeabi_dmul>
 8002574:	2600      	movs	r6, #0
 8002576:	4682      	mov	sl, r0
 8002578:	468b      	mov	fp, r1
 800257a:	4632      	mov	r2, r6
 800257c:	464b      	mov	r3, r9
 800257e:	4630      	mov	r0, r6
 8002580:	4649      	mov	r1, r9
 8002582:	f7fe f841 	bl	8000608 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4620      	mov	r0, r4
 800258c:	4629      	mov	r1, r5
 800258e:	f7fd fe83 	bl	8000298 <__aeabi_dsub>
 8002592:	4632      	mov	r2, r6
 8002594:	4604      	mov	r4, r0
 8002596:	460d      	mov	r5, r1
 8002598:	464b      	mov	r3, r9
 800259a:	4640      	mov	r0, r8
 800259c:	4649      	mov	r1, r9
 800259e:	f7fd fe7d 	bl	800029c <__adddf3>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4620      	mov	r0, r4
 80025a8:	4629      	mov	r1, r5
 80025aa:	f7fe f957 	bl	800085c <__aeabi_ddiv>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4650      	mov	r0, sl
 80025b4:	4659      	mov	r1, fp
 80025b6:	f7fd fe71 	bl	800029c <__adddf3>
 80025ba:	4632      	mov	r2, r6
 80025bc:	464b      	mov	r3, r9
 80025be:	f7fd fe6d 	bl	800029c <__adddf3>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	f7fd fe69 	bl	800029c <__adddf3>
 80025ca:	e5fd      	b.n	80021c8 <__ieee754_acos+0x40>
 80025cc:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8002628 <__ieee754_acos+0x4a0>
 80025d0:	e5ee      	b.n	80021b0 <__ieee754_acos+0x28>
 80025d2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8002630 <__ieee754_acos+0x4a8>
 80025d6:	e5eb      	b.n	80021b0 <__ieee754_acos+0x28>
 80025d8:	0dfdf709 	.word	0x0dfdf709
 80025dc:	3f023de1 	.word	0x3f023de1
 80025e0:	7501b288 	.word	0x7501b288
 80025e4:	3f49efe0 	.word	0x3f49efe0
 80025e8:	b5688f3b 	.word	0xb5688f3b
 80025ec:	3fa48228 	.word	0x3fa48228
 80025f0:	0e884455 	.word	0x0e884455
 80025f4:	3fc9c155 	.word	0x3fc9c155
 80025f8:	03eb6f7d 	.word	0x03eb6f7d
 80025fc:	3fd4d612 	.word	0x3fd4d612
 8002600:	55555555 	.word	0x55555555
 8002604:	3fc55555 	.word	0x3fc55555
 8002608:	b12e9282 	.word	0xb12e9282
 800260c:	3fb3b8c5 	.word	0x3fb3b8c5
 8002610:	1b8d0159 	.word	0x1b8d0159
 8002614:	3fe6066c 	.word	0x3fe6066c
 8002618:	9c598ac8 	.word	0x9c598ac8
 800261c:	40002ae5 	.word	0x40002ae5
 8002620:	1c8a2d4b 	.word	0x1c8a2d4b
 8002624:	40033a27 	.word	0x40033a27
 8002628:	54442d18 	.word	0x54442d18
 800262c:	400921fb 	.word	0x400921fb
 8002630:	54442d18 	.word	0x54442d18
 8002634:	3ff921fb 	.word	0x3ff921fb
 8002638:	3ff00000 	.word	0x3ff00000
 800263c:	3fe00000 	.word	0x3fe00000

08002640 <fabs>:
 8002640:	ec51 0b10 	vmov	r0, r1, d0
 8002644:	4602      	mov	r2, r0
 8002646:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800264a:	ec43 2b10 	vmov	d0, r2, r3
 800264e:	4770      	bx	lr

08002650 <__ieee754_sqrt>:
 8002650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002654:	4a66      	ldr	r2, [pc, #408]	@ (80027f0 <__ieee754_sqrt+0x1a0>)
 8002656:	ec55 4b10 	vmov	r4, r5, d0
 800265a:	43aa      	bics	r2, r5
 800265c:	462b      	mov	r3, r5
 800265e:	4621      	mov	r1, r4
 8002660:	d110      	bne.n	8002684 <__ieee754_sqrt+0x34>
 8002662:	4622      	mov	r2, r4
 8002664:	4620      	mov	r0, r4
 8002666:	4629      	mov	r1, r5
 8002668:	f7fd ffce 	bl	8000608 <__aeabi_dmul>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4620      	mov	r0, r4
 8002672:	4629      	mov	r1, r5
 8002674:	f7fd fe12 	bl	800029c <__adddf3>
 8002678:	4604      	mov	r4, r0
 800267a:	460d      	mov	r5, r1
 800267c:	ec45 4b10 	vmov	d0, r4, r5
 8002680:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002684:	2d00      	cmp	r5, #0
 8002686:	dc0e      	bgt.n	80026a6 <__ieee754_sqrt+0x56>
 8002688:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800268c:	4322      	orrs	r2, r4
 800268e:	d0f5      	beq.n	800267c <__ieee754_sqrt+0x2c>
 8002690:	b19d      	cbz	r5, 80026ba <__ieee754_sqrt+0x6a>
 8002692:	4622      	mov	r2, r4
 8002694:	4620      	mov	r0, r4
 8002696:	4629      	mov	r1, r5
 8002698:	f7fd fdfe 	bl	8000298 <__aeabi_dsub>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	f7fe f8dc 	bl	800085c <__aeabi_ddiv>
 80026a4:	e7e8      	b.n	8002678 <__ieee754_sqrt+0x28>
 80026a6:	152a      	asrs	r2, r5, #20
 80026a8:	d115      	bne.n	80026d6 <__ieee754_sqrt+0x86>
 80026aa:	2000      	movs	r0, #0
 80026ac:	e009      	b.n	80026c2 <__ieee754_sqrt+0x72>
 80026ae:	0acb      	lsrs	r3, r1, #11
 80026b0:	3a15      	subs	r2, #21
 80026b2:	0549      	lsls	r1, r1, #21
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0fa      	beq.n	80026ae <__ieee754_sqrt+0x5e>
 80026b8:	e7f7      	b.n	80026aa <__ieee754_sqrt+0x5a>
 80026ba:	462a      	mov	r2, r5
 80026bc:	e7fa      	b.n	80026b4 <__ieee754_sqrt+0x64>
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	3001      	adds	r0, #1
 80026c2:	02dc      	lsls	r4, r3, #11
 80026c4:	d5fb      	bpl.n	80026be <__ieee754_sqrt+0x6e>
 80026c6:	1e44      	subs	r4, r0, #1
 80026c8:	1b12      	subs	r2, r2, r4
 80026ca:	f1c0 0420 	rsb	r4, r0, #32
 80026ce:	fa21 f404 	lsr.w	r4, r1, r4
 80026d2:	4323      	orrs	r3, r4
 80026d4:	4081      	lsls	r1, r0
 80026d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026da:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 80026de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026e2:	07d2      	lsls	r2, r2, #31
 80026e4:	bf5c      	itt	pl
 80026e6:	005b      	lslpl	r3, r3, #1
 80026e8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80026ec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80026f0:	bf58      	it	pl
 80026f2:	0049      	lslpl	r1, r1, #1
 80026f4:	2600      	movs	r6, #0
 80026f6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80026fa:	107f      	asrs	r7, r7, #1
 80026fc:	0049      	lsls	r1, r1, #1
 80026fe:	2016      	movs	r0, #22
 8002700:	4632      	mov	r2, r6
 8002702:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8002706:	1915      	adds	r5, r2, r4
 8002708:	429d      	cmp	r5, r3
 800270a:	bfde      	ittt	le
 800270c:	192a      	addle	r2, r5, r4
 800270e:	1b5b      	suble	r3, r3, r5
 8002710:	1936      	addle	r6, r6, r4
 8002712:	0fcd      	lsrs	r5, r1, #31
 8002714:	3801      	subs	r0, #1
 8002716:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800271a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800271e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8002722:	d1f0      	bne.n	8002706 <__ieee754_sqrt+0xb6>
 8002724:	4605      	mov	r5, r0
 8002726:	2420      	movs	r4, #32
 8002728:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800272c:	4293      	cmp	r3, r2
 800272e:	eb0c 0e00 	add.w	lr, ip, r0
 8002732:	dc02      	bgt.n	800273a <__ieee754_sqrt+0xea>
 8002734:	d113      	bne.n	800275e <__ieee754_sqrt+0x10e>
 8002736:	458e      	cmp	lr, r1
 8002738:	d811      	bhi.n	800275e <__ieee754_sqrt+0x10e>
 800273a:	f1be 0f00 	cmp.w	lr, #0
 800273e:	eb0e 000c 	add.w	r0, lr, ip
 8002742:	da3f      	bge.n	80027c4 <__ieee754_sqrt+0x174>
 8002744:	2800      	cmp	r0, #0
 8002746:	db3d      	blt.n	80027c4 <__ieee754_sqrt+0x174>
 8002748:	f102 0801 	add.w	r8, r2, #1
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	458e      	cmp	lr, r1
 8002750:	bf88      	it	hi
 8002752:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8002756:	eba1 010e 	sub.w	r1, r1, lr
 800275a:	4465      	add	r5, ip
 800275c:	4642      	mov	r2, r8
 800275e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8002762:	3c01      	subs	r4, #1
 8002764:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8002768:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800276c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002770:	d1dc      	bne.n	800272c <__ieee754_sqrt+0xdc>
 8002772:	4319      	orrs	r1, r3
 8002774:	d01b      	beq.n	80027ae <__ieee754_sqrt+0x15e>
 8002776:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 80027f4 <__ieee754_sqrt+0x1a4>
 800277a:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 80027f8 <__ieee754_sqrt+0x1a8>
 800277e:	e9da 0100 	ldrd	r0, r1, [sl]
 8002782:	e9db 2300 	ldrd	r2, r3, [fp]
 8002786:	f7fd fd87 	bl	8000298 <__aeabi_dsub>
 800278a:	e9da 8900 	ldrd	r8, r9, [sl]
 800278e:	4602      	mov	r2, r0
 8002790:	460b      	mov	r3, r1
 8002792:	4640      	mov	r0, r8
 8002794:	4649      	mov	r1, r9
 8002796:	f7fe f9b3 	bl	8000b00 <__aeabi_dcmple>
 800279a:	b140      	cbz	r0, 80027ae <__ieee754_sqrt+0x15e>
 800279c:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 80027a0:	e9da 0100 	ldrd	r0, r1, [sl]
 80027a4:	e9db 2300 	ldrd	r2, r3, [fp]
 80027a8:	d10e      	bne.n	80027c8 <__ieee754_sqrt+0x178>
 80027aa:	3601      	adds	r6, #1
 80027ac:	4625      	mov	r5, r4
 80027ae:	1073      	asrs	r3, r6, #1
 80027b0:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 80027b4:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 80027b8:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 80027bc:	086b      	lsrs	r3, r5, #1
 80027be:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 80027c2:	e759      	b.n	8002678 <__ieee754_sqrt+0x28>
 80027c4:	4690      	mov	r8, r2
 80027c6:	e7c1      	b.n	800274c <__ieee754_sqrt+0xfc>
 80027c8:	f7fd fd68 	bl	800029c <__adddf3>
 80027cc:	e9da 8900 	ldrd	r8, r9, [sl]
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4640      	mov	r0, r8
 80027d6:	4649      	mov	r1, r9
 80027d8:	f7fe f988 	bl	8000aec <__aeabi_dcmplt>
 80027dc:	b120      	cbz	r0, 80027e8 <__ieee754_sqrt+0x198>
 80027de:	1cab      	adds	r3, r5, #2
 80027e0:	bf08      	it	eq
 80027e2:	3601      	addeq	r6, #1
 80027e4:	3502      	adds	r5, #2
 80027e6:	e7e2      	b.n	80027ae <__ieee754_sqrt+0x15e>
 80027e8:	1c6b      	adds	r3, r5, #1
 80027ea:	f023 0501 	bic.w	r5, r3, #1
 80027ee:	e7de      	b.n	80027ae <__ieee754_sqrt+0x15e>
 80027f0:	7ff00000 	.word	0x7ff00000
 80027f4:	08065180 	.word	0x08065180
 80027f8:	08065178 	.word	0x08065178
 80027fc:	00000000 	.word	0x00000000

08002800 <nan>:
 8002800:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8002808 <nan+0x8>
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	00000000 	.word	0x00000000
 800280c:	7ff80000 	.word	0x7ff80000

08002810 <calloc>:
 8002810:	4b02      	ldr	r3, [pc, #8]	@ (800281c <calloc+0xc>)
 8002812:	460a      	mov	r2, r1
 8002814:	4601      	mov	r1, r0
 8002816:	6818      	ldr	r0, [r3, #0]
 8002818:	f000 b802 	b.w	8002820 <_calloc_r>
 800281c:	2000000c 	.word	0x2000000c

08002820 <_calloc_r>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	fba1 5402 	umull	r5, r4, r1, r2
 8002826:	b934      	cbnz	r4, 8002836 <_calloc_r+0x16>
 8002828:	4629      	mov	r1, r5
 800282a:	f000 f83f 	bl	80028ac <_malloc_r>
 800282e:	4606      	mov	r6, r0
 8002830:	b928      	cbnz	r0, 800283e <_calloc_r+0x1e>
 8002832:	4630      	mov	r0, r6
 8002834:	bd70      	pop	{r4, r5, r6, pc}
 8002836:	220c      	movs	r2, #12
 8002838:	6002      	str	r2, [r0, #0]
 800283a:	2600      	movs	r6, #0
 800283c:	e7f9      	b.n	8002832 <_calloc_r+0x12>
 800283e:	462a      	mov	r2, r5
 8002840:	4621      	mov	r1, r4
 8002842:	f000 f917 	bl	8002a74 <memset>
 8002846:	e7f4      	b.n	8002832 <_calloc_r+0x12>

08002848 <malloc>:
 8002848:	4b02      	ldr	r3, [pc, #8]	@ (8002854 <malloc+0xc>)
 800284a:	4601      	mov	r1, r0
 800284c:	6818      	ldr	r0, [r3, #0]
 800284e:	f000 b82d 	b.w	80028ac <_malloc_r>
 8002852:	bf00      	nop
 8002854:	2000000c 	.word	0x2000000c

08002858 <free>:
 8002858:	4b02      	ldr	r3, [pc, #8]	@ (8002864 <free+0xc>)
 800285a:	4601      	mov	r1, r0
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	f000 b94d 	b.w	8002afc <_free_r>
 8002862:	bf00      	nop
 8002864:	2000000c 	.word	0x2000000c

08002868 <sbrk_aligned>:
 8002868:	b570      	push	{r4, r5, r6, lr}
 800286a:	4e0f      	ldr	r6, [pc, #60]	@ (80028a8 <sbrk_aligned+0x40>)
 800286c:	460c      	mov	r4, r1
 800286e:	6831      	ldr	r1, [r6, #0]
 8002870:	4605      	mov	r5, r0
 8002872:	b911      	cbnz	r1, 800287a <sbrk_aligned+0x12>
 8002874:	f000 f906 	bl	8002a84 <_sbrk_r>
 8002878:	6030      	str	r0, [r6, #0]
 800287a:	4621      	mov	r1, r4
 800287c:	4628      	mov	r0, r5
 800287e:	f000 f901 	bl	8002a84 <_sbrk_r>
 8002882:	1c43      	adds	r3, r0, #1
 8002884:	d103      	bne.n	800288e <sbrk_aligned+0x26>
 8002886:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800288a:	4620      	mov	r0, r4
 800288c:	bd70      	pop	{r4, r5, r6, pc}
 800288e:	1cc4      	adds	r4, r0, #3
 8002890:	f024 0403 	bic.w	r4, r4, #3
 8002894:	42a0      	cmp	r0, r4
 8002896:	d0f8      	beq.n	800288a <sbrk_aligned+0x22>
 8002898:	1a21      	subs	r1, r4, r0
 800289a:	4628      	mov	r0, r5
 800289c:	f000 f8f2 	bl	8002a84 <_sbrk_r>
 80028a0:	3001      	adds	r0, #1
 80028a2:	d1f2      	bne.n	800288a <sbrk_aligned+0x22>
 80028a4:	e7ef      	b.n	8002886 <sbrk_aligned+0x1e>
 80028a6:	bf00      	nop
 80028a8:	20000080 	.word	0x20000080

080028ac <_malloc_r>:
 80028ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b0:	1ccd      	adds	r5, r1, #3
 80028b2:	f025 0503 	bic.w	r5, r5, #3
 80028b6:	3508      	adds	r5, #8
 80028b8:	2d0c      	cmp	r5, #12
 80028ba:	bf38      	it	cc
 80028bc:	250c      	movcc	r5, #12
 80028be:	2d00      	cmp	r5, #0
 80028c0:	4606      	mov	r6, r0
 80028c2:	db01      	blt.n	80028c8 <_malloc_r+0x1c>
 80028c4:	42a9      	cmp	r1, r5
 80028c6:	d904      	bls.n	80028d2 <_malloc_r+0x26>
 80028c8:	230c      	movs	r3, #12
 80028ca:	6033      	str	r3, [r6, #0]
 80028cc:	2000      	movs	r0, #0
 80028ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029a8 <_malloc_r+0xfc>
 80028d6:	f000 f89f 	bl	8002a18 <__malloc_lock>
 80028da:	f8d8 3000 	ldr.w	r3, [r8]
 80028de:	461c      	mov	r4, r3
 80028e0:	bb44      	cbnz	r4, 8002934 <_malloc_r+0x88>
 80028e2:	4629      	mov	r1, r5
 80028e4:	4630      	mov	r0, r6
 80028e6:	f7ff ffbf 	bl	8002868 <sbrk_aligned>
 80028ea:	1c43      	adds	r3, r0, #1
 80028ec:	4604      	mov	r4, r0
 80028ee:	d158      	bne.n	80029a2 <_malloc_r+0xf6>
 80028f0:	f8d8 4000 	ldr.w	r4, [r8]
 80028f4:	4627      	mov	r7, r4
 80028f6:	2f00      	cmp	r7, #0
 80028f8:	d143      	bne.n	8002982 <_malloc_r+0xd6>
 80028fa:	2c00      	cmp	r4, #0
 80028fc:	d04b      	beq.n	8002996 <_malloc_r+0xea>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	4639      	mov	r1, r7
 8002902:	4630      	mov	r0, r6
 8002904:	eb04 0903 	add.w	r9, r4, r3
 8002908:	f000 f8bc 	bl	8002a84 <_sbrk_r>
 800290c:	4581      	cmp	r9, r0
 800290e:	d142      	bne.n	8002996 <_malloc_r+0xea>
 8002910:	6821      	ldr	r1, [r4, #0]
 8002912:	1a6d      	subs	r5, r5, r1
 8002914:	4629      	mov	r1, r5
 8002916:	4630      	mov	r0, r6
 8002918:	f7ff ffa6 	bl	8002868 <sbrk_aligned>
 800291c:	3001      	adds	r0, #1
 800291e:	d03a      	beq.n	8002996 <_malloc_r+0xea>
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	442b      	add	r3, r5
 8002924:	6023      	str	r3, [r4, #0]
 8002926:	f8d8 3000 	ldr.w	r3, [r8]
 800292a:	685a      	ldr	r2, [r3, #4]
 800292c:	bb62      	cbnz	r2, 8002988 <_malloc_r+0xdc>
 800292e:	f8c8 7000 	str.w	r7, [r8]
 8002932:	e00f      	b.n	8002954 <_malloc_r+0xa8>
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	1b52      	subs	r2, r2, r5
 8002938:	d420      	bmi.n	800297c <_malloc_r+0xd0>
 800293a:	2a0b      	cmp	r2, #11
 800293c:	d917      	bls.n	800296e <_malloc_r+0xc2>
 800293e:	1961      	adds	r1, r4, r5
 8002940:	42a3      	cmp	r3, r4
 8002942:	6025      	str	r5, [r4, #0]
 8002944:	bf18      	it	ne
 8002946:	6059      	strne	r1, [r3, #4]
 8002948:	6863      	ldr	r3, [r4, #4]
 800294a:	bf08      	it	eq
 800294c:	f8c8 1000 	streq.w	r1, [r8]
 8002950:	5162      	str	r2, [r4, r5]
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	4630      	mov	r0, r6
 8002956:	f000 f865 	bl	8002a24 <__malloc_unlock>
 800295a:	f104 000b 	add.w	r0, r4, #11
 800295e:	1d23      	adds	r3, r4, #4
 8002960:	f020 0007 	bic.w	r0, r0, #7
 8002964:	1ac2      	subs	r2, r0, r3
 8002966:	bf1c      	itt	ne
 8002968:	1a1b      	subne	r3, r3, r0
 800296a:	50a3      	strne	r3, [r4, r2]
 800296c:	e7af      	b.n	80028ce <_malloc_r+0x22>
 800296e:	6862      	ldr	r2, [r4, #4]
 8002970:	42a3      	cmp	r3, r4
 8002972:	bf0c      	ite	eq
 8002974:	f8c8 2000 	streq.w	r2, [r8]
 8002978:	605a      	strne	r2, [r3, #4]
 800297a:	e7eb      	b.n	8002954 <_malloc_r+0xa8>
 800297c:	4623      	mov	r3, r4
 800297e:	6864      	ldr	r4, [r4, #4]
 8002980:	e7ae      	b.n	80028e0 <_malloc_r+0x34>
 8002982:	463c      	mov	r4, r7
 8002984:	687f      	ldr	r7, [r7, #4]
 8002986:	e7b6      	b.n	80028f6 <_malloc_r+0x4a>
 8002988:	461a      	mov	r2, r3
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	42a3      	cmp	r3, r4
 800298e:	d1fb      	bne.n	8002988 <_malloc_r+0xdc>
 8002990:	2300      	movs	r3, #0
 8002992:	6053      	str	r3, [r2, #4]
 8002994:	e7de      	b.n	8002954 <_malloc_r+0xa8>
 8002996:	230c      	movs	r3, #12
 8002998:	6033      	str	r3, [r6, #0]
 800299a:	4630      	mov	r0, r6
 800299c:	f000 f842 	bl	8002a24 <__malloc_unlock>
 80029a0:	e794      	b.n	80028cc <_malloc_r+0x20>
 80029a2:	6005      	str	r5, [r0, #0]
 80029a4:	e7d6      	b.n	8002954 <_malloc_r+0xa8>
 80029a6:	bf00      	nop
 80029a8:	20000084 	.word	0x20000084

080029ac <sniprintf>:
 80029ac:	b40c      	push	{r2, r3}
 80029ae:	b530      	push	{r4, r5, lr}
 80029b0:	4b18      	ldr	r3, [pc, #96]	@ (8002a14 <sniprintf+0x68>)
 80029b2:	1e0c      	subs	r4, r1, #0
 80029b4:	681d      	ldr	r5, [r3, #0]
 80029b6:	b09d      	sub	sp, #116	@ 0x74
 80029b8:	da08      	bge.n	80029cc <sniprintf+0x20>
 80029ba:	238b      	movs	r3, #139	@ 0x8b
 80029bc:	602b      	str	r3, [r5, #0]
 80029be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029c2:	b01d      	add	sp, #116	@ 0x74
 80029c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029c8:	b002      	add	sp, #8
 80029ca:	4770      	bx	lr
 80029cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80029d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80029da:	bf14      	ite	ne
 80029dc:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80029e0:	4623      	moveq	r3, r4
 80029e2:	9304      	str	r3, [sp, #16]
 80029e4:	9307      	str	r3, [sp, #28]
 80029e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80029ea:	9002      	str	r0, [sp, #8]
 80029ec:	9006      	str	r0, [sp, #24]
 80029ee:	f8ad 3016 	strh.w	r3, [sp, #22]
 80029f2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80029f4:	ab21      	add	r3, sp, #132	@ 0x84
 80029f6:	a902      	add	r1, sp, #8
 80029f8:	4628      	mov	r0, r5
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	f000 f924 	bl	8002c48 <_svfiprintf_r>
 8002a00:	1c43      	adds	r3, r0, #1
 8002a02:	bfbc      	itt	lt
 8002a04:	238b      	movlt	r3, #139	@ 0x8b
 8002a06:	602b      	strlt	r3, [r5, #0]
 8002a08:	2c00      	cmp	r4, #0
 8002a0a:	d0da      	beq.n	80029c2 <sniprintf+0x16>
 8002a0c:	9b02      	ldr	r3, [sp, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
 8002a12:	e7d6      	b.n	80029c2 <sniprintf+0x16>
 8002a14:	2000000c 	.word	0x2000000c

08002a18 <__malloc_lock>:
 8002a18:	4801      	ldr	r0, [pc, #4]	@ (8002a20 <__malloc_lock+0x8>)
 8002a1a:	f000 b86d 	b.w	8002af8 <__retarget_lock_acquire_recursive>
 8002a1e:	bf00      	nop
 8002a20:	200001c0 	.word	0x200001c0

08002a24 <__malloc_unlock>:
 8002a24:	4801      	ldr	r0, [pc, #4]	@ (8002a2c <__malloc_unlock+0x8>)
 8002a26:	f000 b868 	b.w	8002afa <__retarget_lock_release_recursive>
 8002a2a:	bf00      	nop
 8002a2c:	200001c0 	.word	0x200001c0

08002a30 <siprintf>:
 8002a30:	b40e      	push	{r1, r2, r3}
 8002a32:	b510      	push	{r4, lr}
 8002a34:	b09d      	sub	sp, #116	@ 0x74
 8002a36:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002a38:	9002      	str	r0, [sp, #8]
 8002a3a:	9006      	str	r0, [sp, #24]
 8002a3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002a40:	480a      	ldr	r0, [pc, #40]	@ (8002a6c <siprintf+0x3c>)
 8002a42:	9107      	str	r1, [sp, #28]
 8002a44:	9104      	str	r1, [sp, #16]
 8002a46:	490a      	ldr	r1, [pc, #40]	@ (8002a70 <siprintf+0x40>)
 8002a48:	f853 2b04 	ldr.w	r2, [r3], #4
 8002a4c:	9105      	str	r1, [sp, #20]
 8002a4e:	2400      	movs	r4, #0
 8002a50:	a902      	add	r1, sp, #8
 8002a52:	6800      	ldr	r0, [r0, #0]
 8002a54:	9301      	str	r3, [sp, #4]
 8002a56:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002a58:	f000 f8f6 	bl	8002c48 <_svfiprintf_r>
 8002a5c:	9b02      	ldr	r3, [sp, #8]
 8002a5e:	701c      	strb	r4, [r3, #0]
 8002a60:	b01d      	add	sp, #116	@ 0x74
 8002a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a66:	b003      	add	sp, #12
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	2000000c 	.word	0x2000000c
 8002a70:	ffff0208 	.word	0xffff0208

08002a74 <memset>:
 8002a74:	4402      	add	r2, r0
 8002a76:	4603      	mov	r3, r0
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d100      	bne.n	8002a7e <memset+0xa>
 8002a7c:	4770      	bx	lr
 8002a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a82:	e7f9      	b.n	8002a78 <memset+0x4>

08002a84 <_sbrk_r>:
 8002a84:	b538      	push	{r3, r4, r5, lr}
 8002a86:	4d06      	ldr	r5, [pc, #24]	@ (8002aa0 <_sbrk_r+0x1c>)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	602b      	str	r3, [r5, #0]
 8002a90:	f7ff f932 	bl	8001cf8 <_sbrk>
 8002a94:	1c43      	adds	r3, r0, #1
 8002a96:	d102      	bne.n	8002a9e <_sbrk_r+0x1a>
 8002a98:	682b      	ldr	r3, [r5, #0]
 8002a9a:	b103      	cbz	r3, 8002a9e <_sbrk_r+0x1a>
 8002a9c:	6023      	str	r3, [r4, #0]
 8002a9e:	bd38      	pop	{r3, r4, r5, pc}
 8002aa0:	200001c4 	.word	0x200001c4

08002aa4 <__errno>:
 8002aa4:	4b01      	ldr	r3, [pc, #4]	@ (8002aac <__errno+0x8>)
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	2000000c 	.word	0x2000000c

08002ab0 <__libc_init_array>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	4d0d      	ldr	r5, [pc, #52]	@ (8002ae8 <__libc_init_array+0x38>)
 8002ab4:	4c0d      	ldr	r4, [pc, #52]	@ (8002aec <__libc_init_array+0x3c>)
 8002ab6:	1b64      	subs	r4, r4, r5
 8002ab8:	10a4      	asrs	r4, r4, #2
 8002aba:	2600      	movs	r6, #0
 8002abc:	42a6      	cmp	r6, r4
 8002abe:	d109      	bne.n	8002ad4 <__libc_init_array+0x24>
 8002ac0:	4d0b      	ldr	r5, [pc, #44]	@ (8002af0 <__libc_init_array+0x40>)
 8002ac2:	4c0c      	ldr	r4, [pc, #48]	@ (8002af4 <__libc_init_array+0x44>)
 8002ac4:	f000 fba6 	bl	8003214 <_init>
 8002ac8:	1b64      	subs	r4, r4, r5
 8002aca:	10a4      	asrs	r4, r4, #2
 8002acc:	2600      	movs	r6, #0
 8002ace:	42a6      	cmp	r6, r4
 8002ad0:	d105      	bne.n	8002ade <__libc_init_array+0x2e>
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad8:	4798      	blx	r3
 8002ada:	3601      	adds	r6, #1
 8002adc:	e7ee      	b.n	8002abc <__libc_init_array+0xc>
 8002ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae2:	4798      	blx	r3
 8002ae4:	3601      	adds	r6, #1
 8002ae6:	e7f2      	b.n	8002ace <__libc_init_array+0x1e>
 8002ae8:	08065190 	.word	0x08065190
 8002aec:	08065190 	.word	0x08065190
 8002af0:	08065190 	.word	0x08065190
 8002af4:	08065194 	.word	0x08065194

08002af8 <__retarget_lock_acquire_recursive>:
 8002af8:	4770      	bx	lr

08002afa <__retarget_lock_release_recursive>:
 8002afa:	4770      	bx	lr

08002afc <_free_r>:
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4605      	mov	r5, r0
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d041      	beq.n	8002b88 <_free_r+0x8c>
 8002b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b08:	1f0c      	subs	r4, r1, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bfb8      	it	lt
 8002b0e:	18e4      	addlt	r4, r4, r3
 8002b10:	f7ff ff82 	bl	8002a18 <__malloc_lock>
 8002b14:	4a1d      	ldr	r2, [pc, #116]	@ (8002b8c <_free_r+0x90>)
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	b933      	cbnz	r3, 8002b28 <_free_r+0x2c>
 8002b1a:	6063      	str	r3, [r4, #4]
 8002b1c:	6014      	str	r4, [r2, #0]
 8002b1e:	4628      	mov	r0, r5
 8002b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b24:	f7ff bf7e 	b.w	8002a24 <__malloc_unlock>
 8002b28:	42a3      	cmp	r3, r4
 8002b2a:	d908      	bls.n	8002b3e <_free_r+0x42>
 8002b2c:	6820      	ldr	r0, [r4, #0]
 8002b2e:	1821      	adds	r1, r4, r0
 8002b30:	428b      	cmp	r3, r1
 8002b32:	bf01      	itttt	eq
 8002b34:	6819      	ldreq	r1, [r3, #0]
 8002b36:	685b      	ldreq	r3, [r3, #4]
 8002b38:	1809      	addeq	r1, r1, r0
 8002b3a:	6021      	streq	r1, [r4, #0]
 8002b3c:	e7ed      	b.n	8002b1a <_free_r+0x1e>
 8002b3e:	461a      	mov	r2, r3
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	b10b      	cbz	r3, 8002b48 <_free_r+0x4c>
 8002b44:	42a3      	cmp	r3, r4
 8002b46:	d9fa      	bls.n	8002b3e <_free_r+0x42>
 8002b48:	6811      	ldr	r1, [r2, #0]
 8002b4a:	1850      	adds	r0, r2, r1
 8002b4c:	42a0      	cmp	r0, r4
 8002b4e:	d10b      	bne.n	8002b68 <_free_r+0x6c>
 8002b50:	6820      	ldr	r0, [r4, #0]
 8002b52:	4401      	add	r1, r0
 8002b54:	1850      	adds	r0, r2, r1
 8002b56:	4283      	cmp	r3, r0
 8002b58:	6011      	str	r1, [r2, #0]
 8002b5a:	d1e0      	bne.n	8002b1e <_free_r+0x22>
 8002b5c:	6818      	ldr	r0, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	6053      	str	r3, [r2, #4]
 8002b62:	4408      	add	r0, r1
 8002b64:	6010      	str	r0, [r2, #0]
 8002b66:	e7da      	b.n	8002b1e <_free_r+0x22>
 8002b68:	d902      	bls.n	8002b70 <_free_r+0x74>
 8002b6a:	230c      	movs	r3, #12
 8002b6c:	602b      	str	r3, [r5, #0]
 8002b6e:	e7d6      	b.n	8002b1e <_free_r+0x22>
 8002b70:	6820      	ldr	r0, [r4, #0]
 8002b72:	1821      	adds	r1, r4, r0
 8002b74:	428b      	cmp	r3, r1
 8002b76:	bf04      	itt	eq
 8002b78:	6819      	ldreq	r1, [r3, #0]
 8002b7a:	685b      	ldreq	r3, [r3, #4]
 8002b7c:	6063      	str	r3, [r4, #4]
 8002b7e:	bf04      	itt	eq
 8002b80:	1809      	addeq	r1, r1, r0
 8002b82:	6021      	streq	r1, [r4, #0]
 8002b84:	6054      	str	r4, [r2, #4]
 8002b86:	e7ca      	b.n	8002b1e <_free_r+0x22>
 8002b88:	bd38      	pop	{r3, r4, r5, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000084 	.word	0x20000084

08002b90 <__ssputs_r>:
 8002b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b94:	688e      	ldr	r6, [r1, #8]
 8002b96:	461f      	mov	r7, r3
 8002b98:	42be      	cmp	r6, r7
 8002b9a:	680b      	ldr	r3, [r1, #0]
 8002b9c:	4682      	mov	sl, r0
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	4690      	mov	r8, r2
 8002ba2:	d82d      	bhi.n	8002c00 <__ssputs_r+0x70>
 8002ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002ba8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002bac:	d026      	beq.n	8002bfc <__ssputs_r+0x6c>
 8002bae:	6965      	ldr	r5, [r4, #20]
 8002bb0:	6909      	ldr	r1, [r1, #16]
 8002bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bb6:	eba3 0901 	sub.w	r9, r3, r1
 8002bba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bbe:	1c7b      	adds	r3, r7, #1
 8002bc0:	444b      	add	r3, r9
 8002bc2:	106d      	asrs	r5, r5, #1
 8002bc4:	429d      	cmp	r5, r3
 8002bc6:	bf38      	it	cc
 8002bc8:	461d      	movcc	r5, r3
 8002bca:	0553      	lsls	r3, r2, #21
 8002bcc:	d527      	bpl.n	8002c1e <__ssputs_r+0x8e>
 8002bce:	4629      	mov	r1, r5
 8002bd0:	f7ff fe6c 	bl	80028ac <_malloc_r>
 8002bd4:	4606      	mov	r6, r0
 8002bd6:	b360      	cbz	r0, 8002c32 <__ssputs_r+0xa2>
 8002bd8:	6921      	ldr	r1, [r4, #16]
 8002bda:	464a      	mov	r2, r9
 8002bdc:	f000 fb04 	bl	80031e8 <memcpy>
 8002be0:	89a3      	ldrh	r3, [r4, #12]
 8002be2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bea:	81a3      	strh	r3, [r4, #12]
 8002bec:	6126      	str	r6, [r4, #16]
 8002bee:	6165      	str	r5, [r4, #20]
 8002bf0:	444e      	add	r6, r9
 8002bf2:	eba5 0509 	sub.w	r5, r5, r9
 8002bf6:	6026      	str	r6, [r4, #0]
 8002bf8:	60a5      	str	r5, [r4, #8]
 8002bfa:	463e      	mov	r6, r7
 8002bfc:	42be      	cmp	r6, r7
 8002bfe:	d900      	bls.n	8002c02 <__ssputs_r+0x72>
 8002c00:	463e      	mov	r6, r7
 8002c02:	6820      	ldr	r0, [r4, #0]
 8002c04:	4632      	mov	r2, r6
 8002c06:	4641      	mov	r1, r8
 8002c08:	f000 fad4 	bl	80031b4 <memmove>
 8002c0c:	68a3      	ldr	r3, [r4, #8]
 8002c0e:	1b9b      	subs	r3, r3, r6
 8002c10:	60a3      	str	r3, [r4, #8]
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	4433      	add	r3, r6
 8002c16:	6023      	str	r3, [r4, #0]
 8002c18:	2000      	movs	r0, #0
 8002c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c1e:	462a      	mov	r2, r5
 8002c20:	f000 fa9a 	bl	8003158 <_realloc_r>
 8002c24:	4606      	mov	r6, r0
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d1e0      	bne.n	8002bec <__ssputs_r+0x5c>
 8002c2a:	6921      	ldr	r1, [r4, #16]
 8002c2c:	4650      	mov	r0, sl
 8002c2e:	f7ff ff65 	bl	8002afc <_free_r>
 8002c32:	230c      	movs	r3, #12
 8002c34:	f8ca 3000 	str.w	r3, [sl]
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c3e:	81a3      	strh	r3, [r4, #12]
 8002c40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c44:	e7e9      	b.n	8002c1a <__ssputs_r+0x8a>
	...

08002c48 <_svfiprintf_r>:
 8002c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c4c:	4698      	mov	r8, r3
 8002c4e:	898b      	ldrh	r3, [r1, #12]
 8002c50:	061b      	lsls	r3, r3, #24
 8002c52:	b09d      	sub	sp, #116	@ 0x74
 8002c54:	4607      	mov	r7, r0
 8002c56:	460d      	mov	r5, r1
 8002c58:	4614      	mov	r4, r2
 8002c5a:	d510      	bpl.n	8002c7e <_svfiprintf_r+0x36>
 8002c5c:	690b      	ldr	r3, [r1, #16]
 8002c5e:	b973      	cbnz	r3, 8002c7e <_svfiprintf_r+0x36>
 8002c60:	2140      	movs	r1, #64	@ 0x40
 8002c62:	f7ff fe23 	bl	80028ac <_malloc_r>
 8002c66:	6028      	str	r0, [r5, #0]
 8002c68:	6128      	str	r0, [r5, #16]
 8002c6a:	b930      	cbnz	r0, 8002c7a <_svfiprintf_r+0x32>
 8002c6c:	230c      	movs	r3, #12
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c74:	b01d      	add	sp, #116	@ 0x74
 8002c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c7a:	2340      	movs	r3, #64	@ 0x40
 8002c7c:	616b      	str	r3, [r5, #20]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c82:	2320      	movs	r3, #32
 8002c84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c8c:	2330      	movs	r3, #48	@ 0x30
 8002c8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002e2c <_svfiprintf_r+0x1e4>
 8002c92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c96:	f04f 0901 	mov.w	r9, #1
 8002c9a:	4623      	mov	r3, r4
 8002c9c:	469a      	mov	sl, r3
 8002c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ca2:	b10a      	cbz	r2, 8002ca8 <_svfiprintf_r+0x60>
 8002ca4:	2a25      	cmp	r2, #37	@ 0x25
 8002ca6:	d1f9      	bne.n	8002c9c <_svfiprintf_r+0x54>
 8002ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8002cac:	d00b      	beq.n	8002cc6 <_svfiprintf_r+0x7e>
 8002cae:	465b      	mov	r3, fp
 8002cb0:	4622      	mov	r2, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	4638      	mov	r0, r7
 8002cb6:	f7ff ff6b 	bl	8002b90 <__ssputs_r>
 8002cba:	3001      	adds	r0, #1
 8002cbc:	f000 80a7 	beq.w	8002e0e <_svfiprintf_r+0x1c6>
 8002cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cc2:	445a      	add	r2, fp
 8002cc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 809f 	beq.w	8002e0e <_svfiprintf_r+0x1c6>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cda:	f10a 0a01 	add.w	sl, sl, #1
 8002cde:	9304      	str	r3, [sp, #16]
 8002ce0:	9307      	str	r3, [sp, #28]
 8002ce2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ce6:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ce8:	4654      	mov	r4, sl
 8002cea:	2205      	movs	r2, #5
 8002cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cf0:	484e      	ldr	r0, [pc, #312]	@ (8002e2c <_svfiprintf_r+0x1e4>)
 8002cf2:	f7fd fa7d 	bl	80001f0 <memchr>
 8002cf6:	9a04      	ldr	r2, [sp, #16]
 8002cf8:	b9d8      	cbnz	r0, 8002d32 <_svfiprintf_r+0xea>
 8002cfa:	06d0      	lsls	r0, r2, #27
 8002cfc:	bf44      	itt	mi
 8002cfe:	2320      	movmi	r3, #32
 8002d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d04:	0711      	lsls	r1, r2, #28
 8002d06:	bf44      	itt	mi
 8002d08:	232b      	movmi	r3, #43	@ 0x2b
 8002d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8002d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d14:	d015      	beq.n	8002d42 <_svfiprintf_r+0xfa>
 8002d16:	9a07      	ldr	r2, [sp, #28]
 8002d18:	4654      	mov	r4, sl
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f04f 0c0a 	mov.w	ip, #10
 8002d20:	4621      	mov	r1, r4
 8002d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d26:	3b30      	subs	r3, #48	@ 0x30
 8002d28:	2b09      	cmp	r3, #9
 8002d2a:	d94b      	bls.n	8002dc4 <_svfiprintf_r+0x17c>
 8002d2c:	b1b0      	cbz	r0, 8002d5c <_svfiprintf_r+0x114>
 8002d2e:	9207      	str	r2, [sp, #28]
 8002d30:	e014      	b.n	8002d5c <_svfiprintf_r+0x114>
 8002d32:	eba0 0308 	sub.w	r3, r0, r8
 8002d36:	fa09 f303 	lsl.w	r3, r9, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	9304      	str	r3, [sp, #16]
 8002d3e:	46a2      	mov	sl, r4
 8002d40:	e7d2      	b.n	8002ce8 <_svfiprintf_r+0xa0>
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	1d19      	adds	r1, r3, #4
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	9103      	str	r1, [sp, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	bfbb      	ittet	lt
 8002d4e:	425b      	neglt	r3, r3
 8002d50:	f042 0202 	orrlt.w	r2, r2, #2
 8002d54:	9307      	strge	r3, [sp, #28]
 8002d56:	9307      	strlt	r3, [sp, #28]
 8002d58:	bfb8      	it	lt
 8002d5a:	9204      	strlt	r2, [sp, #16]
 8002d5c:	7823      	ldrb	r3, [r4, #0]
 8002d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d60:	d10a      	bne.n	8002d78 <_svfiprintf_r+0x130>
 8002d62:	7863      	ldrb	r3, [r4, #1]
 8002d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d66:	d132      	bne.n	8002dce <_svfiprintf_r+0x186>
 8002d68:	9b03      	ldr	r3, [sp, #12]
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	9203      	str	r2, [sp, #12]
 8002d70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d74:	3402      	adds	r4, #2
 8002d76:	9305      	str	r3, [sp, #20]
 8002d78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002e3c <_svfiprintf_r+0x1f4>
 8002d7c:	7821      	ldrb	r1, [r4, #0]
 8002d7e:	2203      	movs	r2, #3
 8002d80:	4650      	mov	r0, sl
 8002d82:	f7fd fa35 	bl	80001f0 <memchr>
 8002d86:	b138      	cbz	r0, 8002d98 <_svfiprintf_r+0x150>
 8002d88:	9b04      	ldr	r3, [sp, #16]
 8002d8a:	eba0 000a 	sub.w	r0, r0, sl
 8002d8e:	2240      	movs	r2, #64	@ 0x40
 8002d90:	4082      	lsls	r2, r0
 8002d92:	4313      	orrs	r3, r2
 8002d94:	3401      	adds	r4, #1
 8002d96:	9304      	str	r3, [sp, #16]
 8002d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d9c:	4824      	ldr	r0, [pc, #144]	@ (8002e30 <_svfiprintf_r+0x1e8>)
 8002d9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002da2:	2206      	movs	r2, #6
 8002da4:	f7fd fa24 	bl	80001f0 <memchr>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d036      	beq.n	8002e1a <_svfiprintf_r+0x1d2>
 8002dac:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <_svfiprintf_r+0x1ec>)
 8002dae:	bb1b      	cbnz	r3, 8002df8 <_svfiprintf_r+0x1b0>
 8002db0:	9b03      	ldr	r3, [sp, #12]
 8002db2:	3307      	adds	r3, #7
 8002db4:	f023 0307 	bic.w	r3, r3, #7
 8002db8:	3308      	adds	r3, #8
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dbe:	4433      	add	r3, r6
 8002dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dc2:	e76a      	b.n	8002c9a <_svfiprintf_r+0x52>
 8002dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dc8:	460c      	mov	r4, r1
 8002dca:	2001      	movs	r0, #1
 8002dcc:	e7a8      	b.n	8002d20 <_svfiprintf_r+0xd8>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	3401      	adds	r4, #1
 8002dd2:	9305      	str	r3, [sp, #20]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f04f 0c0a 	mov.w	ip, #10
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002de0:	3a30      	subs	r2, #48	@ 0x30
 8002de2:	2a09      	cmp	r2, #9
 8002de4:	d903      	bls.n	8002dee <_svfiprintf_r+0x1a6>
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0c6      	beq.n	8002d78 <_svfiprintf_r+0x130>
 8002dea:	9105      	str	r1, [sp, #20]
 8002dec:	e7c4      	b.n	8002d78 <_svfiprintf_r+0x130>
 8002dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8002df2:	4604      	mov	r4, r0
 8002df4:	2301      	movs	r3, #1
 8002df6:	e7f0      	b.n	8002dda <_svfiprintf_r+0x192>
 8002df8:	ab03      	add	r3, sp, #12
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	462a      	mov	r2, r5
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <_svfiprintf_r+0x1f0>)
 8002e00:	a904      	add	r1, sp, #16
 8002e02:	4638      	mov	r0, r7
 8002e04:	f3af 8000 	nop.w
 8002e08:	1c42      	adds	r2, r0, #1
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	d1d6      	bne.n	8002dbc <_svfiprintf_r+0x174>
 8002e0e:	89ab      	ldrh	r3, [r5, #12]
 8002e10:	065b      	lsls	r3, r3, #25
 8002e12:	f53f af2d 	bmi.w	8002c70 <_svfiprintf_r+0x28>
 8002e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e18:	e72c      	b.n	8002c74 <_svfiprintf_r+0x2c>
 8002e1a:	ab03      	add	r3, sp, #12
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	462a      	mov	r2, r5
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <_svfiprintf_r+0x1f0>)
 8002e22:	a904      	add	r1, sp, #16
 8002e24:	4638      	mov	r0, r7
 8002e26:	f000 f879 	bl	8002f1c <_printf_i>
 8002e2a:	e7ed      	b.n	8002e08 <_svfiprintf_r+0x1c0>
 8002e2c:	08065140 	.word	0x08065140
 8002e30:	0806514a 	.word	0x0806514a
 8002e34:	00000000 	.word	0x00000000
 8002e38:	08002b91 	.word	0x08002b91
 8002e3c:	08065146 	.word	0x08065146

08002e40 <_printf_common>:
 8002e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e44:	4616      	mov	r6, r2
 8002e46:	4698      	mov	r8, r3
 8002e48:	688a      	ldr	r2, [r1, #8]
 8002e4a:	690b      	ldr	r3, [r1, #16]
 8002e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e50:	4293      	cmp	r3, r2
 8002e52:	bfb8      	it	lt
 8002e54:	4613      	movlt	r3, r2
 8002e56:	6033      	str	r3, [r6, #0]
 8002e58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	460c      	mov	r4, r1
 8002e60:	b10a      	cbz	r2, 8002e66 <_printf_common+0x26>
 8002e62:	3301      	adds	r3, #1
 8002e64:	6033      	str	r3, [r6, #0]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	0699      	lsls	r1, r3, #26
 8002e6a:	bf42      	ittt	mi
 8002e6c:	6833      	ldrmi	r3, [r6, #0]
 8002e6e:	3302      	addmi	r3, #2
 8002e70:	6033      	strmi	r3, [r6, #0]
 8002e72:	6825      	ldr	r5, [r4, #0]
 8002e74:	f015 0506 	ands.w	r5, r5, #6
 8002e78:	d106      	bne.n	8002e88 <_printf_common+0x48>
 8002e7a:	f104 0a19 	add.w	sl, r4, #25
 8002e7e:	68e3      	ldr	r3, [r4, #12]
 8002e80:	6832      	ldr	r2, [r6, #0]
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	42ab      	cmp	r3, r5
 8002e86:	dc26      	bgt.n	8002ed6 <_printf_common+0x96>
 8002e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	3b00      	subs	r3, #0
 8002e90:	bf18      	it	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	0692      	lsls	r2, r2, #26
 8002e96:	d42b      	bmi.n	8002ef0 <_printf_common+0xb0>
 8002e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002e9c:	4641      	mov	r1, r8
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	47c8      	blx	r9
 8002ea2:	3001      	adds	r0, #1
 8002ea4:	d01e      	beq.n	8002ee4 <_printf_common+0xa4>
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	6922      	ldr	r2, [r4, #16]
 8002eaa:	f003 0306 	and.w	r3, r3, #6
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	bf02      	ittt	eq
 8002eb2:	68e5      	ldreq	r5, [r4, #12]
 8002eb4:	6833      	ldreq	r3, [r6, #0]
 8002eb6:	1aed      	subeq	r5, r5, r3
 8002eb8:	68a3      	ldr	r3, [r4, #8]
 8002eba:	bf0c      	ite	eq
 8002ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ec0:	2500      	movne	r5, #0
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	bfc4      	itt	gt
 8002ec6:	1a9b      	subgt	r3, r3, r2
 8002ec8:	18ed      	addgt	r5, r5, r3
 8002eca:	2600      	movs	r6, #0
 8002ecc:	341a      	adds	r4, #26
 8002ece:	42b5      	cmp	r5, r6
 8002ed0:	d11a      	bne.n	8002f08 <_printf_common+0xc8>
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	e008      	b.n	8002ee8 <_printf_common+0xa8>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	4652      	mov	r2, sl
 8002eda:	4641      	mov	r1, r8
 8002edc:	4638      	mov	r0, r7
 8002ede:	47c8      	blx	r9
 8002ee0:	3001      	adds	r0, #1
 8002ee2:	d103      	bne.n	8002eec <_printf_common+0xac>
 8002ee4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002eec:	3501      	adds	r5, #1
 8002eee:	e7c6      	b.n	8002e7e <_printf_common+0x3e>
 8002ef0:	18e1      	adds	r1, r4, r3
 8002ef2:	1c5a      	adds	r2, r3, #1
 8002ef4:	2030      	movs	r0, #48	@ 0x30
 8002ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002efa:	4422      	add	r2, r4
 8002efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f04:	3302      	adds	r3, #2
 8002f06:	e7c7      	b.n	8002e98 <_printf_common+0x58>
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	4641      	mov	r1, r8
 8002f0e:	4638      	mov	r0, r7
 8002f10:	47c8      	blx	r9
 8002f12:	3001      	adds	r0, #1
 8002f14:	d0e6      	beq.n	8002ee4 <_printf_common+0xa4>
 8002f16:	3601      	adds	r6, #1
 8002f18:	e7d9      	b.n	8002ece <_printf_common+0x8e>
	...

08002f1c <_printf_i>:
 8002f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f20:	7e0f      	ldrb	r7, [r1, #24]
 8002f22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f24:	2f78      	cmp	r7, #120	@ 0x78
 8002f26:	4691      	mov	r9, r2
 8002f28:	4680      	mov	r8, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	469a      	mov	sl, r3
 8002f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f32:	d807      	bhi.n	8002f44 <_printf_i+0x28>
 8002f34:	2f62      	cmp	r7, #98	@ 0x62
 8002f36:	d80a      	bhi.n	8002f4e <_printf_i+0x32>
 8002f38:	2f00      	cmp	r7, #0
 8002f3a:	f000 80d1 	beq.w	80030e0 <_printf_i+0x1c4>
 8002f3e:	2f58      	cmp	r7, #88	@ 0x58
 8002f40:	f000 80b8 	beq.w	80030b4 <_printf_i+0x198>
 8002f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f4c:	e03a      	b.n	8002fc4 <_printf_i+0xa8>
 8002f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f52:	2b15      	cmp	r3, #21
 8002f54:	d8f6      	bhi.n	8002f44 <_printf_i+0x28>
 8002f56:	a101      	add	r1, pc, #4	@ (adr r1, 8002f5c <_printf_i+0x40>)
 8002f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f5c:	08002fb5 	.word	0x08002fb5
 8002f60:	08002fc9 	.word	0x08002fc9
 8002f64:	08002f45 	.word	0x08002f45
 8002f68:	08002f45 	.word	0x08002f45
 8002f6c:	08002f45 	.word	0x08002f45
 8002f70:	08002f45 	.word	0x08002f45
 8002f74:	08002fc9 	.word	0x08002fc9
 8002f78:	08002f45 	.word	0x08002f45
 8002f7c:	08002f45 	.word	0x08002f45
 8002f80:	08002f45 	.word	0x08002f45
 8002f84:	08002f45 	.word	0x08002f45
 8002f88:	080030c7 	.word	0x080030c7
 8002f8c:	08002ff3 	.word	0x08002ff3
 8002f90:	08003081 	.word	0x08003081
 8002f94:	08002f45 	.word	0x08002f45
 8002f98:	08002f45 	.word	0x08002f45
 8002f9c:	080030e9 	.word	0x080030e9
 8002fa0:	08002f45 	.word	0x08002f45
 8002fa4:	08002ff3 	.word	0x08002ff3
 8002fa8:	08002f45 	.word	0x08002f45
 8002fac:	08002f45 	.word	0x08002f45
 8002fb0:	08003089 	.word	0x08003089
 8002fb4:	6833      	ldr	r3, [r6, #0]
 8002fb6:	1d1a      	adds	r2, r3, #4
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6032      	str	r2, [r6, #0]
 8002fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e09c      	b.n	8003102 <_printf_i+0x1e6>
 8002fc8:	6833      	ldr	r3, [r6, #0]
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	1d19      	adds	r1, r3, #4
 8002fce:	6031      	str	r1, [r6, #0]
 8002fd0:	0606      	lsls	r6, r0, #24
 8002fd2:	d501      	bpl.n	8002fd8 <_printf_i+0xbc>
 8002fd4:	681d      	ldr	r5, [r3, #0]
 8002fd6:	e003      	b.n	8002fe0 <_printf_i+0xc4>
 8002fd8:	0645      	lsls	r5, r0, #25
 8002fda:	d5fb      	bpl.n	8002fd4 <_printf_i+0xb8>
 8002fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002fe0:	2d00      	cmp	r5, #0
 8002fe2:	da03      	bge.n	8002fec <_printf_i+0xd0>
 8002fe4:	232d      	movs	r3, #45	@ 0x2d
 8002fe6:	426d      	negs	r5, r5
 8002fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002fec:	4858      	ldr	r0, [pc, #352]	@ (8003150 <_printf_i+0x234>)
 8002fee:	230a      	movs	r3, #10
 8002ff0:	e011      	b.n	8003016 <_printf_i+0xfa>
 8002ff2:	6821      	ldr	r1, [r4, #0]
 8002ff4:	6833      	ldr	r3, [r6, #0]
 8002ff6:	0608      	lsls	r0, r1, #24
 8002ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ffc:	d402      	bmi.n	8003004 <_printf_i+0xe8>
 8002ffe:	0649      	lsls	r1, r1, #25
 8003000:	bf48      	it	mi
 8003002:	b2ad      	uxthmi	r5, r5
 8003004:	2f6f      	cmp	r7, #111	@ 0x6f
 8003006:	4852      	ldr	r0, [pc, #328]	@ (8003150 <_printf_i+0x234>)
 8003008:	6033      	str	r3, [r6, #0]
 800300a:	bf14      	ite	ne
 800300c:	230a      	movne	r3, #10
 800300e:	2308      	moveq	r3, #8
 8003010:	2100      	movs	r1, #0
 8003012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003016:	6866      	ldr	r6, [r4, #4]
 8003018:	60a6      	str	r6, [r4, #8]
 800301a:	2e00      	cmp	r6, #0
 800301c:	db05      	blt.n	800302a <_printf_i+0x10e>
 800301e:	6821      	ldr	r1, [r4, #0]
 8003020:	432e      	orrs	r6, r5
 8003022:	f021 0104 	bic.w	r1, r1, #4
 8003026:	6021      	str	r1, [r4, #0]
 8003028:	d04b      	beq.n	80030c2 <_printf_i+0x1a6>
 800302a:	4616      	mov	r6, r2
 800302c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003030:	fb03 5711 	mls	r7, r3, r1, r5
 8003034:	5dc7      	ldrb	r7, [r0, r7]
 8003036:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800303a:	462f      	mov	r7, r5
 800303c:	42bb      	cmp	r3, r7
 800303e:	460d      	mov	r5, r1
 8003040:	d9f4      	bls.n	800302c <_printf_i+0x110>
 8003042:	2b08      	cmp	r3, #8
 8003044:	d10b      	bne.n	800305e <_printf_i+0x142>
 8003046:	6823      	ldr	r3, [r4, #0]
 8003048:	07df      	lsls	r7, r3, #31
 800304a:	d508      	bpl.n	800305e <_printf_i+0x142>
 800304c:	6923      	ldr	r3, [r4, #16]
 800304e:	6861      	ldr	r1, [r4, #4]
 8003050:	4299      	cmp	r1, r3
 8003052:	bfde      	ittt	le
 8003054:	2330      	movle	r3, #48	@ 0x30
 8003056:	f806 3c01 	strble.w	r3, [r6, #-1]
 800305a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800305e:	1b92      	subs	r2, r2, r6
 8003060:	6122      	str	r2, [r4, #16]
 8003062:	f8cd a000 	str.w	sl, [sp]
 8003066:	464b      	mov	r3, r9
 8003068:	aa03      	add	r2, sp, #12
 800306a:	4621      	mov	r1, r4
 800306c:	4640      	mov	r0, r8
 800306e:	f7ff fee7 	bl	8002e40 <_printf_common>
 8003072:	3001      	adds	r0, #1
 8003074:	d14a      	bne.n	800310c <_printf_i+0x1f0>
 8003076:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800307a:	b004      	add	sp, #16
 800307c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	f043 0320 	orr.w	r3, r3, #32
 8003086:	6023      	str	r3, [r4, #0]
 8003088:	4832      	ldr	r0, [pc, #200]	@ (8003154 <_printf_i+0x238>)
 800308a:	2778      	movs	r7, #120	@ 0x78
 800308c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	6831      	ldr	r1, [r6, #0]
 8003094:	061f      	lsls	r7, r3, #24
 8003096:	f851 5b04 	ldr.w	r5, [r1], #4
 800309a:	d402      	bmi.n	80030a2 <_printf_i+0x186>
 800309c:	065f      	lsls	r7, r3, #25
 800309e:	bf48      	it	mi
 80030a0:	b2ad      	uxthmi	r5, r5
 80030a2:	6031      	str	r1, [r6, #0]
 80030a4:	07d9      	lsls	r1, r3, #31
 80030a6:	bf44      	itt	mi
 80030a8:	f043 0320 	orrmi.w	r3, r3, #32
 80030ac:	6023      	strmi	r3, [r4, #0]
 80030ae:	b11d      	cbz	r5, 80030b8 <_printf_i+0x19c>
 80030b0:	2310      	movs	r3, #16
 80030b2:	e7ad      	b.n	8003010 <_printf_i+0xf4>
 80030b4:	4826      	ldr	r0, [pc, #152]	@ (8003150 <_printf_i+0x234>)
 80030b6:	e7e9      	b.n	800308c <_printf_i+0x170>
 80030b8:	6823      	ldr	r3, [r4, #0]
 80030ba:	f023 0320 	bic.w	r3, r3, #32
 80030be:	6023      	str	r3, [r4, #0]
 80030c0:	e7f6      	b.n	80030b0 <_printf_i+0x194>
 80030c2:	4616      	mov	r6, r2
 80030c4:	e7bd      	b.n	8003042 <_printf_i+0x126>
 80030c6:	6833      	ldr	r3, [r6, #0]
 80030c8:	6825      	ldr	r5, [r4, #0]
 80030ca:	6961      	ldr	r1, [r4, #20]
 80030cc:	1d18      	adds	r0, r3, #4
 80030ce:	6030      	str	r0, [r6, #0]
 80030d0:	062e      	lsls	r6, r5, #24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	d501      	bpl.n	80030da <_printf_i+0x1be>
 80030d6:	6019      	str	r1, [r3, #0]
 80030d8:	e002      	b.n	80030e0 <_printf_i+0x1c4>
 80030da:	0668      	lsls	r0, r5, #25
 80030dc:	d5fb      	bpl.n	80030d6 <_printf_i+0x1ba>
 80030de:	8019      	strh	r1, [r3, #0]
 80030e0:	2300      	movs	r3, #0
 80030e2:	6123      	str	r3, [r4, #16]
 80030e4:	4616      	mov	r6, r2
 80030e6:	e7bc      	b.n	8003062 <_printf_i+0x146>
 80030e8:	6833      	ldr	r3, [r6, #0]
 80030ea:	1d1a      	adds	r2, r3, #4
 80030ec:	6032      	str	r2, [r6, #0]
 80030ee:	681e      	ldr	r6, [r3, #0]
 80030f0:	6862      	ldr	r2, [r4, #4]
 80030f2:	2100      	movs	r1, #0
 80030f4:	4630      	mov	r0, r6
 80030f6:	f7fd f87b 	bl	80001f0 <memchr>
 80030fa:	b108      	cbz	r0, 8003100 <_printf_i+0x1e4>
 80030fc:	1b80      	subs	r0, r0, r6
 80030fe:	6060      	str	r0, [r4, #4]
 8003100:	6863      	ldr	r3, [r4, #4]
 8003102:	6123      	str	r3, [r4, #16]
 8003104:	2300      	movs	r3, #0
 8003106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800310a:	e7aa      	b.n	8003062 <_printf_i+0x146>
 800310c:	6923      	ldr	r3, [r4, #16]
 800310e:	4632      	mov	r2, r6
 8003110:	4649      	mov	r1, r9
 8003112:	4640      	mov	r0, r8
 8003114:	47d0      	blx	sl
 8003116:	3001      	adds	r0, #1
 8003118:	d0ad      	beq.n	8003076 <_printf_i+0x15a>
 800311a:	6823      	ldr	r3, [r4, #0]
 800311c:	079b      	lsls	r3, r3, #30
 800311e:	d413      	bmi.n	8003148 <_printf_i+0x22c>
 8003120:	68e0      	ldr	r0, [r4, #12]
 8003122:	9b03      	ldr	r3, [sp, #12]
 8003124:	4298      	cmp	r0, r3
 8003126:	bfb8      	it	lt
 8003128:	4618      	movlt	r0, r3
 800312a:	e7a6      	b.n	800307a <_printf_i+0x15e>
 800312c:	2301      	movs	r3, #1
 800312e:	4632      	mov	r2, r6
 8003130:	4649      	mov	r1, r9
 8003132:	4640      	mov	r0, r8
 8003134:	47d0      	blx	sl
 8003136:	3001      	adds	r0, #1
 8003138:	d09d      	beq.n	8003076 <_printf_i+0x15a>
 800313a:	3501      	adds	r5, #1
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	9903      	ldr	r1, [sp, #12]
 8003140:	1a5b      	subs	r3, r3, r1
 8003142:	42ab      	cmp	r3, r5
 8003144:	dcf2      	bgt.n	800312c <_printf_i+0x210>
 8003146:	e7eb      	b.n	8003120 <_printf_i+0x204>
 8003148:	2500      	movs	r5, #0
 800314a:	f104 0619 	add.w	r6, r4, #25
 800314e:	e7f5      	b.n	800313c <_printf_i+0x220>
 8003150:	08065151 	.word	0x08065151
 8003154:	08065162 	.word	0x08065162

08003158 <_realloc_r>:
 8003158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800315c:	4607      	mov	r7, r0
 800315e:	4614      	mov	r4, r2
 8003160:	460d      	mov	r5, r1
 8003162:	b921      	cbnz	r1, 800316e <_realloc_r+0x16>
 8003164:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003168:	4611      	mov	r1, r2
 800316a:	f7ff bb9f 	b.w	80028ac <_malloc_r>
 800316e:	b92a      	cbnz	r2, 800317c <_realloc_r+0x24>
 8003170:	f7ff fcc4 	bl	8002afc <_free_r>
 8003174:	4625      	mov	r5, r4
 8003176:	4628      	mov	r0, r5
 8003178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800317c:	f000 f842 	bl	8003204 <_malloc_usable_size_r>
 8003180:	4284      	cmp	r4, r0
 8003182:	4606      	mov	r6, r0
 8003184:	d802      	bhi.n	800318c <_realloc_r+0x34>
 8003186:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800318a:	d8f4      	bhi.n	8003176 <_realloc_r+0x1e>
 800318c:	4621      	mov	r1, r4
 800318e:	4638      	mov	r0, r7
 8003190:	f7ff fb8c 	bl	80028ac <_malloc_r>
 8003194:	4680      	mov	r8, r0
 8003196:	b908      	cbnz	r0, 800319c <_realloc_r+0x44>
 8003198:	4645      	mov	r5, r8
 800319a:	e7ec      	b.n	8003176 <_realloc_r+0x1e>
 800319c:	42b4      	cmp	r4, r6
 800319e:	4622      	mov	r2, r4
 80031a0:	4629      	mov	r1, r5
 80031a2:	bf28      	it	cs
 80031a4:	4632      	movcs	r2, r6
 80031a6:	f000 f81f 	bl	80031e8 <memcpy>
 80031aa:	4629      	mov	r1, r5
 80031ac:	4638      	mov	r0, r7
 80031ae:	f7ff fca5 	bl	8002afc <_free_r>
 80031b2:	e7f1      	b.n	8003198 <_realloc_r+0x40>

080031b4 <memmove>:
 80031b4:	4288      	cmp	r0, r1
 80031b6:	b510      	push	{r4, lr}
 80031b8:	eb01 0402 	add.w	r4, r1, r2
 80031bc:	d902      	bls.n	80031c4 <memmove+0x10>
 80031be:	4284      	cmp	r4, r0
 80031c0:	4623      	mov	r3, r4
 80031c2:	d807      	bhi.n	80031d4 <memmove+0x20>
 80031c4:	1e43      	subs	r3, r0, #1
 80031c6:	42a1      	cmp	r1, r4
 80031c8:	d008      	beq.n	80031dc <memmove+0x28>
 80031ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031d2:	e7f8      	b.n	80031c6 <memmove+0x12>
 80031d4:	4402      	add	r2, r0
 80031d6:	4601      	mov	r1, r0
 80031d8:	428a      	cmp	r2, r1
 80031da:	d100      	bne.n	80031de <memmove+0x2a>
 80031dc:	bd10      	pop	{r4, pc}
 80031de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031e6:	e7f7      	b.n	80031d8 <memmove+0x24>

080031e8 <memcpy>:
 80031e8:	440a      	add	r2, r1
 80031ea:	4291      	cmp	r1, r2
 80031ec:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80031f0:	d100      	bne.n	80031f4 <memcpy+0xc>
 80031f2:	4770      	bx	lr
 80031f4:	b510      	push	{r4, lr}
 80031f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80031fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031fe:	4291      	cmp	r1, r2
 8003200:	d1f9      	bne.n	80031f6 <memcpy+0xe>
 8003202:	bd10      	pop	{r4, pc}

08003204 <_malloc_usable_size_r>:
 8003204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003208:	1f18      	subs	r0, r3, #4
 800320a:	2b00      	cmp	r3, #0
 800320c:	bfbc      	itt	lt
 800320e:	580b      	ldrlt	r3, [r1, r0]
 8003210:	18c0      	addlt	r0, r0, r3
 8003212:	4770      	bx	lr

08003214 <_init>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr

08003220 <_fini>:
 8003220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003222:	bf00      	nop
 8003224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003226:	bc08      	pop	{r3}
 8003228:	469e      	mov	lr, r3
 800322a:	4770      	bx	lr
