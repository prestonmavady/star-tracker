
stm-star-tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00061dd8  08002958  08002958  00003958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08064730  08064730  00066054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08064730  08064730  00065730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08064738  08064738  00066054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08064738  08064738  00065738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0806473c  0806473c  0006573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08064740  00066000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08064794  00066054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08064794  000661c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00066054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c30  00000000  00000000  00066084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b40  00000000  00000000  00068cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002f8  00000000  00000000  000697f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001d1  00000000  00000000  00069af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027422  00000000  00000000  00069cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000041d7  00000000  00000000  000910e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2433  00000000  00000000  000952ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001876ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010dc  00000000  00000000  00187730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  0018880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000054 	.word	0x20000054
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002940 	.word	0x08002940

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000058 	.word	0x20000058
 80001ec:	08002940 	.word	0x08002940

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <LPUART_Print>:
  NVIC->ISER[2] = (1 << (LPUART1_IRQn & 0x1F));   // enable LPUART1 ISR
  __enable_irq();                          // enable global interrupts
}


void LPUART_Print( const char* message ) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint16_t iStrIdx = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	81fb      	strh	r3, [r7, #14]
  while ( message[iStrIdx] != 0 ) {
 8000bc4:	e00f      	b.n	8000be6 <LPUART_Print+0x2e>
     while(!(LPUART1->ISR & USART_ISR_TXE)) // wait for empty xmit buffer
 8000bc6:	bf00      	nop
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <LPUART_Print+0x48>)
 8000bca:	69db      	ldr	r3, [r3, #28]
 8000bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0f9      	beq.n	8000bc8 <LPUART_Print+0x10>
        ;
     LPUART1->TDR = message[iStrIdx];       // send this character
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781a      	ldrb	r2, [r3, #0]
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <LPUART_Print+0x48>)
 8000bde:	851a      	strh	r2, [r3, #40]	@ 0x28
	iStrIdx++;                             // advance index to next char
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	3301      	adds	r3, #1
 8000be4:	81fb      	strh	r3, [r7, #14]
  while ( message[iStrIdx] != 0 ) {
 8000be6:	89fb      	ldrh	r3, [r7, #14]
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1e9      	bne.n	8000bc6 <LPUART_Print+0xe>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40008000 	.word	0x40008000

08000c04 <LPUART1_IRQHandler>:


void LPUART1_IRQHandler( void  ) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  uint8_t echo_enabled = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t charRecv;
  if (LPUART1->ISR & USART_ISR_RXNE) {
 8000c0e:	4b33      	ldr	r3, [pc, #204]	@ (8000cdc <LPUART1_IRQHandler+0xd8>)
 8000c10:	69db      	ldr	r3, [r3, #28]
 8000c12:	f003 0320 	and.w	r3, r3, #32
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d05c      	beq.n	8000cd4 <LPUART1_IRQHandler+0xd0>
     charRecv = LPUART1->RDR;
 8000c1a:	4b30      	ldr	r3, [pc, #192]	@ (8000cdc <LPUART1_IRQHandler+0xd8>)
 8000c1c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	71bb      	strb	r3, [r7, #6]
     switch ( charRecv ) {
 8000c22:	79bb      	ldrb	r3, [r7, #6]
 8000c24:	3b42      	subs	r3, #66	@ 0x42
 8000c26:	2b15      	cmp	r3, #21
 8000c28:	d83e      	bhi.n	8000ca8 <LPUART1_IRQHandler+0xa4>
 8000c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c30 <LPUART1_IRQHandler+0x2c>)
 8000c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c30:	08000c99 	.word	0x08000c99
 8000c34:	08000ca9 	.word	0x08000ca9
 8000c38:	08000ca9 	.word	0x08000ca9
 8000c3c:	08000ca9 	.word	0x08000ca9
 8000c40:	08000ca9 	.word	0x08000ca9
 8000c44:	08000c91 	.word	0x08000c91
 8000c48:	08000ca9 	.word	0x08000ca9
 8000c4c:	08000ca9 	.word	0x08000ca9
 8000c50:	08000ca9 	.word	0x08000ca9
 8000c54:	08000ca9 	.word	0x08000ca9
 8000c58:	08000ca9 	.word	0x08000ca9
 8000c5c:	08000ca9 	.word	0x08000ca9
 8000c60:	08000ca9 	.word	0x08000ca9
 8000c64:	08000ca9 	.word	0x08000ca9
 8000c68:	08000ca9 	.word	0x08000ca9
 8000c6c:	08000ca9 	.word	0x08000ca9
 8000c70:	08000c89 	.word	0x08000c89
 8000c74:	08000ca9 	.word	0x08000ca9
 8000c78:	08000ca9 	.word	0x08000ca9
 8000c7c:	08000ca9 	.word	0x08000ca9
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000ca1 	.word	0x08000ca1
	   case 'R':
           /* USER: process R to ESCape code back to terminal  0-7*/
		  LPUART_Send_ESC_Seq("31m");  //Change to red (0 or 1)
 8000c88:	4815      	ldr	r0, [pc, #84]	@ (8000ce0 <LPUART1_IRQHandler+0xdc>)
 8000c8a:	f000 f831 	bl	8000cf0 <LPUART_Send_ESC_Seq>
	      break;
 8000c8e:	e021      	b.n	8000cd4 <LPUART1_IRQHandler+0xd0>
	   case 'G':
	      LPUART_Send_ESC_Seq("32m");  //Change to green
 8000c90:	4814      	ldr	r0, [pc, #80]	@ (8000ce4 <LPUART1_IRQHandler+0xe0>)
 8000c92:	f000 f82d 	bl	8000cf0 <LPUART_Send_ESC_Seq>
	   	  break;
 8000c96:	e01d      	b.n	8000cd4 <LPUART1_IRQHandler+0xd0>
	   case 'B':
	   	  LPUART_Send_ESC_Seq("34m");  //Change to blue
 8000c98:	4813      	ldr	r0, [pc, #76]	@ (8000ce8 <LPUART1_IRQHandler+0xe4>)
 8000c9a:	f000 f829 	bl	8000cf0 <LPUART_Send_ESC_Seq>
	   	   break;
 8000c9e:	e019      	b.n	8000cd4 <LPUART1_IRQHandler+0xd0>
	   case 'W':
	   	  LPUART_Send_ESC_Seq("37m");  //Change to white (7)
 8000ca0:	4812      	ldr	r0, [pc, #72]	@ (8000cec <LPUART1_IRQHandler+0xe8>)
 8000ca2:	f000 f825 	bl	8000cf0 <LPUART_Send_ESC_Seq>
	   	  break;
 8000ca6:	e015      	b.n	8000cd4 <LPUART1_IRQHandler+0xd0>
        /* USER : handle other ESCape code cases */
	   default:
	      while( !(LPUART1->ISR & USART_ISR_TXE) )
 8000ca8:	bf00      	nop
 8000caa:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <LPUART1_IRQHandler+0xd8>)
 8000cac:	69db      	ldr	r3, [r3, #28]
 8000cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d0f9      	beq.n	8000caa <LPUART1_IRQHandler+0xa6>
              ;    // wait for empty TX buffer
	      if (echo_enabled) {
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00a      	beq.n	8000cd2 <LPUART1_IRQHandler+0xce>
	          while (!(LPUART1->ISR & USART_ISR_TXE));
 8000cbc:	bf00      	nop
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <LPUART1_IRQHandler+0xd8>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f9      	beq.n	8000cbe <LPUART1_IRQHandler+0xba>
	          LPUART1->TDR = charRecv;  // Echo only if enabled
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <LPUART1_IRQHandler+0xd8>)
 8000ccc:	79ba      	ldrb	r2, [r7, #6]
 8000cce:	b292      	uxth	r2, r2
 8000cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
	      }
		break;
 8000cd2:	bf00      	nop
	}  // end switch
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40008000 	.word	0x40008000
 8000ce0:	08002958 	.word	0x08002958
 8000ce4:	0800295c 	.word	0x0800295c
 8000ce8:	08002960 	.word	0x08002960
 8000cec:	08002964 	.word	0x08002964

08000cf0 <LPUART_Send_ESC_Seq>:


void LPUART_Send_ESC_Seq(const char* sequence) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
   LPUART_Print("\x1B[");  // ESC character followed by [
 8000cf8:	4804      	ldr	r0, [pc, #16]	@ (8000d0c <LPUART_Send_ESC_Seq+0x1c>)
 8000cfa:	f7ff ff5d 	bl	8000bb8 <LPUART_Print>
   LPUART_Print(sequence);
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f7ff ff5a 	bl	8000bb8 <LPUART_Print>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	08002968 	.word	0x08002968

08000d10 <gvalg>:
#include "catalog_bytestream.h"

uint8_t setmode(int nums[], int numsize);

void gvalg(const double cat[][4], const double tab_cat[][3], double **tab_image,
           int *id, double *v2, int n_image, int n_stars_img) {
 8000d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d12:	b099      	sub	sp, #100	@ 0x64
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
 8000d1c:	603b      	str	r3, [r7, #0]


    // ---------------- MEMORY ALLOCATION ----------------
    // allocate k_n - (used in future loops) counts how many
    // catalog pairs have been voted for a specific star in the image
    int *k_n = (int *)calloc(n_stars_img, sizeof(int));
 8000d1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000d22:	2104      	movs	r1, #4
 8000d24:	4618      	mov	r0, r3
 8000d26:	f001 f93f 	bl	8001fa8 <calloc>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	643b      	str	r3, [r7, #64]	@ 0x40

    // allocate v - an array for storing matches for each centroid.
    // Each row v[i] holds a list of voted catalog star IDs
    int **v = (int **)calloc(n_stars_img, sizeof(int *));
 8000d2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000d32:	2104      	movs	r1, #4
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 f937 	bl	8001fa8 <calloc>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    for (int i = 0; i < n_stars_img; i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d42:	e00d      	b.n	8000d60 <gvalg+0x50>
        v[i] = (int *)calloc(512, sizeof(int));  // Enough space for 256 pairs (2 votes per pair)
 8000d44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d4a:	18d4      	adds	r4, r2, r3
 8000d4c:	2104      	movs	r1, #4
 8000d4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d52:	f001 f929 	bl	8001fa8 <calloc>
 8000d56:	4603      	mov	r3, r0
 8000d58:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < n_stars_img; i++) {
 8000d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000d60:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000d66:	429a      	cmp	r2, r3
 8000d68:	dbec      	blt.n	8000d44 <gvalg+0x34>
    }

    // ---------------- FIRST ROUND ----------------
    // Go through all centroids and append star IDs w/ same angle
    for (int i = 0; i < n_image; i++) { // iterate through all centroids
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000d6e:	e127      	b.n	8000fc0 <gvalg+0x2b0>

        // find the starting address of the bin (index the current centroid angle into the bin address LUT)
    	int bin_index = (int)(tab_image[i][2] * 1000); // Or whatever scaling works
 8000d70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	687a      	ldr	r2, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3310      	adds	r3, #16
 8000d7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	4baf      	ldr	r3, [pc, #700]	@ (8001044 <gvalg+0x334>)
 8000d86:	f7ff fc3f 	bl	8000608 <__aeabi_dmul>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f7ff fee9 	bl	8000b68 <__aeabi_d2iz>
 8000d96:	4603      	mov	r3, r0
 8000d98:	61fb      	str	r3, [r7, #28]
    	int bin_addr = bin_angle_to_address_lut[bin_index];
 8000d9a:	4aab      	ldr	r2, [pc, #684]	@ (8001048 <gvalg+0x338>)
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da2:	61bb      	str	r3, [r7, #24]
        // starting index to add a vote to (location of first pair in bin)
        int index_min = (bin_addr + 1);
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	3301      	adds	r3, #1
 8000da8:	617b      	str	r3, [r7, #20]
        // stopping index to add a vote to (location of last pair in bin)
        int index_max = (bin_addr + catalog_bytestream[bin_addr]);
 8000daa:	4aa8      	ldr	r2, [pc, #672]	@ (800104c <gvalg+0x33c>)
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	4413      	add	r3, r2
 8000db8:	613b      	str	r3, [r7, #16]

        for (int j = index_min; j <= index_max; j++) {// iterate through all pairs in bin
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8000dbe:	e0f7      	b.n	8000fb0 <gvalg+0x2a0>

            // in the current container for the centroid i, index into star #1, then go to
            // the next open slots and write the 2 star IDs
            v[(int)tab_image[i][0]][2 * k_n[(int)tab_image[i][0]] + 1] = (int)tab_cat[j][0];
 8000dc0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	4413      	add	r3, r2
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4413      	add	r3, r2
 8000dd0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff febf 	bl	8000b68 <__aeabi_d2iz>
 8000dea:	4603      	mov	r3, r0
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000df0:	4413      	add	r3, r2
 8000df2:	681e      	ldr	r6, [r3, #0]
 8000df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	687a      	ldr	r2, [r7, #4]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e02:	4610      	mov	r0, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	f7ff feaf 	bl	8000b68 <__aeabi_d2iz>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	3304      	adds	r3, #4
 8000e18:	441e      	add	r6, r3
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	4629      	mov	r1, r5
 8000e1e:	f7ff fea3 	bl	8000b68 <__aeabi_d2iz>
 8000e22:	4603      	mov	r3, r0
 8000e24:	6033      	str	r3, [r6, #0]
            v[(int)tab_image[i][0]][2 * k_n[(int)tab_image[i][0]] + 2] = (int)tab_cat[j][1];
 8000e26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000e28:	4613      	mov	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	4413      	add	r3, r2
 8000e2e:	00db      	lsls	r3, r3, #3
 8000e30:	461a      	mov	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	4413      	add	r3, r2
 8000e36:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000e3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fe8c 	bl	8000b68 <__aeabi_d2iz>
 8000e50:	4603      	mov	r3, r0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000e56:	4413      	add	r3, r2
 8000e58:	681e      	ldr	r6, [r3, #0]
 8000e5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f7ff fe7c 	bl	8000b68 <__aeabi_d2iz>
 8000e70:	4603      	mov	r3, r0
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e76:	4413      	add	r3, r2
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	00db      	lsls	r3, r3, #3
 8000e7e:	441e      	add	r6, r3
 8000e80:	4620      	mov	r0, r4
 8000e82:	4629      	mov	r1, r5
 8000e84:	f7ff fe70 	bl	8000b68 <__aeabi_d2iz>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	6033      	str	r3, [r6, #0]
            k_n[(int)tab_image[i][0]]++;
 8000e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fe63 	bl	8000b68 <__aeabi_d2iz>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000ea8:	4413      	add	r3, r2
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	3201      	adds	r2, #1
 8000eae:	601a      	str	r2, [r3, #0]
            // in the same container, index into star #2, then go to the next open slots and
            // write the 2 star IDs
            v[(int)tab_image[i][1]][2 * k_n[(int)tab_image[i][1]] + 1] = (int)tab_cat[j][0];
 8000eb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000ec4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	4413      	add	r3, r2
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	3308      	adds	r3, #8
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f7ff fe46 	bl	8000b68 <__aeabi_d2iz>
 8000edc:	4603      	mov	r3, r0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ee2:	4413      	add	r3, r2
 8000ee4:	681e      	ldr	r6, [r3, #0]
 8000ee6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	3308      	adds	r3, #8
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fe35 	bl	8000b68 <__aeabi_d2iz>
 8000efe:	4603      	mov	r3, r0
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f04:	4413      	add	r3, r2
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	00db      	lsls	r3, r3, #3
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	441e      	add	r6, r3
 8000f0e:	4620      	mov	r0, r4
 8000f10:	4629      	mov	r1, r5
 8000f12:	f7ff fe29 	bl	8000b68 <__aeabi_d2iz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	6033      	str	r3, [r6, #0]
            v[(int)tab_image[i][1]][2 * k_n[(int)tab_image[i][1]] + 2] = (int)tab_cat[j][1];
 8000f1a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	461a      	mov	r2, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	4413      	add	r3, r2
 8000f2a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8000f2e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3308      	adds	r3, #8
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fe11 	bl	8000b68 <__aeabi_d2iz>
 8000f46:	4603      	mov	r3, r0
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000f4c:	4413      	add	r3, r2
 8000f4e:	681e      	ldr	r6, [r3, #0]
 8000f50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fe00 	bl	8000b68 <__aeabi_d2iz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000f6e:	4413      	add	r3, r2
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	3301      	adds	r3, #1
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	441e      	add	r6, r3
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f7ff fdf4 	bl	8000b68 <__aeabi_d2iz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	6033      	str	r3, [r6, #0]
            k_n[(int)tab_image[i][1]]++;
 8000f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3308      	adds	r3, #8
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	4610      	mov	r0, r2
 8000f96:	4619      	mov	r1, r3
 8000f98:	f7ff fde6 	bl	8000b68 <__aeabi_d2iz>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	3201      	adds	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
        for (int j = index_min; j <= index_max; j++) {// iterate through all pairs in bin
 8000faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000fac:	3301      	adds	r3, #1
 8000fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8000fb0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f77f af03 	ble.w	8000dc0 <gvalg+0xb0>
    for (int i = 0; i < n_image; i++) { // iterate through all centroids
 8000fba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000fc0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000fc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f6ff aed3 	blt.w	8000d70 <gvalg+0x60>
        }
    }

    // -*-*-----*-*- count votes -*-*------*-*-
    for (int i = 0; i < n_stars_img; i++) {
 8000fca:	2300      	movs	r3, #0
 8000fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8000fce:	e031      	b.n	8001034 <gvalg+0x324>
        int first_zero = 0;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        // Count how many votes were cast (find the first zero as end marker)
        while (v[i][first_zero] != 0) {
 8000fd4:	e002      	b.n	8000fdc <gvalg+0x2cc>
            first_zero++;
 8000fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fd8:	3301      	adds	r3, #1
 8000fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while (v[i][first_zero] != 0) {
 8000fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000fe2:	4413      	add	r3, r2
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	4413      	add	r3, r2
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f1      	bne.n	8000fd6 <gvalg+0x2c6>
        }

        // Choose the most frequent catalog ID as the identified star
        id[i] = setmode(v[i], first_zero);
 8000ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ff8:	4413      	add	r3, r2
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 f944 	bl	800128c <setmode>
 8001004:	4603      	mov	r3, r0
 8001006:	4619      	mov	r1, r3
 8001008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	683a      	ldr	r2, [r7, #0]
 800100e:	4413      	add	r3, r2
 8001010:	460a      	mov	r2, r1
 8001012:	601a      	str	r2, [r3, #0]

        // Fallback in case of invalid match
        if (id[i] < 0) id[i] = 0;
 8001014:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	4413      	add	r3, r2
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	da05      	bge.n	800102e <gvalg+0x31e>
 8001022:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4413      	add	r3, r2
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < n_stars_img; i++) {
 800102e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001030:	3301      	adds	r3, #1
 8001032:	653b      	str	r3, [r7, #80]	@ 0x50
 8001034:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001036:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800103a:	429a      	cmp	r2, r3
 800103c:	dbc8      	blt.n	8000fd0 <gvalg+0x2c0>
    }

    // ---------------- SECOND ROUND ----------------
    // Now that stars have been matched, calculate real pairwise
    // angles from catalog to confirm that matches are correct.
    for (int i = 0; i < n_image; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001042:	e0fe      	b.n	8001242 <gvalg+0x532>
 8001044:	408f4000 	.word	0x408f4000
 8001048:	0800a230 	.word	0x0800a230
 800104c:	080029b8 	.word	0x080029b8
    	if (tab_image[i][0] >= 0 && tab_image[i][1] >= 0) {
 8001050:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4413      	add	r3, r2
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	f7ff fd55 	bl	8000b14 <__aeabi_dcmpge>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80e5 	beq.w	800123c <gvalg+0x52c>
 8001072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3308      	adds	r3, #8
 800107e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	f7ff fd43 	bl	8000b14 <__aeabi_dcmpge>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	f000 80d3 	beq.w	800123c <gvalg+0x52c>
            int a = id[(int)tab_image[i][0]];
 8001096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f7ff fd5e 	bl	8000b68 <__aeabi_d2iz>
 80010ac:	4603      	mov	r3, r0
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	63bb      	str	r3, [r7, #56]	@ 0x38
            int b = id[(int)tab_image[i][1]];
 80010b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3308      	adds	r3, #8
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd4c 	bl	8000b68 <__aeabi_d2iz>
 80010d0:	4603      	mov	r3, r0
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	637b      	str	r3, [r7, #52]	@ 0x34

            // Check that both centroids were successfully ID'd
            if (a != 0 && b != 0) {
 80010dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 80ac 	beq.w	800123c <gvalg+0x52c>
 80010e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 80a8 	beq.w	800123c <gvalg+0x52c>
                // Calculate catalog angle between identified stars
                double d_cat = acos(cat[a][1] * cat[b][1] +
 80010ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010fa:	015b      	lsls	r3, r3, #5
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001104:	f7ff fa80 	bl	8000608 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4614      	mov	r4, r2
 800110e:	461d      	mov	r5, r3
                                    cat[a][2] * cat[b][2] +
 8001110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001112:	015b      	lsls	r3, r3, #5
 8001114:	68fa      	ldr	r2, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800111c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800111e:	015b      	lsls	r3, r3, #5
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001128:	f7ff fa6e 	bl	8000608 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
                double d_cat = acos(cat[a][1] * cat[b][1] +
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff f8b2 	bl	800029c <__adddf3>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4614      	mov	r4, r2
 800113e:	461d      	mov	r5, r3
                                    cat[a][3] * cat[b][3]);
 8001140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001142:	015b      	lsls	r3, r3, #5
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800114c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114e:	015b      	lsls	r3, r3, #5
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001158:	f7ff fa56 	bl	8000608 <__aeabi_dmul>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
                double d_cat = acos(cat[a][1] * cat[b][1] +
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff f89a 	bl	800029c <__adddf3>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	ec43 2b17 	vmov	d7, r2, r3
 8001170:	eeb0 0a47 	vmov.f32	s0, s14
 8001174:	eef0 0a67 	vmov.f32	s1, s15
 8001178:	f000 fb9e 	bl	80018b8 <acos>
 800117c:	ed87 0b0a 	vstr	d0, [r7, #40]	@ 0x28

                double d_image = tab_image[i][2];
 8001180:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	4413      	add	r3, r2
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800118e:	e9c7 2308 	strd	r2, r3, [r7, #32]

                // If the real catalog angle is close to the image angle, increase confidence score
                if (d_image - 1 < d_cat && d_cat < d_image + 1) {
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b3c      	ldr	r3, [pc, #240]	@ (8001288 <gvalg+0x578>)
 8001198:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800119c:	f7ff f87c 	bl	8000298 <__aeabi_dsub>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011a8:	f7ff fcbe 	bl	8000b28 <__aeabi_dcmpgt>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d044      	beq.n	800123c <gvalg+0x52c>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4b34      	ldr	r3, [pc, #208]	@ (8001288 <gvalg+0x578>)
 80011b8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011bc:	f7ff f86e 	bl	800029c <__adddf3>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80011c8:	f7ff fc90 	bl	8000aec <__aeabi_dcmplt>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d034      	beq.n	800123c <gvalg+0x52c>
                    v2[(int)tab_image[i][0]]++;
 80011d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	4413      	add	r3, r2
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fcc0 	bl	8000b68 <__aeabi_d2iz>
 80011e8:	4603      	mov	r3, r0
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80011ee:	18d4      	adds	r4, r2, r3
 80011f0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <gvalg+0x578>)
 80011fa:	f7ff f84f 	bl	800029c <__adddf3>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	e9c4 2300 	strd	r2, r3, [r4]
                    v2[(int)tab_image[i][1]]++;
 8001206:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3308      	adds	r3, #8
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	4610      	mov	r0, r2
 8001218:	4619      	mov	r1, r3
 800121a:	f7ff fca5 	bl	8000b68 <__aeabi_d2iz>
 800121e:	4603      	mov	r3, r0
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8001224:	18d4      	adds	r4, r2, r3
 8001226:	e9d4 0100 	ldrd	r0, r1, [r4]
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <gvalg+0x578>)
 8001230:	f7ff f834 	bl	800029c <__adddf3>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < n_image; i++) {
 800123c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800123e:	3301      	adds	r3, #1
 8001240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001242:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001246:	429a      	cmp	r2, r3
 8001248:	f6ff af02 	blt.w	8001050 <gvalg+0x340>
            }
        }
    }

    // --- Free dynamically allocated memory ---
    free(k_n);
 800124c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800124e:	f000 fecf 	bl	8001ff0 <free>
    for (int i = 0; i < n_stars_img; i++)
 8001252:	2300      	movs	r3, #0
 8001254:	647b      	str	r3, [r7, #68]	@ 0x44
 8001256:	e00a      	b.n	800126e <gvalg+0x55e>
    {
        free(v[i]);
 8001258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800125e:	4413      	add	r3, r2
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fec4 	bl	8001ff0 <free>
    for (int i = 0; i < n_stars_img; i++)
 8001268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800126a:	3301      	adds	r3, #1
 800126c:	647b      	str	r3, [r7, #68]	@ 0x44
 800126e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001270:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001274:	429a      	cmp	r2, r3
 8001276:	dbef      	blt.n	8001258 <gvalg+0x548>
    }
    free(v);
 8001278:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800127a:	f000 feb9 	bl	8001ff0 <free>
}
 800127e:	bf00      	nop
 8001280:	3764      	adds	r7, #100	@ 0x64
 8001282:	46bd      	mov	sp, r7
 8001284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001286:	bf00      	nop
 8001288:	3ff00000 	.word	0x3ff00000

0800128c <setmode>:

uint8_t setmode(int nums[], int numsize){
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	@ 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	int mode = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	61fb      	str	r3, [r7, #28]
    int counting = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
    int maxcount = 0;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < numsize; i++) {
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	e029      	b.n	80012fc <setmode+0x70>
        for (int x = 0; x < numsize; x++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	e011      	b.n	80012d2 <setmode+0x46>
            if (nums[i] == nums[x]) {
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	6879      	ldr	r1, [r7, #4]
 80012be:	440b      	add	r3, r1
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d102      	bne.n	80012cc <setmode+0x40>
                counting++;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	3301      	adds	r3, #1
 80012ca:	61bb      	str	r3, [r7, #24]
        for (int x = 0; x < numsize; x++) {
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	3301      	adds	r3, #1
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	dbe9      	blt.n	80012ae <setmode+0x22>
            }
        }
        if (counting > maxcount) {
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dd07      	ble.n	80012f2 <setmode+0x66>
            mode = nums[i];
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	61fb      	str	r3, [r7, #28]
            maxcount = counting;
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	617b      	str	r3, [r7, #20]
        }
        counting = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < numsize; i++) {
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	3301      	adds	r3, #1
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbd1      	blt.n	80012a8 <setmode+0x1c>
    }
    return mode;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	b2db      	uxtb	r3, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	3724      	adds	r7, #36	@ 0x24
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	0000      	movs	r0, r0
	...

08001318 <main>:

void SystemClock_Config(void);
double **allocate_matrix(int rows, int cols);
void free_matrix(double **mat, int rows);

int main(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b0b8      	sub	sp, #224	@ 0xe0
 800131c:	af04      	add	r7, sp, #16
	//	{0.47423032, 0.11979696, 0.87221230},  // CENT 3 (HIP 8)
	//	{0.38942390, 0.21230918, 0.89625545},  // CENT 4 (HIP 13)
	//	{0.63385529, 0.38047728, 0.67339773},  // CENT 5 (HIP 16)
	// };
	// Image pair angle table [indexA, indexB, angle]
	int n_image = 10;
 800131e:	230a      	movs	r3, #10
 8001320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	double **tab_image = allocate_matrix(n_image, 3);
 8001324:	2103      	movs	r1, #3
 8001326:	f8d7 00c8 	ldr.w	r0, [r7, #200]	@ 0xc8
 800132a:	f000 f9cd 	bl	80016c8 <allocate_matrix>
 800132e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
	tab_image[0][0] = 0; tab_image[0][1] = 1; tab_image[0][2] = 0.085803;
 8001332:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001336:	6819      	ldr	r1, [r3, #0]
 8001338:	f04f 0200 	mov.w	r2, #0
 800133c:	f04f 0300 	mov.w	r3, #0
 8001340:	e9c1 2300 	strd	r2, r3, [r1]
 8001344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f103 0108 	add.w	r1, r3, #8
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4bb5      	ldr	r3, [pc, #724]	@ (8001628 <main+0x310>)
 8001354:	e9c1 2300 	strd	r2, r3, [r1]
 8001358:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f103 0110 	add.w	r1, r3, #16
 8001362:	a39d      	add	r3, pc, #628	@ (adr r3, 80015d8 <main+0x2c0>)
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[1][0] = 0; tab_image[1][1] = 2; tab_image[1][2] = 0.107295;
 800136c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001370:	3304      	adds	r3, #4
 8001372:	6819      	ldr	r1, [r3, #0]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c1 2300 	strd	r2, r3, [r1]
 8001380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001384:	3304      	adds	r3, #4
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f103 0108 	add.w	r1, r3, #8
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001394:	e9c1 2300 	strd	r2, r3, [r1]
 8001398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800139c:	3304      	adds	r3, #4
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f103 0110 	add.w	r1, r3, #16
 80013a4:	a38e      	add	r3, pc, #568	@ (adr r3, 80015e0 <main+0x2c8>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[2][0] = 0; tab_image[2][1] = 3; tab_image[2][2] = 0.231449;
 80013ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80013b2:	3308      	adds	r3, #8
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	e9c1 2300 	strd	r2, r3, [r1]
 80013c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80013c6:	3308      	adds	r3, #8
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f103 0108 	add.w	r1, r3, #8
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	4b96      	ldr	r3, [pc, #600]	@ (800162c <main+0x314>)
 80013d4:	e9c1 2300 	strd	r2, r3, [r1]
 80013d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80013dc:	3308      	adds	r3, #8
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f103 0110 	add.w	r1, r3, #16
 80013e4:	a380      	add	r3, pc, #512	@ (adr r3, 80015e8 <main+0x2d0>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[3][0] = 0; tab_image[3][1] = 4; tab_image[3][2] = 0.425824;
 80013ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80013f2:	330c      	adds	r3, #12
 80013f4:	6819      	ldr	r1, [r3, #0]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9c1 2300 	strd	r2, r3, [r1]
 8001402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001406:	330c      	adds	r3, #12
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f103 0108 	add.w	r1, r3, #8
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	4b87      	ldr	r3, [pc, #540]	@ (8001630 <main+0x318>)
 8001414:	e9c1 2300 	strd	r2, r3, [r1]
 8001418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800141c:	330c      	adds	r3, #12
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f103 0110 	add.w	r1, r3, #16
 8001424:	a372      	add	r3, pc, #456	@ (adr r3, 80015f0 <main+0x2d8>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[4][0] = 1; tab_image[4][1] = 2; tab_image[4][2] = 0.081666;
 800142e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001432:	3310      	adds	r3, #16
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b7b      	ldr	r3, [pc, #492]	@ (8001628 <main+0x310>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]
 8001440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001444:	3310      	adds	r3, #16
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f103 0108 	add.w	r1, r3, #8
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001454:	e9c1 2300 	strd	r2, r3, [r1]
 8001458:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800145c:	3310      	adds	r3, #16
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f103 0110 	add.w	r1, r3, #16
 8001464:	a364      	add	r3, pc, #400	@ (adr r3, 80015f8 <main+0x2e0>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[5][0] = 1; tab_image[5][1] = 3; tab_image[5][2] = 0.202032;
 800146e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001472:	3314      	adds	r3, #20
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	4b6b      	ldr	r3, [pc, #428]	@ (8001628 <main+0x310>)
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
 8001480:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001484:	3314      	adds	r3, #20
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f103 0108 	add.w	r1, r3, #8
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	4b66      	ldr	r3, [pc, #408]	@ (800162c <main+0x314>)
 8001492:	e9c1 2300 	strd	r2, r3, [r1]
 8001496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800149a:	3314      	adds	r3, #20
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f103 0110 	add.w	r1, r3, #16
 80014a2:	a357      	add	r3, pc, #348	@ (adr r3, 8001600 <main+0x2e8>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[6][0] = 1; tab_image[6][1] = 4; tab_image[6][2] = 0.375124;
 80014ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80014b0:	3318      	adds	r3, #24
 80014b2:	6819      	ldr	r1, [r3, #0]
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001628 <main+0x310>)
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
 80014be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80014c2:	3318      	adds	r3, #24
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f103 0108 	add.w	r1, r3, #8
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b58      	ldr	r3, [pc, #352]	@ (8001630 <main+0x318>)
 80014d0:	e9c1 2300 	strd	r2, r3, [r1]
 80014d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80014d8:	3318      	adds	r3, #24
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f103 0110 	add.w	r1, r3, #16
 80014e0:	a349      	add	r3, pc, #292	@ (adr r3, 8001608 <main+0x2f0>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[7][0] = 2; tab_image[7][1] = 3; tab_image[7][2] = 0.127871;
 80014ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80014ee:	331c      	adds	r3, #28
 80014f0:	6819      	ldr	r1, [r3, #0]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014fa:	e9c1 2300 	strd	r2, r3, [r1]
 80014fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001502:	331c      	adds	r3, #28
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f103 0108 	add.w	r1, r3, #8
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	4b47      	ldr	r3, [pc, #284]	@ (800162c <main+0x314>)
 8001510:	e9c1 2300 	strd	r2, r3, [r1]
 8001514:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001518:	331c      	adds	r3, #28
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f103 0110 	add.w	r1, r3, #16
 8001520:	a33b      	add	r3, pc, #236	@ (adr r3, 8001610 <main+0x2f8>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[8][0] = 2; tab_image[8][1] = 4; tab_image[8][2] = 0.340091;
 800152a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800152e:	3320      	adds	r3, #32
 8001530:	6819      	ldr	r1, [r3, #0]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800153a:	e9c1 2300 	strd	r2, r3, [r1]
 800153e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001542:	3320      	adds	r3, #32
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f103 0108 	add.w	r1, r3, #8
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	4b38      	ldr	r3, [pc, #224]	@ (8001630 <main+0x318>)
 8001550:	e9c1 2300 	strd	r2, r3, [r1]
 8001554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001558:	3320      	adds	r3, #32
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f103 0110 	add.w	r1, r3, #16
 8001560:	a32d      	add	r3, pc, #180	@ (adr r3, 8001618 <main+0x300>)
 8001562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001566:	e9c1 2300 	strd	r2, r3, [r1]
	tab_image[9][0] = 3; tab_image[9][1] = 4; tab_image[9][2] = 0.373232;
 800156a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800156e:	3324      	adds	r3, #36	@ 0x24
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <main+0x314>)
 8001578:	e9c1 2300 	strd	r2, r3, [r1]
 800157c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001580:	3324      	adds	r3, #36	@ 0x24
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f103 0108 	add.w	r1, r3, #8
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	4b28      	ldr	r3, [pc, #160]	@ (8001630 <main+0x318>)
 800158e:	e9c1 2300 	strd	r2, r3, [r1]
 8001592:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001596:	3324      	adds	r3, #36	@ 0x24
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f103 0110 	add.w	r1, r3, #16
 800159e:	a320      	add	r3, pc, #128	@ (adr r3, 8001620 <main+0x308>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	e9c1 2300 	strd	r2, r3, [r1]
    // Output buffers
    int id[n_stars_img];
    double v2[n_stars_img];

    // Call algorithm
    gvalg(cat, tab_cat, tab_image, id, v2, n_image, n_stars_img);
 80015a8:	f107 02ac 	add.w	r2, r7, #172	@ 0xac
 80015ac:	2305      	movs	r3, #5
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4613      	mov	r3, r2
 80015be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80015c2:	491c      	ldr	r1, [pc, #112]	@ (8001634 <main+0x31c>)
 80015c4:	481c      	ldr	r0, [pc, #112]	@ (8001638 <main+0x320>)
 80015c6:	f7ff fba3 	bl	8000d10 <gvalg>

    // Print output
    LPUART_Print("ID assignments:\n");
 80015ca:	481c      	ldr	r0, [pc, #112]	@ (800163c <main+0x324>)
 80015cc:	f7ff faf4 	bl	8000bb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80015d6:	e063      	b.n	80016a0 <main+0x388>
 80015d8:	76e6106b 	.word	0x76e6106b
 80015dc:	3fb5f72f 	.word	0x3fb5f72f
 80015e0:	640639d6 	.word	0x640639d6
 80015e4:	3fbb77af 	.word	0x3fbb77af
 80015e8:	eed8904f 	.word	0xeed8904f
 80015ec:	3fcda01e 	.word	0x3fcda01e
 80015f0:	4e768598 	.word	0x4e768598
 80015f4:	3fdb40b3 	.word	0x3fdb40b3
 80015f8:	1f31f46f 	.word	0x1f31f46f
 80015fc:	3fb4e810 	.word	0x3fb4e810
 8001600:	405f6ba0 	.word	0x405f6ba0
 8001604:	3fc9dc2f 	.word	0x3fc9dc2f
 8001608:	17fc7608 	.word	0x17fc7608
 800160c:	3fd80208 	.word	0x3fd80208
 8001610:	b18dac26 	.word	0xb18dac26
 8001614:	3fc05e13 	.word	0x3fc05e13
 8001618:	0aaa7ded 	.word	0x0aaa7ded
 800161c:	3fd5c40d 	.word	0x3fd5c40d
 8001620:	787485e4 	.word	0x787485e4
 8001624:	3fd7e308 	.word	0x3fd7e308
 8001628:	3ff00000 	.word	0x3ff00000
 800162c:	40080000 	.word	0x40080000
 8001630:	40100000 	.word	0x40100000
 8001634:	0800c8c0 	.word	0x0800c8c0
 8001638:	0800a8c0 	.word	0x0800a8c0
 800163c:	0800296c 	.word	0x0800296c
        char buffer[128];
        int v2_rounded = (int)(v2[i] + 0.5);  // manual round instead of %.0f
 8001640:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	33d0      	adds	r3, #208	@ 0xd0
 8001648:	443b      	add	r3, r7
 800164a:	3b50      	subs	r3, #80	@ 0x50
 800164c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <main+0x3a8>)
 8001656:	f7fe fe21 	bl	800029c <__adddf3>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f7ff fa81 	bl	8000b68 <__aeabi_d2iz>
 8001666:	4603      	mov	r3, r0
 8001668:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        sprintf(buffer, "Image Star %d → Catalog HIP ID %d, verified %d times\n", i, id[i], v2_rounded);
 800166c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	33d0      	adds	r3, #208	@ 0xd0
 8001674:	443b      	add	r3, r7
 8001676:	f853 2c24 	ldr.w	r2, [r3, #-36]
 800167a:	4638      	mov	r0, r7
 800167c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4613      	mov	r3, r2
 8001684:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001688:	490e      	ldr	r1, [pc, #56]	@ (80016c4 <main+0x3ac>)
 800168a:	f000 fd67 	bl	800215c <siprintf>
        LPUART_Print(buffer);
 800168e:	463b      	mov	r3, r7
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fa91 	bl	8000bb8 <LPUART_Print>
    for (int i = 0; i < n_stars_img; i++) {
 8001696:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800169a:	3301      	adds	r3, #1
 800169c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80016a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80016a4:	2b04      	cmp	r3, #4
 80016a6:	ddcb      	ble.n	8001640 <main+0x328>
    	}

    // Cleanup
    free_matrix(tab_image, n_image);
 80016a8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 80016ac:	f8d7 00c4 	ldr.w	r0, [r7, #196]	@ 0xc4
 80016b0:	f000 f82f 	bl	8001712 <free_matrix>
    return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	37d0      	adds	r7, #208	@ 0xd0
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	3fe00000 	.word	0x3fe00000
 80016c4:	08002980 	.word	0x08002980

080016c8 <allocate_matrix>:
    HAL_RCCEx_EnableMSIPLLMode();
}

// ------------- HELPER FUNCTIONS: -------------
// ---- allocate_matrix() ----
double **allocate_matrix(int rows, int cols) {
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    double **mat = (double **)malloc(rows * sizeof(double *));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fc82 	bl	8001fe0 <malloc>
 80016dc:	4603      	mov	r3, r0
 80016de:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < rows; i++) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e00c      	b.n	8001700 <allocate_matrix+0x38>
        mat[i] = (double *)calloc(cols, sizeof(double));
 80016e6:	6838      	ldr	r0, [r7, #0]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	18d4      	adds	r4, r2, r3
 80016f0:	2108      	movs	r1, #8
 80016f2:	f000 fc59 	bl	8001fa8 <calloc>
 80016f6:	4603      	mov	r3, r0
 80016f8:	6023      	str	r3, [r4, #0]
    for (int i = 0; i < rows; i++) {
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	429a      	cmp	r2, r3
 8001706:	dbee      	blt.n	80016e6 <allocate_matrix+0x1e>
    }
    return mat;
 8001708:	68bb      	ldr	r3, [r7, #8]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}

08001712 <free_matrix>:
// ---- free_matrix() ----
void free_matrix(double **mat, int rows) {
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < rows; i++) {
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	e00a      	b.n	8001738 <free_matrix+0x26>
        free(mat[i]);
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fc5f 	bl	8001ff0 <free>
    for (int i = 0; i < rows; i++) {
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3301      	adds	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <free_matrix+0x10>
    }
    free(mat);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fc55 	bl	8001ff0 <free>
}
 8001746:	bf00      	nop
 8001748:	3710      	adds	r7, #16
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001752:	bf00      	nop
 8001754:	e7fd      	b.n	8001752 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	bf00      	nop
 800175c:	e7fd      	b.n	800175a <HardFault_Handler+0x4>

0800175e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001762:	bf00      	nop
 8001764:	e7fd      	b.n	8001762 <MemManage_Handler+0x4>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800176a:	bf00      	nop
 800176c:	e7fd      	b.n	800176a <BusFault_Handler+0x4>

0800176e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001772:	bf00      	nop
 8001774:	e7fd      	b.n	8001772 <UsageFault_Handler+0x4>

08001776 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001776:	b480      	push	{r7}
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017a4:	f000 f874 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	@ (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	@ (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f000 fcf8 	bl	80021d0 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20050000 	.word	0x20050000
 800180c:	00000400 	.word	0x00000400
 8001810:	20000070 	.word	0x20000070
 8001814:	200001c0 	.word	0x200001c0

08001818 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001874 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	@ (8001878 <LoopForever+0x6>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	@ (800187c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <LoopForever+0xe>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	@ (8001884 <LoopForever+0x12>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	@ (8001888 <LoopForever+0x16>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f000 fcb7 	bl	80021dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800186e:	f7ff fd53 	bl	8001318 <main>

08001872 <LoopForever>:

LoopForever:
    b LoopForever
 8001872:	e7fe      	b.n	8001872 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001874:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001880:	08064740 	.word	0x08064740
  ldr r2, =_sbss
 8001884:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001888:	200001c0 	.word	0x200001c0

0800188c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC1_2_IRQHandler>
	...

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	@ (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000
 80018b4:	20000074 	.word	0x20000074

080018b8 <acos>:
 80018b8:	b538      	push	{r3, r4, r5, lr}
 80018ba:	ed2d 8b02 	vpush	{d8}
 80018be:	ec55 4b10 	vmov	r4, r5, d0
 80018c2:	f000 f82d 	bl	8001920 <__ieee754_acos>
 80018c6:	4622      	mov	r2, r4
 80018c8:	462b      	mov	r3, r5
 80018ca:	4620      	mov	r0, r4
 80018cc:	4629      	mov	r1, r5
 80018ce:	eeb0 8a40 	vmov.f32	s16, s0
 80018d2:	eef0 8a60 	vmov.f32	s17, s1
 80018d6:	f7ff f931 	bl	8000b3c <__aeabi_dcmpun>
 80018da:	b9a8      	cbnz	r0, 8001908 <acos+0x50>
 80018dc:	ec45 4b10 	vmov	d0, r4, r5
 80018e0:	f000 fa7a 	bl	8001dd8 <fabs>
 80018e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001918 <acos+0x60>)
 80018e6:	ec51 0b10 	vmov	r0, r1, d0
 80018ea:	2200      	movs	r2, #0
 80018ec:	f7ff f91c 	bl	8000b28 <__aeabi_dcmpgt>
 80018f0:	b150      	cbz	r0, 8001908 <acos+0x50>
 80018f2:	f000 fc6d 	bl	80021d0 <__errno>
 80018f6:	ecbd 8b02 	vpop	{d8}
 80018fa:	2321      	movs	r3, #33	@ 0x21
 80018fc:	6003      	str	r3, [r0, #0]
 80018fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001902:	4806      	ldr	r0, [pc, #24]	@ (800191c <acos+0x64>)
 8001904:	f000 bb48 	b.w	8001f98 <nan>
 8001908:	eeb0 0a48 	vmov.f32	s0, s16
 800190c:	eef0 0a68 	vmov.f32	s1, s17
 8001910:	ecbd 8b02 	vpop	{d8}
 8001914:	bd38      	pop	{r3, r4, r5, pc}
 8001916:	bf00      	nop
 8001918:	3ff00000 	.word	0x3ff00000
 800191c:	080646ed 	.word	0x080646ed

08001920 <__ieee754_acos>:
 8001920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001924:	ec55 4b10 	vmov	r4, r5, d0
 8001928:	49b7      	ldr	r1, [pc, #732]	@ (8001c08 <__ieee754_acos+0x2e8>)
 800192a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800192e:	428b      	cmp	r3, r1
 8001930:	d919      	bls.n	8001966 <__ieee754_acos+0x46>
 8001932:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8001936:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800193a:	4323      	orrs	r3, r4
 800193c:	d106      	bne.n	800194c <__ieee754_acos+0x2c>
 800193e:	2d00      	cmp	r5, #0
 8001940:	f340 8210 	ble.w	8001d64 <__ieee754_acos+0x444>
 8001944:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8001b98 <__ieee754_acos+0x278>
 8001948:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194c:	4622      	mov	r2, r4
 800194e:	462b      	mov	r3, r5
 8001950:	4620      	mov	r0, r4
 8001952:	4629      	mov	r1, r5
 8001954:	f7fe fca0 	bl	8000298 <__aeabi_dsub>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	f7fe ff7e 	bl	800085c <__aeabi_ddiv>
 8001960:	ec41 0b10 	vmov	d0, r0, r1
 8001964:	e7f0      	b.n	8001948 <__ieee754_acos+0x28>
 8001966:	49a9      	ldr	r1, [pc, #676]	@ (8001c0c <__ieee754_acos+0x2ec>)
 8001968:	428b      	cmp	r3, r1
 800196a:	f200 8085 	bhi.w	8001a78 <__ieee754_acos+0x158>
 800196e:	4aa8      	ldr	r2, [pc, #672]	@ (8001c10 <__ieee754_acos+0x2f0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	f240 81fa 	bls.w	8001d6a <__ieee754_acos+0x44a>
 8001976:	4622      	mov	r2, r4
 8001978:	462b      	mov	r3, r5
 800197a:	4620      	mov	r0, r4
 800197c:	4629      	mov	r1, r5
 800197e:	f7fe fe43 	bl	8000608 <__aeabi_dmul>
 8001982:	a387      	add	r3, pc, #540	@ (adr r3, 8001ba0 <__ieee754_acos+0x280>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	4606      	mov	r6, r0
 800198a:	460f      	mov	r7, r1
 800198c:	f7fe fe3c 	bl	8000608 <__aeabi_dmul>
 8001990:	a385      	add	r3, pc, #532	@ (adr r3, 8001ba8 <__ieee754_acos+0x288>)
 8001992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001996:	f7fe fc81 	bl	800029c <__adddf3>
 800199a:	4632      	mov	r2, r6
 800199c:	463b      	mov	r3, r7
 800199e:	f7fe fe33 	bl	8000608 <__aeabi_dmul>
 80019a2:	a383      	add	r3, pc, #524	@ (adr r3, 8001bb0 <__ieee754_acos+0x290>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fc76 	bl	8000298 <__aeabi_dsub>
 80019ac:	4632      	mov	r2, r6
 80019ae:	463b      	mov	r3, r7
 80019b0:	f7fe fe2a 	bl	8000608 <__aeabi_dmul>
 80019b4:	a380      	add	r3, pc, #512	@ (adr r3, 8001bb8 <__ieee754_acos+0x298>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fc6f 	bl	800029c <__adddf3>
 80019be:	4632      	mov	r2, r6
 80019c0:	463b      	mov	r3, r7
 80019c2:	f7fe fe21 	bl	8000608 <__aeabi_dmul>
 80019c6:	a37e      	add	r3, pc, #504	@ (adr r3, 8001bc0 <__ieee754_acos+0x2a0>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fc64 	bl	8000298 <__aeabi_dsub>
 80019d0:	4632      	mov	r2, r6
 80019d2:	463b      	mov	r3, r7
 80019d4:	f7fe fe18 	bl	8000608 <__aeabi_dmul>
 80019d8:	a37b      	add	r3, pc, #492	@ (adr r3, 8001bc8 <__ieee754_acos+0x2a8>)
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f7fe fc5d 	bl	800029c <__adddf3>
 80019e2:	4632      	mov	r2, r6
 80019e4:	463b      	mov	r3, r7
 80019e6:	f7fe fe0f 	bl	8000608 <__aeabi_dmul>
 80019ea:	a379      	add	r3, pc, #484	@ (adr r3, 8001bd0 <__ieee754_acos+0x2b0>)
 80019ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f0:	4680      	mov	r8, r0
 80019f2:	4689      	mov	r9, r1
 80019f4:	4630      	mov	r0, r6
 80019f6:	4639      	mov	r1, r7
 80019f8:	f7fe fe06 	bl	8000608 <__aeabi_dmul>
 80019fc:	a376      	add	r3, pc, #472	@ (adr r3, 8001bd8 <__ieee754_acos+0x2b8>)
 80019fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a02:	f7fe fc49 	bl	8000298 <__aeabi_dsub>
 8001a06:	4632      	mov	r2, r6
 8001a08:	463b      	mov	r3, r7
 8001a0a:	f7fe fdfd 	bl	8000608 <__aeabi_dmul>
 8001a0e:	a374      	add	r3, pc, #464	@ (adr r3, 8001be0 <__ieee754_acos+0x2c0>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fc42 	bl	800029c <__adddf3>
 8001a18:	4632      	mov	r2, r6
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	f7fe fdf4 	bl	8000608 <__aeabi_dmul>
 8001a20:	a371      	add	r3, pc, #452	@ (adr r3, 8001be8 <__ieee754_acos+0x2c8>)
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f7fe fc37 	bl	8000298 <__aeabi_dsub>
 8001a2a:	4632      	mov	r2, r6
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	f7fe fdeb 	bl	8000608 <__aeabi_dmul>
 8001a32:	4b78      	ldr	r3, [pc, #480]	@ (8001c14 <__ieee754_acos+0x2f4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	f7fe fc31 	bl	800029c <__adddf3>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4640      	mov	r0, r8
 8001a40:	4649      	mov	r1, r9
 8001a42:	f7fe ff0b 	bl	800085c <__aeabi_ddiv>
 8001a46:	4622      	mov	r2, r4
 8001a48:	462b      	mov	r3, r5
 8001a4a:	f7fe fddd 	bl	8000608 <__aeabi_dmul>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	460b      	mov	r3, r1
 8001a52:	a167      	add	r1, pc, #412	@ (adr r1, 8001bf0 <__ieee754_acos+0x2d0>)
 8001a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a58:	f7fe fc1e 	bl	8000298 <__aeabi_dsub>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fc18 	bl	8000298 <__aeabi_dsub>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	a162      	add	r1, pc, #392	@ (adr r1, 8001bf8 <__ieee754_acos+0x2d8>)
 8001a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a72:	f7fe fc11 	bl	8000298 <__aeabi_dsub>
 8001a76:	e773      	b.n	8001960 <__ieee754_acos+0x40>
 8001a78:	2d00      	cmp	r5, #0
 8001a7a:	f280 80cf 	bge.w	8001c1c <__ieee754_acos+0x2fc>
 8001a7e:	4b65      	ldr	r3, [pc, #404]	@ (8001c14 <__ieee754_acos+0x2f4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	4620      	mov	r0, r4
 8001a84:	4629      	mov	r1, r5
 8001a86:	f7fe fc09 	bl	800029c <__adddf3>
 8001a8a:	4b63      	ldr	r3, [pc, #396]	@ (8001c18 <__ieee754_acos+0x2f8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f7fe fdbb 	bl	8000608 <__aeabi_dmul>
 8001a92:	a343      	add	r3, pc, #268	@ (adr r3, 8001ba0 <__ieee754_acos+0x280>)
 8001a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a98:	4604      	mov	r4, r0
 8001a9a:	460d      	mov	r5, r1
 8001a9c:	f7fe fdb4 	bl	8000608 <__aeabi_dmul>
 8001aa0:	a341      	add	r3, pc, #260	@ (adr r3, 8001ba8 <__ieee754_acos+0x288>)
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	f7fe fbf9 	bl	800029c <__adddf3>
 8001aaa:	4622      	mov	r2, r4
 8001aac:	462b      	mov	r3, r5
 8001aae:	f7fe fdab 	bl	8000608 <__aeabi_dmul>
 8001ab2:	a33f      	add	r3, pc, #252	@ (adr r3, 8001bb0 <__ieee754_acos+0x290>)
 8001ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab8:	f7fe fbee 	bl	8000298 <__aeabi_dsub>
 8001abc:	4622      	mov	r2, r4
 8001abe:	462b      	mov	r3, r5
 8001ac0:	f7fe fda2 	bl	8000608 <__aeabi_dmul>
 8001ac4:	a33c      	add	r3, pc, #240	@ (adr r3, 8001bb8 <__ieee754_acos+0x298>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fbe7 	bl	800029c <__adddf3>
 8001ace:	4622      	mov	r2, r4
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	f7fe fd99 	bl	8000608 <__aeabi_dmul>
 8001ad6:	a33a      	add	r3, pc, #232	@ (adr r3, 8001bc0 <__ieee754_acos+0x2a0>)
 8001ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001adc:	f7fe fbdc 	bl	8000298 <__aeabi_dsub>
 8001ae0:	4622      	mov	r2, r4
 8001ae2:	462b      	mov	r3, r5
 8001ae4:	f7fe fd90 	bl	8000608 <__aeabi_dmul>
 8001ae8:	a337      	add	r3, pc, #220	@ (adr r3, 8001bc8 <__ieee754_acos+0x2a8>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fbd5 	bl	800029c <__adddf3>
 8001af2:	4622      	mov	r2, r4
 8001af4:	462b      	mov	r3, r5
 8001af6:	f7fe fd87 	bl	8000608 <__aeabi_dmul>
 8001afa:	a335      	add	r3, pc, #212	@ (adr r3, 8001bd0 <__ieee754_acos+0x2b0>)
 8001afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b00:	4606      	mov	r6, r0
 8001b02:	460f      	mov	r7, r1
 8001b04:	4620      	mov	r0, r4
 8001b06:	4629      	mov	r1, r5
 8001b08:	f7fe fd7e 	bl	8000608 <__aeabi_dmul>
 8001b0c:	a332      	add	r3, pc, #200	@ (adr r3, 8001bd8 <__ieee754_acos+0x2b8>)
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f7fe fbc1 	bl	8000298 <__aeabi_dsub>
 8001b16:	4622      	mov	r2, r4
 8001b18:	462b      	mov	r3, r5
 8001b1a:	f7fe fd75 	bl	8000608 <__aeabi_dmul>
 8001b1e:	a330      	add	r3, pc, #192	@ (adr r3, 8001be0 <__ieee754_acos+0x2c0>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fbba 	bl	800029c <__adddf3>
 8001b28:	4622      	mov	r2, r4
 8001b2a:	462b      	mov	r3, r5
 8001b2c:	f7fe fd6c 	bl	8000608 <__aeabi_dmul>
 8001b30:	a32d      	add	r3, pc, #180	@ (adr r3, 8001be8 <__ieee754_acos+0x2c8>)
 8001b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b36:	f7fe fbaf 	bl	8000298 <__aeabi_dsub>
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	462b      	mov	r3, r5
 8001b3e:	f7fe fd63 	bl	8000608 <__aeabi_dmul>
 8001b42:	4b34      	ldr	r3, [pc, #208]	@ (8001c14 <__ieee754_acos+0x2f4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	f7fe fba9 	bl	800029c <__adddf3>
 8001b4a:	ec45 4b10 	vmov	d0, r4, r5
 8001b4e:	4680      	mov	r8, r0
 8001b50:	4689      	mov	r9, r1
 8001b52:	f000 f949 	bl	8001de8 <__ieee754_sqrt>
 8001b56:	ec55 4b10 	vmov	r4, r5, d0
 8001b5a:	4642      	mov	r2, r8
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	4630      	mov	r0, r6
 8001b60:	4639      	mov	r1, r7
 8001b62:	f7fe fe7b 	bl	800085c <__aeabi_ddiv>
 8001b66:	4622      	mov	r2, r4
 8001b68:	462b      	mov	r3, r5
 8001b6a:	f7fe fd4d 	bl	8000608 <__aeabi_dmul>
 8001b6e:	a320      	add	r3, pc, #128	@ (adr r3, 8001bf0 <__ieee754_acos+0x2d0>)
 8001b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b74:	f7fe fb90 	bl	8000298 <__aeabi_dsub>
 8001b78:	4622      	mov	r2, r4
 8001b7a:	462b      	mov	r3, r5
 8001b7c:	f7fe fb8e 	bl	800029c <__adddf3>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	f7fe fb8a 	bl	800029c <__adddf3>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	a11c      	add	r1, pc, #112	@ (adr r1, 8001c00 <__ieee754_acos+0x2e0>)
 8001b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b92:	e76e      	b.n	8001a72 <__ieee754_acos+0x152>
 8001b94:	f3af 8000 	nop.w
	...
 8001ba0:	0dfdf709 	.word	0x0dfdf709
 8001ba4:	3f023de1 	.word	0x3f023de1
 8001ba8:	7501b288 	.word	0x7501b288
 8001bac:	3f49efe0 	.word	0x3f49efe0
 8001bb0:	b5688f3b 	.word	0xb5688f3b
 8001bb4:	3fa48228 	.word	0x3fa48228
 8001bb8:	0e884455 	.word	0x0e884455
 8001bbc:	3fc9c155 	.word	0x3fc9c155
 8001bc0:	03eb6f7d 	.word	0x03eb6f7d
 8001bc4:	3fd4d612 	.word	0x3fd4d612
 8001bc8:	55555555 	.word	0x55555555
 8001bcc:	3fc55555 	.word	0x3fc55555
 8001bd0:	b12e9282 	.word	0xb12e9282
 8001bd4:	3fb3b8c5 	.word	0x3fb3b8c5
 8001bd8:	1b8d0159 	.word	0x1b8d0159
 8001bdc:	3fe6066c 	.word	0x3fe6066c
 8001be0:	9c598ac8 	.word	0x9c598ac8
 8001be4:	40002ae5 	.word	0x40002ae5
 8001be8:	1c8a2d4b 	.word	0x1c8a2d4b
 8001bec:	40033a27 	.word	0x40033a27
 8001bf0:	33145c07 	.word	0x33145c07
 8001bf4:	3c91a626 	.word	0x3c91a626
 8001bf8:	54442d18 	.word	0x54442d18
 8001bfc:	3ff921fb 	.word	0x3ff921fb
 8001c00:	54442d18 	.word	0x54442d18
 8001c04:	400921fb 	.word	0x400921fb
 8001c08:	3fefffff 	.word	0x3fefffff
 8001c0c:	3fdfffff 	.word	0x3fdfffff
 8001c10:	3c600000 	.word	0x3c600000
 8001c14:	3ff00000 	.word	0x3ff00000
 8001c18:	3fe00000 	.word	0x3fe00000
 8001c1c:	4622      	mov	r2, r4
 8001c1e:	462b      	mov	r3, r5
 8001c20:	496b      	ldr	r1, [pc, #428]	@ (8001dd0 <__ieee754_acos+0x4b0>)
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7fe fb38 	bl	8000298 <__aeabi_dsub>
 8001c28:	4b6a      	ldr	r3, [pc, #424]	@ (8001dd4 <__ieee754_acos+0x4b4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f7fe fcec 	bl	8000608 <__aeabi_dmul>
 8001c30:	4604      	mov	r4, r0
 8001c32:	460d      	mov	r5, r1
 8001c34:	ec45 4b10 	vmov	d0, r4, r5
 8001c38:	f000 f8d6 	bl	8001de8 <__ieee754_sqrt>
 8001c3c:	a34c      	add	r3, pc, #304	@ (adr r3, 8001d70 <__ieee754_acos+0x450>)
 8001c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c42:	4620      	mov	r0, r4
 8001c44:	4629      	mov	r1, r5
 8001c46:	ec59 8b10 	vmov	r8, r9, d0
 8001c4a:	f7fe fcdd 	bl	8000608 <__aeabi_dmul>
 8001c4e:	a34a      	add	r3, pc, #296	@ (adr r3, 8001d78 <__ieee754_acos+0x458>)
 8001c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c54:	f7fe fb22 	bl	800029c <__adddf3>
 8001c58:	4622      	mov	r2, r4
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	f7fe fcd4 	bl	8000608 <__aeabi_dmul>
 8001c60:	a347      	add	r3, pc, #284	@ (adr r3, 8001d80 <__ieee754_acos+0x460>)
 8001c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c66:	f7fe fb17 	bl	8000298 <__aeabi_dsub>
 8001c6a:	4622      	mov	r2, r4
 8001c6c:	462b      	mov	r3, r5
 8001c6e:	f7fe fccb 	bl	8000608 <__aeabi_dmul>
 8001c72:	a345      	add	r3, pc, #276	@ (adr r3, 8001d88 <__ieee754_acos+0x468>)
 8001c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c78:	f7fe fb10 	bl	800029c <__adddf3>
 8001c7c:	4622      	mov	r2, r4
 8001c7e:	462b      	mov	r3, r5
 8001c80:	f7fe fcc2 	bl	8000608 <__aeabi_dmul>
 8001c84:	a342      	add	r3, pc, #264	@ (adr r3, 8001d90 <__ieee754_acos+0x470>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fb05 	bl	8000298 <__aeabi_dsub>
 8001c8e:	4622      	mov	r2, r4
 8001c90:	462b      	mov	r3, r5
 8001c92:	f7fe fcb9 	bl	8000608 <__aeabi_dmul>
 8001c96:	a340      	add	r3, pc, #256	@ (adr r3, 8001d98 <__ieee754_acos+0x478>)
 8001c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9c:	f7fe fafe 	bl	800029c <__adddf3>
 8001ca0:	4622      	mov	r2, r4
 8001ca2:	462b      	mov	r3, r5
 8001ca4:	f7fe fcb0 	bl	8000608 <__aeabi_dmul>
 8001ca8:	a33d      	add	r3, pc, #244	@ (adr r3, 8001da0 <__ieee754_acos+0x480>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	4682      	mov	sl, r0
 8001cb0:	468b      	mov	fp, r1
 8001cb2:	4620      	mov	r0, r4
 8001cb4:	4629      	mov	r1, r5
 8001cb6:	f7fe fca7 	bl	8000608 <__aeabi_dmul>
 8001cba:	a33b      	add	r3, pc, #236	@ (adr r3, 8001da8 <__ieee754_acos+0x488>)
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f7fe faea 	bl	8000298 <__aeabi_dsub>
 8001cc4:	4622      	mov	r2, r4
 8001cc6:	462b      	mov	r3, r5
 8001cc8:	f7fe fc9e 	bl	8000608 <__aeabi_dmul>
 8001ccc:	a338      	add	r3, pc, #224	@ (adr r3, 8001db0 <__ieee754_acos+0x490>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fae3 	bl	800029c <__adddf3>
 8001cd6:	4622      	mov	r2, r4
 8001cd8:	462b      	mov	r3, r5
 8001cda:	f7fe fc95 	bl	8000608 <__aeabi_dmul>
 8001cde:	a336      	add	r3, pc, #216	@ (adr r3, 8001db8 <__ieee754_acos+0x498>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fad8 	bl	8000298 <__aeabi_dsub>
 8001ce8:	4622      	mov	r2, r4
 8001cea:	462b      	mov	r3, r5
 8001cec:	f7fe fc8c 	bl	8000608 <__aeabi_dmul>
 8001cf0:	4b37      	ldr	r3, [pc, #220]	@ (8001dd0 <__ieee754_acos+0x4b0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f7fe fad2 	bl	800029c <__adddf3>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4650      	mov	r0, sl
 8001cfe:	4659      	mov	r1, fp
 8001d00:	f7fe fdac 	bl	800085c <__aeabi_ddiv>
 8001d04:	4642      	mov	r2, r8
 8001d06:	464b      	mov	r3, r9
 8001d08:	f7fe fc7e 	bl	8000608 <__aeabi_dmul>
 8001d0c:	2600      	movs	r6, #0
 8001d0e:	4682      	mov	sl, r0
 8001d10:	468b      	mov	fp, r1
 8001d12:	4632      	mov	r2, r6
 8001d14:	464b      	mov	r3, r9
 8001d16:	4630      	mov	r0, r6
 8001d18:	4649      	mov	r1, r9
 8001d1a:	f7fe fc75 	bl	8000608 <__aeabi_dmul>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4620      	mov	r0, r4
 8001d24:	4629      	mov	r1, r5
 8001d26:	f7fe fab7 	bl	8000298 <__aeabi_dsub>
 8001d2a:	4632      	mov	r2, r6
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	460d      	mov	r5, r1
 8001d30:	464b      	mov	r3, r9
 8001d32:	4640      	mov	r0, r8
 8001d34:	4649      	mov	r1, r9
 8001d36:	f7fe fab1 	bl	800029c <__adddf3>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4620      	mov	r0, r4
 8001d40:	4629      	mov	r1, r5
 8001d42:	f7fe fd8b 	bl	800085c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4650      	mov	r0, sl
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	f7fe faa5 	bl	800029c <__adddf3>
 8001d52:	4632      	mov	r2, r6
 8001d54:	464b      	mov	r3, r9
 8001d56:	f7fe faa1 	bl	800029c <__adddf3>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	f7fe fa9d 	bl	800029c <__adddf3>
 8001d62:	e5fd      	b.n	8001960 <__ieee754_acos+0x40>
 8001d64:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8001dc0 <__ieee754_acos+0x4a0>
 8001d68:	e5ee      	b.n	8001948 <__ieee754_acos+0x28>
 8001d6a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8001dc8 <__ieee754_acos+0x4a8>
 8001d6e:	e5eb      	b.n	8001948 <__ieee754_acos+0x28>
 8001d70:	0dfdf709 	.word	0x0dfdf709
 8001d74:	3f023de1 	.word	0x3f023de1
 8001d78:	7501b288 	.word	0x7501b288
 8001d7c:	3f49efe0 	.word	0x3f49efe0
 8001d80:	b5688f3b 	.word	0xb5688f3b
 8001d84:	3fa48228 	.word	0x3fa48228
 8001d88:	0e884455 	.word	0x0e884455
 8001d8c:	3fc9c155 	.word	0x3fc9c155
 8001d90:	03eb6f7d 	.word	0x03eb6f7d
 8001d94:	3fd4d612 	.word	0x3fd4d612
 8001d98:	55555555 	.word	0x55555555
 8001d9c:	3fc55555 	.word	0x3fc55555
 8001da0:	b12e9282 	.word	0xb12e9282
 8001da4:	3fb3b8c5 	.word	0x3fb3b8c5
 8001da8:	1b8d0159 	.word	0x1b8d0159
 8001dac:	3fe6066c 	.word	0x3fe6066c
 8001db0:	9c598ac8 	.word	0x9c598ac8
 8001db4:	40002ae5 	.word	0x40002ae5
 8001db8:	1c8a2d4b 	.word	0x1c8a2d4b
 8001dbc:	40033a27 	.word	0x40033a27
 8001dc0:	54442d18 	.word	0x54442d18
 8001dc4:	400921fb 	.word	0x400921fb
 8001dc8:	54442d18 	.word	0x54442d18
 8001dcc:	3ff921fb 	.word	0x3ff921fb
 8001dd0:	3ff00000 	.word	0x3ff00000
 8001dd4:	3fe00000 	.word	0x3fe00000

08001dd8 <fabs>:
 8001dd8:	ec51 0b10 	vmov	r0, r1, d0
 8001ddc:	4602      	mov	r2, r0
 8001dde:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8001de2:	ec43 2b10 	vmov	d0, r2, r3
 8001de6:	4770      	bx	lr

08001de8 <__ieee754_sqrt>:
 8001de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dec:	4a66      	ldr	r2, [pc, #408]	@ (8001f88 <__ieee754_sqrt+0x1a0>)
 8001dee:	ec55 4b10 	vmov	r4, r5, d0
 8001df2:	43aa      	bics	r2, r5
 8001df4:	462b      	mov	r3, r5
 8001df6:	4621      	mov	r1, r4
 8001df8:	d110      	bne.n	8001e1c <__ieee754_sqrt+0x34>
 8001dfa:	4622      	mov	r2, r4
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	4629      	mov	r1, r5
 8001e00:	f7fe fc02 	bl	8000608 <__aeabi_dmul>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4620      	mov	r0, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f7fe fa46 	bl	800029c <__adddf3>
 8001e10:	4604      	mov	r4, r0
 8001e12:	460d      	mov	r5, r1
 8001e14:	ec45 4b10 	vmov	d0, r4, r5
 8001e18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	dc0e      	bgt.n	8001e3e <__ieee754_sqrt+0x56>
 8001e20:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8001e24:	4322      	orrs	r2, r4
 8001e26:	d0f5      	beq.n	8001e14 <__ieee754_sqrt+0x2c>
 8001e28:	b19d      	cbz	r5, 8001e52 <__ieee754_sqrt+0x6a>
 8001e2a:	4622      	mov	r2, r4
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe fa32 	bl	8000298 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	f7fe fd10 	bl	800085c <__aeabi_ddiv>
 8001e3c:	e7e8      	b.n	8001e10 <__ieee754_sqrt+0x28>
 8001e3e:	152a      	asrs	r2, r5, #20
 8001e40:	d115      	bne.n	8001e6e <__ieee754_sqrt+0x86>
 8001e42:	2000      	movs	r0, #0
 8001e44:	e009      	b.n	8001e5a <__ieee754_sqrt+0x72>
 8001e46:	0acb      	lsrs	r3, r1, #11
 8001e48:	3a15      	subs	r2, #21
 8001e4a:	0549      	lsls	r1, r1, #21
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0fa      	beq.n	8001e46 <__ieee754_sqrt+0x5e>
 8001e50:	e7f7      	b.n	8001e42 <__ieee754_sqrt+0x5a>
 8001e52:	462a      	mov	r2, r5
 8001e54:	e7fa      	b.n	8001e4c <__ieee754_sqrt+0x64>
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	3001      	adds	r0, #1
 8001e5a:	02dc      	lsls	r4, r3, #11
 8001e5c:	d5fb      	bpl.n	8001e56 <__ieee754_sqrt+0x6e>
 8001e5e:	1e44      	subs	r4, r0, #1
 8001e60:	1b12      	subs	r2, r2, r4
 8001e62:	f1c0 0420 	rsb	r4, r0, #32
 8001e66:	fa21 f404 	lsr.w	r4, r1, r4
 8001e6a:	4323      	orrs	r3, r4
 8001e6c:	4081      	lsls	r1, r0
 8001e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e72:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8001e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e7a:	07d2      	lsls	r2, r2, #31
 8001e7c:	bf5c      	itt	pl
 8001e7e:	005b      	lslpl	r3, r3, #1
 8001e80:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8001e84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001e88:	bf58      	it	pl
 8001e8a:	0049      	lslpl	r1, r1, #1
 8001e8c:	2600      	movs	r6, #0
 8001e8e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8001e92:	107f      	asrs	r7, r7, #1
 8001e94:	0049      	lsls	r1, r1, #1
 8001e96:	2016      	movs	r0, #22
 8001e98:	4632      	mov	r2, r6
 8001e9a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8001e9e:	1915      	adds	r5, r2, r4
 8001ea0:	429d      	cmp	r5, r3
 8001ea2:	bfde      	ittt	le
 8001ea4:	192a      	addle	r2, r5, r4
 8001ea6:	1b5b      	suble	r3, r3, r5
 8001ea8:	1936      	addle	r6, r6, r4
 8001eaa:	0fcd      	lsrs	r5, r1, #31
 8001eac:	3801      	subs	r0, #1
 8001eae:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001eb2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8001eb6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8001eba:	d1f0      	bne.n	8001e9e <__ieee754_sqrt+0xb6>
 8001ebc:	4605      	mov	r5, r0
 8001ebe:	2420      	movs	r4, #32
 8001ec0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	eb0c 0e00 	add.w	lr, ip, r0
 8001eca:	dc02      	bgt.n	8001ed2 <__ieee754_sqrt+0xea>
 8001ecc:	d113      	bne.n	8001ef6 <__ieee754_sqrt+0x10e>
 8001ece:	458e      	cmp	lr, r1
 8001ed0:	d811      	bhi.n	8001ef6 <__ieee754_sqrt+0x10e>
 8001ed2:	f1be 0f00 	cmp.w	lr, #0
 8001ed6:	eb0e 000c 	add.w	r0, lr, ip
 8001eda:	da3f      	bge.n	8001f5c <__ieee754_sqrt+0x174>
 8001edc:	2800      	cmp	r0, #0
 8001ede:	db3d      	blt.n	8001f5c <__ieee754_sqrt+0x174>
 8001ee0:	f102 0801 	add.w	r8, r2, #1
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	458e      	cmp	lr, r1
 8001ee8:	bf88      	it	hi
 8001eea:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8001eee:	eba1 010e 	sub.w	r1, r1, lr
 8001ef2:	4465      	add	r5, ip
 8001ef4:	4642      	mov	r2, r8
 8001ef6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8001efa:	3c01      	subs	r4, #1
 8001efc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8001f00:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8001f04:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8001f08:	d1dc      	bne.n	8001ec4 <__ieee754_sqrt+0xdc>
 8001f0a:	4319      	orrs	r1, r3
 8001f0c:	d01b      	beq.n	8001f46 <__ieee754_sqrt+0x15e>
 8001f0e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8001f8c <__ieee754_sqrt+0x1a4>
 8001f12:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8001f90 <__ieee754_sqrt+0x1a8>
 8001f16:	e9da 0100 	ldrd	r0, r1, [sl]
 8001f1a:	e9db 2300 	ldrd	r2, r3, [fp]
 8001f1e:	f7fe f9bb 	bl	8000298 <__aeabi_dsub>
 8001f22:	e9da 8900 	ldrd	r8, r9, [sl]
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	f7fe fde7 	bl	8000b00 <__aeabi_dcmple>
 8001f32:	b140      	cbz	r0, 8001f46 <__ieee754_sqrt+0x15e>
 8001f34:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8001f38:	e9da 0100 	ldrd	r0, r1, [sl]
 8001f3c:	e9db 2300 	ldrd	r2, r3, [fp]
 8001f40:	d10e      	bne.n	8001f60 <__ieee754_sqrt+0x178>
 8001f42:	3601      	adds	r6, #1
 8001f44:	4625      	mov	r5, r4
 8001f46:	1073      	asrs	r3, r6, #1
 8001f48:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8001f4c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8001f50:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8001f54:	086b      	lsrs	r3, r5, #1
 8001f56:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8001f5a:	e759      	b.n	8001e10 <__ieee754_sqrt+0x28>
 8001f5c:	4690      	mov	r8, r2
 8001f5e:	e7c1      	b.n	8001ee4 <__ieee754_sqrt+0xfc>
 8001f60:	f7fe f99c 	bl	800029c <__adddf3>
 8001f64:	e9da 8900 	ldrd	r8, r9, [sl]
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4640      	mov	r0, r8
 8001f6e:	4649      	mov	r1, r9
 8001f70:	f7fe fdbc 	bl	8000aec <__aeabi_dcmplt>
 8001f74:	b120      	cbz	r0, 8001f80 <__ieee754_sqrt+0x198>
 8001f76:	1cab      	adds	r3, r5, #2
 8001f78:	bf08      	it	eq
 8001f7a:	3601      	addeq	r6, #1
 8001f7c:	3502      	adds	r5, #2
 8001f7e:	e7e2      	b.n	8001f46 <__ieee754_sqrt+0x15e>
 8001f80:	1c6b      	adds	r3, r5, #1
 8001f82:	f023 0501 	bic.w	r5, r3, #1
 8001f86:	e7de      	b.n	8001f46 <__ieee754_sqrt+0x15e>
 8001f88:	7ff00000 	.word	0x7ff00000
 8001f8c:	08064728 	.word	0x08064728
 8001f90:	08064720 	.word	0x08064720
 8001f94:	00000000 	.word	0x00000000

08001f98 <nan>:
 8001f98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8001fa0 <nan+0x8>
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	7ff80000 	.word	0x7ff80000

08001fa8 <calloc>:
 8001fa8:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <calloc+0xc>)
 8001faa:	460a      	mov	r2, r1
 8001fac:	4601      	mov	r1, r0
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	f000 b802 	b.w	8001fb8 <_calloc_r>
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <_calloc_r>:
 8001fb8:	b570      	push	{r4, r5, r6, lr}
 8001fba:	fba1 5402 	umull	r5, r4, r1, r2
 8001fbe:	b934      	cbnz	r4, 8001fce <_calloc_r+0x16>
 8001fc0:	4629      	mov	r1, r5
 8001fc2:	f000 f83f 	bl	8002044 <_malloc_r>
 8001fc6:	4606      	mov	r6, r0
 8001fc8:	b928      	cbnz	r0, 8001fd6 <_calloc_r+0x1e>
 8001fca:	4630      	mov	r0, r6
 8001fcc:	bd70      	pop	{r4, r5, r6, pc}
 8001fce:	220c      	movs	r2, #12
 8001fd0:	6002      	str	r2, [r0, #0]
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	e7f9      	b.n	8001fca <_calloc_r+0x12>
 8001fd6:	462a      	mov	r2, r5
 8001fd8:	4621      	mov	r1, r4
 8001fda:	f000 f8e1 	bl	80021a0 <memset>
 8001fde:	e7f4      	b.n	8001fca <_calloc_r+0x12>

08001fe0 <malloc>:
 8001fe0:	4b02      	ldr	r3, [pc, #8]	@ (8001fec <malloc+0xc>)
 8001fe2:	4601      	mov	r1, r0
 8001fe4:	6818      	ldr	r0, [r3, #0]
 8001fe6:	f000 b82d 	b.w	8002044 <_malloc_r>
 8001fea:	bf00      	nop
 8001fec:	20000004 	.word	0x20000004

08001ff0 <free>:
 8001ff0:	4b02      	ldr	r3, [pc, #8]	@ (8001ffc <free+0xc>)
 8001ff2:	4601      	mov	r1, r0
 8001ff4:	6818      	ldr	r0, [r3, #0]
 8001ff6:	f000 b917 	b.w	8002228 <_free_r>
 8001ffa:	bf00      	nop
 8001ffc:	20000004 	.word	0x20000004

08002000 <sbrk_aligned>:
 8002000:	b570      	push	{r4, r5, r6, lr}
 8002002:	4e0f      	ldr	r6, [pc, #60]	@ (8002040 <sbrk_aligned+0x40>)
 8002004:	460c      	mov	r4, r1
 8002006:	6831      	ldr	r1, [r6, #0]
 8002008:	4605      	mov	r5, r0
 800200a:	b911      	cbnz	r1, 8002012 <sbrk_aligned+0x12>
 800200c:	f000 f8d0 	bl	80021b0 <_sbrk_r>
 8002010:	6030      	str	r0, [r6, #0]
 8002012:	4621      	mov	r1, r4
 8002014:	4628      	mov	r0, r5
 8002016:	f000 f8cb 	bl	80021b0 <_sbrk_r>
 800201a:	1c43      	adds	r3, r0, #1
 800201c:	d103      	bne.n	8002026 <sbrk_aligned+0x26>
 800201e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002022:	4620      	mov	r0, r4
 8002024:	bd70      	pop	{r4, r5, r6, pc}
 8002026:	1cc4      	adds	r4, r0, #3
 8002028:	f024 0403 	bic.w	r4, r4, #3
 800202c:	42a0      	cmp	r0, r4
 800202e:	d0f8      	beq.n	8002022 <sbrk_aligned+0x22>
 8002030:	1a21      	subs	r1, r4, r0
 8002032:	4628      	mov	r0, r5
 8002034:	f000 f8bc 	bl	80021b0 <_sbrk_r>
 8002038:	3001      	adds	r0, #1
 800203a:	d1f2      	bne.n	8002022 <sbrk_aligned+0x22>
 800203c:	e7ef      	b.n	800201e <sbrk_aligned+0x1e>
 800203e:	bf00      	nop
 8002040:	20000078 	.word	0x20000078

08002044 <_malloc_r>:
 8002044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002048:	1ccd      	adds	r5, r1, #3
 800204a:	f025 0503 	bic.w	r5, r5, #3
 800204e:	3508      	adds	r5, #8
 8002050:	2d0c      	cmp	r5, #12
 8002052:	bf38      	it	cc
 8002054:	250c      	movcc	r5, #12
 8002056:	2d00      	cmp	r5, #0
 8002058:	4606      	mov	r6, r0
 800205a:	db01      	blt.n	8002060 <_malloc_r+0x1c>
 800205c:	42a9      	cmp	r1, r5
 800205e:	d904      	bls.n	800206a <_malloc_r+0x26>
 8002060:	230c      	movs	r3, #12
 8002062:	6033      	str	r3, [r6, #0]
 8002064:	2000      	movs	r0, #0
 8002066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800206a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002140 <_malloc_r+0xfc>
 800206e:	f000 f869 	bl	8002144 <__malloc_lock>
 8002072:	f8d8 3000 	ldr.w	r3, [r8]
 8002076:	461c      	mov	r4, r3
 8002078:	bb44      	cbnz	r4, 80020cc <_malloc_r+0x88>
 800207a:	4629      	mov	r1, r5
 800207c:	4630      	mov	r0, r6
 800207e:	f7ff ffbf 	bl	8002000 <sbrk_aligned>
 8002082:	1c43      	adds	r3, r0, #1
 8002084:	4604      	mov	r4, r0
 8002086:	d158      	bne.n	800213a <_malloc_r+0xf6>
 8002088:	f8d8 4000 	ldr.w	r4, [r8]
 800208c:	4627      	mov	r7, r4
 800208e:	2f00      	cmp	r7, #0
 8002090:	d143      	bne.n	800211a <_malloc_r+0xd6>
 8002092:	2c00      	cmp	r4, #0
 8002094:	d04b      	beq.n	800212e <_malloc_r+0xea>
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	4639      	mov	r1, r7
 800209a:	4630      	mov	r0, r6
 800209c:	eb04 0903 	add.w	r9, r4, r3
 80020a0:	f000 f886 	bl	80021b0 <_sbrk_r>
 80020a4:	4581      	cmp	r9, r0
 80020a6:	d142      	bne.n	800212e <_malloc_r+0xea>
 80020a8:	6821      	ldr	r1, [r4, #0]
 80020aa:	1a6d      	subs	r5, r5, r1
 80020ac:	4629      	mov	r1, r5
 80020ae:	4630      	mov	r0, r6
 80020b0:	f7ff ffa6 	bl	8002000 <sbrk_aligned>
 80020b4:	3001      	adds	r0, #1
 80020b6:	d03a      	beq.n	800212e <_malloc_r+0xea>
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	442b      	add	r3, r5
 80020bc:	6023      	str	r3, [r4, #0]
 80020be:	f8d8 3000 	ldr.w	r3, [r8]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	bb62      	cbnz	r2, 8002120 <_malloc_r+0xdc>
 80020c6:	f8c8 7000 	str.w	r7, [r8]
 80020ca:	e00f      	b.n	80020ec <_malloc_r+0xa8>
 80020cc:	6822      	ldr	r2, [r4, #0]
 80020ce:	1b52      	subs	r2, r2, r5
 80020d0:	d420      	bmi.n	8002114 <_malloc_r+0xd0>
 80020d2:	2a0b      	cmp	r2, #11
 80020d4:	d917      	bls.n	8002106 <_malloc_r+0xc2>
 80020d6:	1961      	adds	r1, r4, r5
 80020d8:	42a3      	cmp	r3, r4
 80020da:	6025      	str	r5, [r4, #0]
 80020dc:	bf18      	it	ne
 80020de:	6059      	strne	r1, [r3, #4]
 80020e0:	6863      	ldr	r3, [r4, #4]
 80020e2:	bf08      	it	eq
 80020e4:	f8c8 1000 	streq.w	r1, [r8]
 80020e8:	5162      	str	r2, [r4, r5]
 80020ea:	604b      	str	r3, [r1, #4]
 80020ec:	4630      	mov	r0, r6
 80020ee:	f000 f82f 	bl	8002150 <__malloc_unlock>
 80020f2:	f104 000b 	add.w	r0, r4, #11
 80020f6:	1d23      	adds	r3, r4, #4
 80020f8:	f020 0007 	bic.w	r0, r0, #7
 80020fc:	1ac2      	subs	r2, r0, r3
 80020fe:	bf1c      	itt	ne
 8002100:	1a1b      	subne	r3, r3, r0
 8002102:	50a3      	strne	r3, [r4, r2]
 8002104:	e7af      	b.n	8002066 <_malloc_r+0x22>
 8002106:	6862      	ldr	r2, [r4, #4]
 8002108:	42a3      	cmp	r3, r4
 800210a:	bf0c      	ite	eq
 800210c:	f8c8 2000 	streq.w	r2, [r8]
 8002110:	605a      	strne	r2, [r3, #4]
 8002112:	e7eb      	b.n	80020ec <_malloc_r+0xa8>
 8002114:	4623      	mov	r3, r4
 8002116:	6864      	ldr	r4, [r4, #4]
 8002118:	e7ae      	b.n	8002078 <_malloc_r+0x34>
 800211a:	463c      	mov	r4, r7
 800211c:	687f      	ldr	r7, [r7, #4]
 800211e:	e7b6      	b.n	800208e <_malloc_r+0x4a>
 8002120:	461a      	mov	r2, r3
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	42a3      	cmp	r3, r4
 8002126:	d1fb      	bne.n	8002120 <_malloc_r+0xdc>
 8002128:	2300      	movs	r3, #0
 800212a:	6053      	str	r3, [r2, #4]
 800212c:	e7de      	b.n	80020ec <_malloc_r+0xa8>
 800212e:	230c      	movs	r3, #12
 8002130:	6033      	str	r3, [r6, #0]
 8002132:	4630      	mov	r0, r6
 8002134:	f000 f80c 	bl	8002150 <__malloc_unlock>
 8002138:	e794      	b.n	8002064 <_malloc_r+0x20>
 800213a:	6005      	str	r5, [r0, #0]
 800213c:	e7d6      	b.n	80020ec <_malloc_r+0xa8>
 800213e:	bf00      	nop
 8002140:	2000007c 	.word	0x2000007c

08002144 <__malloc_lock>:
 8002144:	4801      	ldr	r0, [pc, #4]	@ (800214c <__malloc_lock+0x8>)
 8002146:	f000 b86d 	b.w	8002224 <__retarget_lock_acquire_recursive>
 800214a:	bf00      	nop
 800214c:	200001b8 	.word	0x200001b8

08002150 <__malloc_unlock>:
 8002150:	4801      	ldr	r0, [pc, #4]	@ (8002158 <__malloc_unlock+0x8>)
 8002152:	f000 b868 	b.w	8002226 <__retarget_lock_release_recursive>
 8002156:	bf00      	nop
 8002158:	200001b8 	.word	0x200001b8

0800215c <siprintf>:
 800215c:	b40e      	push	{r1, r2, r3}
 800215e:	b510      	push	{r4, lr}
 8002160:	b09d      	sub	sp, #116	@ 0x74
 8002162:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002164:	9002      	str	r0, [sp, #8]
 8002166:	9006      	str	r0, [sp, #24]
 8002168:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800216c:	480a      	ldr	r0, [pc, #40]	@ (8002198 <siprintf+0x3c>)
 800216e:	9107      	str	r1, [sp, #28]
 8002170:	9104      	str	r1, [sp, #16]
 8002172:	490a      	ldr	r1, [pc, #40]	@ (800219c <siprintf+0x40>)
 8002174:	f853 2b04 	ldr.w	r2, [r3], #4
 8002178:	9105      	str	r1, [sp, #20]
 800217a:	2400      	movs	r4, #0
 800217c:	a902      	add	r1, sp, #8
 800217e:	6800      	ldr	r0, [r0, #0]
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002184:	f000 f8f6 	bl	8002374 <_svfiprintf_r>
 8002188:	9b02      	ldr	r3, [sp, #8]
 800218a:	701c      	strb	r4, [r3, #0]
 800218c:	b01d      	add	sp, #116	@ 0x74
 800218e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002192:	b003      	add	sp, #12
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000004 	.word	0x20000004
 800219c:	ffff0208 	.word	0xffff0208

080021a0 <memset>:
 80021a0:	4402      	add	r2, r0
 80021a2:	4603      	mov	r3, r0
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <memset+0xa>
 80021a8:	4770      	bx	lr
 80021aa:	f803 1b01 	strb.w	r1, [r3], #1
 80021ae:	e7f9      	b.n	80021a4 <memset+0x4>

080021b0 <_sbrk_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4d06      	ldr	r5, [pc, #24]	@ (80021cc <_sbrk_r+0x1c>)
 80021b4:	2300      	movs	r3, #0
 80021b6:	4604      	mov	r4, r0
 80021b8:	4608      	mov	r0, r1
 80021ba:	602b      	str	r3, [r5, #0]
 80021bc:	f7ff faf6 	bl	80017ac <_sbrk>
 80021c0:	1c43      	adds	r3, r0, #1
 80021c2:	d102      	bne.n	80021ca <_sbrk_r+0x1a>
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	b103      	cbz	r3, 80021ca <_sbrk_r+0x1a>
 80021c8:	6023      	str	r3, [r4, #0]
 80021ca:	bd38      	pop	{r3, r4, r5, pc}
 80021cc:	200001bc 	.word	0x200001bc

080021d0 <__errno>:
 80021d0:	4b01      	ldr	r3, [pc, #4]	@ (80021d8 <__errno+0x8>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000004 	.word	0x20000004

080021dc <__libc_init_array>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	4d0d      	ldr	r5, [pc, #52]	@ (8002214 <__libc_init_array+0x38>)
 80021e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002218 <__libc_init_array+0x3c>)
 80021e2:	1b64      	subs	r4, r4, r5
 80021e4:	10a4      	asrs	r4, r4, #2
 80021e6:	2600      	movs	r6, #0
 80021e8:	42a6      	cmp	r6, r4
 80021ea:	d109      	bne.n	8002200 <__libc_init_array+0x24>
 80021ec:	4d0b      	ldr	r5, [pc, #44]	@ (800221c <__libc_init_array+0x40>)
 80021ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002220 <__libc_init_array+0x44>)
 80021f0:	f000 fba6 	bl	8002940 <_init>
 80021f4:	1b64      	subs	r4, r4, r5
 80021f6:	10a4      	asrs	r4, r4, #2
 80021f8:	2600      	movs	r6, #0
 80021fa:	42a6      	cmp	r6, r4
 80021fc:	d105      	bne.n	800220a <__libc_init_array+0x2e>
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	f855 3b04 	ldr.w	r3, [r5], #4
 8002204:	4798      	blx	r3
 8002206:	3601      	adds	r6, #1
 8002208:	e7ee      	b.n	80021e8 <__libc_init_array+0xc>
 800220a:	f855 3b04 	ldr.w	r3, [r5], #4
 800220e:	4798      	blx	r3
 8002210:	3601      	adds	r6, #1
 8002212:	e7f2      	b.n	80021fa <__libc_init_array+0x1e>
 8002214:	08064738 	.word	0x08064738
 8002218:	08064738 	.word	0x08064738
 800221c:	08064738 	.word	0x08064738
 8002220:	0806473c 	.word	0x0806473c

08002224 <__retarget_lock_acquire_recursive>:
 8002224:	4770      	bx	lr

08002226 <__retarget_lock_release_recursive>:
 8002226:	4770      	bx	lr

08002228 <_free_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4605      	mov	r5, r0
 800222c:	2900      	cmp	r1, #0
 800222e:	d041      	beq.n	80022b4 <_free_r+0x8c>
 8002230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002234:	1f0c      	subs	r4, r1, #4
 8002236:	2b00      	cmp	r3, #0
 8002238:	bfb8      	it	lt
 800223a:	18e4      	addlt	r4, r4, r3
 800223c:	f7ff ff82 	bl	8002144 <__malloc_lock>
 8002240:	4a1d      	ldr	r2, [pc, #116]	@ (80022b8 <_free_r+0x90>)
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	b933      	cbnz	r3, 8002254 <_free_r+0x2c>
 8002246:	6063      	str	r3, [r4, #4]
 8002248:	6014      	str	r4, [r2, #0]
 800224a:	4628      	mov	r0, r5
 800224c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002250:	f7ff bf7e 	b.w	8002150 <__malloc_unlock>
 8002254:	42a3      	cmp	r3, r4
 8002256:	d908      	bls.n	800226a <_free_r+0x42>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	1821      	adds	r1, r4, r0
 800225c:	428b      	cmp	r3, r1
 800225e:	bf01      	itttt	eq
 8002260:	6819      	ldreq	r1, [r3, #0]
 8002262:	685b      	ldreq	r3, [r3, #4]
 8002264:	1809      	addeq	r1, r1, r0
 8002266:	6021      	streq	r1, [r4, #0]
 8002268:	e7ed      	b.n	8002246 <_free_r+0x1e>
 800226a:	461a      	mov	r2, r3
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	b10b      	cbz	r3, 8002274 <_free_r+0x4c>
 8002270:	42a3      	cmp	r3, r4
 8002272:	d9fa      	bls.n	800226a <_free_r+0x42>
 8002274:	6811      	ldr	r1, [r2, #0]
 8002276:	1850      	adds	r0, r2, r1
 8002278:	42a0      	cmp	r0, r4
 800227a:	d10b      	bne.n	8002294 <_free_r+0x6c>
 800227c:	6820      	ldr	r0, [r4, #0]
 800227e:	4401      	add	r1, r0
 8002280:	1850      	adds	r0, r2, r1
 8002282:	4283      	cmp	r3, r0
 8002284:	6011      	str	r1, [r2, #0]
 8002286:	d1e0      	bne.n	800224a <_free_r+0x22>
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	6053      	str	r3, [r2, #4]
 800228e:	4408      	add	r0, r1
 8002290:	6010      	str	r0, [r2, #0]
 8002292:	e7da      	b.n	800224a <_free_r+0x22>
 8002294:	d902      	bls.n	800229c <_free_r+0x74>
 8002296:	230c      	movs	r3, #12
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	e7d6      	b.n	800224a <_free_r+0x22>
 800229c:	6820      	ldr	r0, [r4, #0]
 800229e:	1821      	adds	r1, r4, r0
 80022a0:	428b      	cmp	r3, r1
 80022a2:	bf04      	itt	eq
 80022a4:	6819      	ldreq	r1, [r3, #0]
 80022a6:	685b      	ldreq	r3, [r3, #4]
 80022a8:	6063      	str	r3, [r4, #4]
 80022aa:	bf04      	itt	eq
 80022ac:	1809      	addeq	r1, r1, r0
 80022ae:	6021      	streq	r1, [r4, #0]
 80022b0:	6054      	str	r4, [r2, #4]
 80022b2:	e7ca      	b.n	800224a <_free_r+0x22>
 80022b4:	bd38      	pop	{r3, r4, r5, pc}
 80022b6:	bf00      	nop
 80022b8:	2000007c 	.word	0x2000007c

080022bc <__ssputs_r>:
 80022bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c0:	688e      	ldr	r6, [r1, #8]
 80022c2:	461f      	mov	r7, r3
 80022c4:	42be      	cmp	r6, r7
 80022c6:	680b      	ldr	r3, [r1, #0]
 80022c8:	4682      	mov	sl, r0
 80022ca:	460c      	mov	r4, r1
 80022cc:	4690      	mov	r8, r2
 80022ce:	d82d      	bhi.n	800232c <__ssputs_r+0x70>
 80022d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80022d8:	d026      	beq.n	8002328 <__ssputs_r+0x6c>
 80022da:	6965      	ldr	r5, [r4, #20]
 80022dc:	6909      	ldr	r1, [r1, #16]
 80022de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022e2:	eba3 0901 	sub.w	r9, r3, r1
 80022e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022ea:	1c7b      	adds	r3, r7, #1
 80022ec:	444b      	add	r3, r9
 80022ee:	106d      	asrs	r5, r5, #1
 80022f0:	429d      	cmp	r5, r3
 80022f2:	bf38      	it	cc
 80022f4:	461d      	movcc	r5, r3
 80022f6:	0553      	lsls	r3, r2, #21
 80022f8:	d527      	bpl.n	800234a <__ssputs_r+0x8e>
 80022fa:	4629      	mov	r1, r5
 80022fc:	f7ff fea2 	bl	8002044 <_malloc_r>
 8002300:	4606      	mov	r6, r0
 8002302:	b360      	cbz	r0, 800235e <__ssputs_r+0xa2>
 8002304:	6921      	ldr	r1, [r4, #16]
 8002306:	464a      	mov	r2, r9
 8002308:	f000 fb04 	bl	8002914 <memcpy>
 800230c:	89a3      	ldrh	r3, [r4, #12]
 800230e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002316:	81a3      	strh	r3, [r4, #12]
 8002318:	6126      	str	r6, [r4, #16]
 800231a:	6165      	str	r5, [r4, #20]
 800231c:	444e      	add	r6, r9
 800231e:	eba5 0509 	sub.w	r5, r5, r9
 8002322:	6026      	str	r6, [r4, #0]
 8002324:	60a5      	str	r5, [r4, #8]
 8002326:	463e      	mov	r6, r7
 8002328:	42be      	cmp	r6, r7
 800232a:	d900      	bls.n	800232e <__ssputs_r+0x72>
 800232c:	463e      	mov	r6, r7
 800232e:	6820      	ldr	r0, [r4, #0]
 8002330:	4632      	mov	r2, r6
 8002332:	4641      	mov	r1, r8
 8002334:	f000 fad4 	bl	80028e0 <memmove>
 8002338:	68a3      	ldr	r3, [r4, #8]
 800233a:	1b9b      	subs	r3, r3, r6
 800233c:	60a3      	str	r3, [r4, #8]
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	4433      	add	r3, r6
 8002342:	6023      	str	r3, [r4, #0]
 8002344:	2000      	movs	r0, #0
 8002346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800234a:	462a      	mov	r2, r5
 800234c:	f000 fa9a 	bl	8002884 <_realloc_r>
 8002350:	4606      	mov	r6, r0
 8002352:	2800      	cmp	r0, #0
 8002354:	d1e0      	bne.n	8002318 <__ssputs_r+0x5c>
 8002356:	6921      	ldr	r1, [r4, #16]
 8002358:	4650      	mov	r0, sl
 800235a:	f7ff ff65 	bl	8002228 <_free_r>
 800235e:	230c      	movs	r3, #12
 8002360:	f8ca 3000 	str.w	r3, [sl]
 8002364:	89a3      	ldrh	r3, [r4, #12]
 8002366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800236a:	81a3      	strh	r3, [r4, #12]
 800236c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002370:	e7e9      	b.n	8002346 <__ssputs_r+0x8a>
	...

08002374 <_svfiprintf_r>:
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002378:	4698      	mov	r8, r3
 800237a:	898b      	ldrh	r3, [r1, #12]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	b09d      	sub	sp, #116	@ 0x74
 8002380:	4607      	mov	r7, r0
 8002382:	460d      	mov	r5, r1
 8002384:	4614      	mov	r4, r2
 8002386:	d510      	bpl.n	80023aa <_svfiprintf_r+0x36>
 8002388:	690b      	ldr	r3, [r1, #16]
 800238a:	b973      	cbnz	r3, 80023aa <_svfiprintf_r+0x36>
 800238c:	2140      	movs	r1, #64	@ 0x40
 800238e:	f7ff fe59 	bl	8002044 <_malloc_r>
 8002392:	6028      	str	r0, [r5, #0]
 8002394:	6128      	str	r0, [r5, #16]
 8002396:	b930      	cbnz	r0, 80023a6 <_svfiprintf_r+0x32>
 8002398:	230c      	movs	r3, #12
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023a0:	b01d      	add	sp, #116	@ 0x74
 80023a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023a6:	2340      	movs	r3, #64	@ 0x40
 80023a8:	616b      	str	r3, [r5, #20]
 80023aa:	2300      	movs	r3, #0
 80023ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80023ae:	2320      	movs	r3, #32
 80023b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80023b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80023b8:	2330      	movs	r3, #48	@ 0x30
 80023ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002558 <_svfiprintf_r+0x1e4>
 80023be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80023c2:	f04f 0901 	mov.w	r9, #1
 80023c6:	4623      	mov	r3, r4
 80023c8:	469a      	mov	sl, r3
 80023ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023ce:	b10a      	cbz	r2, 80023d4 <_svfiprintf_r+0x60>
 80023d0:	2a25      	cmp	r2, #37	@ 0x25
 80023d2:	d1f9      	bne.n	80023c8 <_svfiprintf_r+0x54>
 80023d4:	ebba 0b04 	subs.w	fp, sl, r4
 80023d8:	d00b      	beq.n	80023f2 <_svfiprintf_r+0x7e>
 80023da:	465b      	mov	r3, fp
 80023dc:	4622      	mov	r2, r4
 80023de:	4629      	mov	r1, r5
 80023e0:	4638      	mov	r0, r7
 80023e2:	f7ff ff6b 	bl	80022bc <__ssputs_r>
 80023e6:	3001      	adds	r0, #1
 80023e8:	f000 80a7 	beq.w	800253a <_svfiprintf_r+0x1c6>
 80023ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023ee:	445a      	add	r2, fp
 80023f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80023f2:	f89a 3000 	ldrb.w	r3, [sl]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f000 809f 	beq.w	800253a <_svfiprintf_r+0x1c6>
 80023fc:	2300      	movs	r3, #0
 80023fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002402:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002406:	f10a 0a01 	add.w	sl, sl, #1
 800240a:	9304      	str	r3, [sp, #16]
 800240c:	9307      	str	r3, [sp, #28]
 800240e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002412:	931a      	str	r3, [sp, #104]	@ 0x68
 8002414:	4654      	mov	r4, sl
 8002416:	2205      	movs	r2, #5
 8002418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800241c:	484e      	ldr	r0, [pc, #312]	@ (8002558 <_svfiprintf_r+0x1e4>)
 800241e:	f7fd fee7 	bl	80001f0 <memchr>
 8002422:	9a04      	ldr	r2, [sp, #16]
 8002424:	b9d8      	cbnz	r0, 800245e <_svfiprintf_r+0xea>
 8002426:	06d0      	lsls	r0, r2, #27
 8002428:	bf44      	itt	mi
 800242a:	2320      	movmi	r3, #32
 800242c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002430:	0711      	lsls	r1, r2, #28
 8002432:	bf44      	itt	mi
 8002434:	232b      	movmi	r3, #43	@ 0x2b
 8002436:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800243a:	f89a 3000 	ldrb.w	r3, [sl]
 800243e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002440:	d015      	beq.n	800246e <_svfiprintf_r+0xfa>
 8002442:	9a07      	ldr	r2, [sp, #28]
 8002444:	4654      	mov	r4, sl
 8002446:	2000      	movs	r0, #0
 8002448:	f04f 0c0a 	mov.w	ip, #10
 800244c:	4621      	mov	r1, r4
 800244e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002452:	3b30      	subs	r3, #48	@ 0x30
 8002454:	2b09      	cmp	r3, #9
 8002456:	d94b      	bls.n	80024f0 <_svfiprintf_r+0x17c>
 8002458:	b1b0      	cbz	r0, 8002488 <_svfiprintf_r+0x114>
 800245a:	9207      	str	r2, [sp, #28]
 800245c:	e014      	b.n	8002488 <_svfiprintf_r+0x114>
 800245e:	eba0 0308 	sub.w	r3, r0, r8
 8002462:	fa09 f303 	lsl.w	r3, r9, r3
 8002466:	4313      	orrs	r3, r2
 8002468:	9304      	str	r3, [sp, #16]
 800246a:	46a2      	mov	sl, r4
 800246c:	e7d2      	b.n	8002414 <_svfiprintf_r+0xa0>
 800246e:	9b03      	ldr	r3, [sp, #12]
 8002470:	1d19      	adds	r1, r3, #4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	9103      	str	r1, [sp, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	bfbb      	ittet	lt
 800247a:	425b      	neglt	r3, r3
 800247c:	f042 0202 	orrlt.w	r2, r2, #2
 8002480:	9307      	strge	r3, [sp, #28]
 8002482:	9307      	strlt	r3, [sp, #28]
 8002484:	bfb8      	it	lt
 8002486:	9204      	strlt	r2, [sp, #16]
 8002488:	7823      	ldrb	r3, [r4, #0]
 800248a:	2b2e      	cmp	r3, #46	@ 0x2e
 800248c:	d10a      	bne.n	80024a4 <_svfiprintf_r+0x130>
 800248e:	7863      	ldrb	r3, [r4, #1]
 8002490:	2b2a      	cmp	r3, #42	@ 0x2a
 8002492:	d132      	bne.n	80024fa <_svfiprintf_r+0x186>
 8002494:	9b03      	ldr	r3, [sp, #12]
 8002496:	1d1a      	adds	r2, r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	9203      	str	r2, [sp, #12]
 800249c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80024a0:	3402      	adds	r4, #2
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002568 <_svfiprintf_r+0x1f4>
 80024a8:	7821      	ldrb	r1, [r4, #0]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4650      	mov	r0, sl
 80024ae:	f7fd fe9f 	bl	80001f0 <memchr>
 80024b2:	b138      	cbz	r0, 80024c4 <_svfiprintf_r+0x150>
 80024b4:	9b04      	ldr	r3, [sp, #16]
 80024b6:	eba0 000a 	sub.w	r0, r0, sl
 80024ba:	2240      	movs	r2, #64	@ 0x40
 80024bc:	4082      	lsls	r2, r0
 80024be:	4313      	orrs	r3, r2
 80024c0:	3401      	adds	r4, #1
 80024c2:	9304      	str	r3, [sp, #16]
 80024c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024c8:	4824      	ldr	r0, [pc, #144]	@ (800255c <_svfiprintf_r+0x1e8>)
 80024ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80024ce:	2206      	movs	r2, #6
 80024d0:	f7fd fe8e 	bl	80001f0 <memchr>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d036      	beq.n	8002546 <_svfiprintf_r+0x1d2>
 80024d8:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <_svfiprintf_r+0x1ec>)
 80024da:	bb1b      	cbnz	r3, 8002524 <_svfiprintf_r+0x1b0>
 80024dc:	9b03      	ldr	r3, [sp, #12]
 80024de:	3307      	adds	r3, #7
 80024e0:	f023 0307 	bic.w	r3, r3, #7
 80024e4:	3308      	adds	r3, #8
 80024e6:	9303      	str	r3, [sp, #12]
 80024e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024ea:	4433      	add	r3, r6
 80024ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80024ee:	e76a      	b.n	80023c6 <_svfiprintf_r+0x52>
 80024f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80024f4:	460c      	mov	r4, r1
 80024f6:	2001      	movs	r0, #1
 80024f8:	e7a8      	b.n	800244c <_svfiprintf_r+0xd8>
 80024fa:	2300      	movs	r3, #0
 80024fc:	3401      	adds	r4, #1
 80024fe:	9305      	str	r3, [sp, #20]
 8002500:	4619      	mov	r1, r3
 8002502:	f04f 0c0a 	mov.w	ip, #10
 8002506:	4620      	mov	r0, r4
 8002508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800250c:	3a30      	subs	r2, #48	@ 0x30
 800250e:	2a09      	cmp	r2, #9
 8002510:	d903      	bls.n	800251a <_svfiprintf_r+0x1a6>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0c6      	beq.n	80024a4 <_svfiprintf_r+0x130>
 8002516:	9105      	str	r1, [sp, #20]
 8002518:	e7c4      	b.n	80024a4 <_svfiprintf_r+0x130>
 800251a:	fb0c 2101 	mla	r1, ip, r1, r2
 800251e:	4604      	mov	r4, r0
 8002520:	2301      	movs	r3, #1
 8002522:	e7f0      	b.n	8002506 <_svfiprintf_r+0x192>
 8002524:	ab03      	add	r3, sp, #12
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	462a      	mov	r2, r5
 800252a:	4b0e      	ldr	r3, [pc, #56]	@ (8002564 <_svfiprintf_r+0x1f0>)
 800252c:	a904      	add	r1, sp, #16
 800252e:	4638      	mov	r0, r7
 8002530:	f3af 8000 	nop.w
 8002534:	1c42      	adds	r2, r0, #1
 8002536:	4606      	mov	r6, r0
 8002538:	d1d6      	bne.n	80024e8 <_svfiprintf_r+0x174>
 800253a:	89ab      	ldrh	r3, [r5, #12]
 800253c:	065b      	lsls	r3, r3, #25
 800253e:	f53f af2d 	bmi.w	800239c <_svfiprintf_r+0x28>
 8002542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002544:	e72c      	b.n	80023a0 <_svfiprintf_r+0x2c>
 8002546:	ab03      	add	r3, sp, #12
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	462a      	mov	r2, r5
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <_svfiprintf_r+0x1f0>)
 800254e:	a904      	add	r1, sp, #16
 8002550:	4638      	mov	r0, r7
 8002552:	f000 f879 	bl	8002648 <_printf_i>
 8002556:	e7ed      	b.n	8002534 <_svfiprintf_r+0x1c0>
 8002558:	080646e8 	.word	0x080646e8
 800255c:	080646f2 	.word	0x080646f2
 8002560:	00000000 	.word	0x00000000
 8002564:	080022bd 	.word	0x080022bd
 8002568:	080646ee 	.word	0x080646ee

0800256c <_printf_common>:
 800256c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002570:	4616      	mov	r6, r2
 8002572:	4698      	mov	r8, r3
 8002574:	688a      	ldr	r2, [r1, #8]
 8002576:	690b      	ldr	r3, [r1, #16]
 8002578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800257c:	4293      	cmp	r3, r2
 800257e:	bfb8      	it	lt
 8002580:	4613      	movlt	r3, r2
 8002582:	6033      	str	r3, [r6, #0]
 8002584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002588:	4607      	mov	r7, r0
 800258a:	460c      	mov	r4, r1
 800258c:	b10a      	cbz	r2, 8002592 <_printf_common+0x26>
 800258e:	3301      	adds	r3, #1
 8002590:	6033      	str	r3, [r6, #0]
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	0699      	lsls	r1, r3, #26
 8002596:	bf42      	ittt	mi
 8002598:	6833      	ldrmi	r3, [r6, #0]
 800259a:	3302      	addmi	r3, #2
 800259c:	6033      	strmi	r3, [r6, #0]
 800259e:	6825      	ldr	r5, [r4, #0]
 80025a0:	f015 0506 	ands.w	r5, r5, #6
 80025a4:	d106      	bne.n	80025b4 <_printf_common+0x48>
 80025a6:	f104 0a19 	add.w	sl, r4, #25
 80025aa:	68e3      	ldr	r3, [r4, #12]
 80025ac:	6832      	ldr	r2, [r6, #0]
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	42ab      	cmp	r3, r5
 80025b2:	dc26      	bgt.n	8002602 <_printf_common+0x96>
 80025b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025b8:	6822      	ldr	r2, [r4, #0]
 80025ba:	3b00      	subs	r3, #0
 80025bc:	bf18      	it	ne
 80025be:	2301      	movne	r3, #1
 80025c0:	0692      	lsls	r2, r2, #26
 80025c2:	d42b      	bmi.n	800261c <_printf_common+0xb0>
 80025c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025c8:	4641      	mov	r1, r8
 80025ca:	4638      	mov	r0, r7
 80025cc:	47c8      	blx	r9
 80025ce:	3001      	adds	r0, #1
 80025d0:	d01e      	beq.n	8002610 <_printf_common+0xa4>
 80025d2:	6823      	ldr	r3, [r4, #0]
 80025d4:	6922      	ldr	r2, [r4, #16]
 80025d6:	f003 0306 	and.w	r3, r3, #6
 80025da:	2b04      	cmp	r3, #4
 80025dc:	bf02      	ittt	eq
 80025de:	68e5      	ldreq	r5, [r4, #12]
 80025e0:	6833      	ldreq	r3, [r6, #0]
 80025e2:	1aed      	subeq	r5, r5, r3
 80025e4:	68a3      	ldr	r3, [r4, #8]
 80025e6:	bf0c      	ite	eq
 80025e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025ec:	2500      	movne	r5, #0
 80025ee:	4293      	cmp	r3, r2
 80025f0:	bfc4      	itt	gt
 80025f2:	1a9b      	subgt	r3, r3, r2
 80025f4:	18ed      	addgt	r5, r5, r3
 80025f6:	2600      	movs	r6, #0
 80025f8:	341a      	adds	r4, #26
 80025fa:	42b5      	cmp	r5, r6
 80025fc:	d11a      	bne.n	8002634 <_printf_common+0xc8>
 80025fe:	2000      	movs	r0, #0
 8002600:	e008      	b.n	8002614 <_printf_common+0xa8>
 8002602:	2301      	movs	r3, #1
 8002604:	4652      	mov	r2, sl
 8002606:	4641      	mov	r1, r8
 8002608:	4638      	mov	r0, r7
 800260a:	47c8      	blx	r9
 800260c:	3001      	adds	r0, #1
 800260e:	d103      	bne.n	8002618 <_printf_common+0xac>
 8002610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002618:	3501      	adds	r5, #1
 800261a:	e7c6      	b.n	80025aa <_printf_common+0x3e>
 800261c:	18e1      	adds	r1, r4, r3
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	2030      	movs	r0, #48	@ 0x30
 8002622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002626:	4422      	add	r2, r4
 8002628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800262c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002630:	3302      	adds	r3, #2
 8002632:	e7c7      	b.n	80025c4 <_printf_common+0x58>
 8002634:	2301      	movs	r3, #1
 8002636:	4622      	mov	r2, r4
 8002638:	4641      	mov	r1, r8
 800263a:	4638      	mov	r0, r7
 800263c:	47c8      	blx	r9
 800263e:	3001      	adds	r0, #1
 8002640:	d0e6      	beq.n	8002610 <_printf_common+0xa4>
 8002642:	3601      	adds	r6, #1
 8002644:	e7d9      	b.n	80025fa <_printf_common+0x8e>
	...

08002648 <_printf_i>:
 8002648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800264c:	7e0f      	ldrb	r7, [r1, #24]
 800264e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002650:	2f78      	cmp	r7, #120	@ 0x78
 8002652:	4691      	mov	r9, r2
 8002654:	4680      	mov	r8, r0
 8002656:	460c      	mov	r4, r1
 8002658:	469a      	mov	sl, r3
 800265a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800265e:	d807      	bhi.n	8002670 <_printf_i+0x28>
 8002660:	2f62      	cmp	r7, #98	@ 0x62
 8002662:	d80a      	bhi.n	800267a <_printf_i+0x32>
 8002664:	2f00      	cmp	r7, #0
 8002666:	f000 80d1 	beq.w	800280c <_printf_i+0x1c4>
 800266a:	2f58      	cmp	r7, #88	@ 0x58
 800266c:	f000 80b8 	beq.w	80027e0 <_printf_i+0x198>
 8002670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002678:	e03a      	b.n	80026f0 <_printf_i+0xa8>
 800267a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800267e:	2b15      	cmp	r3, #21
 8002680:	d8f6      	bhi.n	8002670 <_printf_i+0x28>
 8002682:	a101      	add	r1, pc, #4	@ (adr r1, 8002688 <_printf_i+0x40>)
 8002684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002688:	080026e1 	.word	0x080026e1
 800268c:	080026f5 	.word	0x080026f5
 8002690:	08002671 	.word	0x08002671
 8002694:	08002671 	.word	0x08002671
 8002698:	08002671 	.word	0x08002671
 800269c:	08002671 	.word	0x08002671
 80026a0:	080026f5 	.word	0x080026f5
 80026a4:	08002671 	.word	0x08002671
 80026a8:	08002671 	.word	0x08002671
 80026ac:	08002671 	.word	0x08002671
 80026b0:	08002671 	.word	0x08002671
 80026b4:	080027f3 	.word	0x080027f3
 80026b8:	0800271f 	.word	0x0800271f
 80026bc:	080027ad 	.word	0x080027ad
 80026c0:	08002671 	.word	0x08002671
 80026c4:	08002671 	.word	0x08002671
 80026c8:	08002815 	.word	0x08002815
 80026cc:	08002671 	.word	0x08002671
 80026d0:	0800271f 	.word	0x0800271f
 80026d4:	08002671 	.word	0x08002671
 80026d8:	08002671 	.word	0x08002671
 80026dc:	080027b5 	.word	0x080027b5
 80026e0:	6833      	ldr	r3, [r6, #0]
 80026e2:	1d1a      	adds	r2, r3, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6032      	str	r2, [r6, #0]
 80026e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026f0:	2301      	movs	r3, #1
 80026f2:	e09c      	b.n	800282e <_printf_i+0x1e6>
 80026f4:	6833      	ldr	r3, [r6, #0]
 80026f6:	6820      	ldr	r0, [r4, #0]
 80026f8:	1d19      	adds	r1, r3, #4
 80026fa:	6031      	str	r1, [r6, #0]
 80026fc:	0606      	lsls	r6, r0, #24
 80026fe:	d501      	bpl.n	8002704 <_printf_i+0xbc>
 8002700:	681d      	ldr	r5, [r3, #0]
 8002702:	e003      	b.n	800270c <_printf_i+0xc4>
 8002704:	0645      	lsls	r5, r0, #25
 8002706:	d5fb      	bpl.n	8002700 <_printf_i+0xb8>
 8002708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800270c:	2d00      	cmp	r5, #0
 800270e:	da03      	bge.n	8002718 <_printf_i+0xd0>
 8002710:	232d      	movs	r3, #45	@ 0x2d
 8002712:	426d      	negs	r5, r5
 8002714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002718:	4858      	ldr	r0, [pc, #352]	@ (800287c <_printf_i+0x234>)
 800271a:	230a      	movs	r3, #10
 800271c:	e011      	b.n	8002742 <_printf_i+0xfa>
 800271e:	6821      	ldr	r1, [r4, #0]
 8002720:	6833      	ldr	r3, [r6, #0]
 8002722:	0608      	lsls	r0, r1, #24
 8002724:	f853 5b04 	ldr.w	r5, [r3], #4
 8002728:	d402      	bmi.n	8002730 <_printf_i+0xe8>
 800272a:	0649      	lsls	r1, r1, #25
 800272c:	bf48      	it	mi
 800272e:	b2ad      	uxthmi	r5, r5
 8002730:	2f6f      	cmp	r7, #111	@ 0x6f
 8002732:	4852      	ldr	r0, [pc, #328]	@ (800287c <_printf_i+0x234>)
 8002734:	6033      	str	r3, [r6, #0]
 8002736:	bf14      	ite	ne
 8002738:	230a      	movne	r3, #10
 800273a:	2308      	moveq	r3, #8
 800273c:	2100      	movs	r1, #0
 800273e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002742:	6866      	ldr	r6, [r4, #4]
 8002744:	60a6      	str	r6, [r4, #8]
 8002746:	2e00      	cmp	r6, #0
 8002748:	db05      	blt.n	8002756 <_printf_i+0x10e>
 800274a:	6821      	ldr	r1, [r4, #0]
 800274c:	432e      	orrs	r6, r5
 800274e:	f021 0104 	bic.w	r1, r1, #4
 8002752:	6021      	str	r1, [r4, #0]
 8002754:	d04b      	beq.n	80027ee <_printf_i+0x1a6>
 8002756:	4616      	mov	r6, r2
 8002758:	fbb5 f1f3 	udiv	r1, r5, r3
 800275c:	fb03 5711 	mls	r7, r3, r1, r5
 8002760:	5dc7      	ldrb	r7, [r0, r7]
 8002762:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002766:	462f      	mov	r7, r5
 8002768:	42bb      	cmp	r3, r7
 800276a:	460d      	mov	r5, r1
 800276c:	d9f4      	bls.n	8002758 <_printf_i+0x110>
 800276e:	2b08      	cmp	r3, #8
 8002770:	d10b      	bne.n	800278a <_printf_i+0x142>
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	07df      	lsls	r7, r3, #31
 8002776:	d508      	bpl.n	800278a <_printf_i+0x142>
 8002778:	6923      	ldr	r3, [r4, #16]
 800277a:	6861      	ldr	r1, [r4, #4]
 800277c:	4299      	cmp	r1, r3
 800277e:	bfde      	ittt	le
 8002780:	2330      	movle	r3, #48	@ 0x30
 8002782:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002786:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800278a:	1b92      	subs	r2, r2, r6
 800278c:	6122      	str	r2, [r4, #16]
 800278e:	f8cd a000 	str.w	sl, [sp]
 8002792:	464b      	mov	r3, r9
 8002794:	aa03      	add	r2, sp, #12
 8002796:	4621      	mov	r1, r4
 8002798:	4640      	mov	r0, r8
 800279a:	f7ff fee7 	bl	800256c <_printf_common>
 800279e:	3001      	adds	r0, #1
 80027a0:	d14a      	bne.n	8002838 <_printf_i+0x1f0>
 80027a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027a6:	b004      	add	sp, #16
 80027a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ac:	6823      	ldr	r3, [r4, #0]
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	6023      	str	r3, [r4, #0]
 80027b4:	4832      	ldr	r0, [pc, #200]	@ (8002880 <_printf_i+0x238>)
 80027b6:	2778      	movs	r7, #120	@ 0x78
 80027b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027bc:	6823      	ldr	r3, [r4, #0]
 80027be:	6831      	ldr	r1, [r6, #0]
 80027c0:	061f      	lsls	r7, r3, #24
 80027c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80027c6:	d402      	bmi.n	80027ce <_printf_i+0x186>
 80027c8:	065f      	lsls	r7, r3, #25
 80027ca:	bf48      	it	mi
 80027cc:	b2ad      	uxthmi	r5, r5
 80027ce:	6031      	str	r1, [r6, #0]
 80027d0:	07d9      	lsls	r1, r3, #31
 80027d2:	bf44      	itt	mi
 80027d4:	f043 0320 	orrmi.w	r3, r3, #32
 80027d8:	6023      	strmi	r3, [r4, #0]
 80027da:	b11d      	cbz	r5, 80027e4 <_printf_i+0x19c>
 80027dc:	2310      	movs	r3, #16
 80027de:	e7ad      	b.n	800273c <_printf_i+0xf4>
 80027e0:	4826      	ldr	r0, [pc, #152]	@ (800287c <_printf_i+0x234>)
 80027e2:	e7e9      	b.n	80027b8 <_printf_i+0x170>
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	f023 0320 	bic.w	r3, r3, #32
 80027ea:	6023      	str	r3, [r4, #0]
 80027ec:	e7f6      	b.n	80027dc <_printf_i+0x194>
 80027ee:	4616      	mov	r6, r2
 80027f0:	e7bd      	b.n	800276e <_printf_i+0x126>
 80027f2:	6833      	ldr	r3, [r6, #0]
 80027f4:	6825      	ldr	r5, [r4, #0]
 80027f6:	6961      	ldr	r1, [r4, #20]
 80027f8:	1d18      	adds	r0, r3, #4
 80027fa:	6030      	str	r0, [r6, #0]
 80027fc:	062e      	lsls	r6, r5, #24
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	d501      	bpl.n	8002806 <_printf_i+0x1be>
 8002802:	6019      	str	r1, [r3, #0]
 8002804:	e002      	b.n	800280c <_printf_i+0x1c4>
 8002806:	0668      	lsls	r0, r5, #25
 8002808:	d5fb      	bpl.n	8002802 <_printf_i+0x1ba>
 800280a:	8019      	strh	r1, [r3, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	6123      	str	r3, [r4, #16]
 8002810:	4616      	mov	r6, r2
 8002812:	e7bc      	b.n	800278e <_printf_i+0x146>
 8002814:	6833      	ldr	r3, [r6, #0]
 8002816:	1d1a      	adds	r2, r3, #4
 8002818:	6032      	str	r2, [r6, #0]
 800281a:	681e      	ldr	r6, [r3, #0]
 800281c:	6862      	ldr	r2, [r4, #4]
 800281e:	2100      	movs	r1, #0
 8002820:	4630      	mov	r0, r6
 8002822:	f7fd fce5 	bl	80001f0 <memchr>
 8002826:	b108      	cbz	r0, 800282c <_printf_i+0x1e4>
 8002828:	1b80      	subs	r0, r0, r6
 800282a:	6060      	str	r0, [r4, #4]
 800282c:	6863      	ldr	r3, [r4, #4]
 800282e:	6123      	str	r3, [r4, #16]
 8002830:	2300      	movs	r3, #0
 8002832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002836:	e7aa      	b.n	800278e <_printf_i+0x146>
 8002838:	6923      	ldr	r3, [r4, #16]
 800283a:	4632      	mov	r2, r6
 800283c:	4649      	mov	r1, r9
 800283e:	4640      	mov	r0, r8
 8002840:	47d0      	blx	sl
 8002842:	3001      	adds	r0, #1
 8002844:	d0ad      	beq.n	80027a2 <_printf_i+0x15a>
 8002846:	6823      	ldr	r3, [r4, #0]
 8002848:	079b      	lsls	r3, r3, #30
 800284a:	d413      	bmi.n	8002874 <_printf_i+0x22c>
 800284c:	68e0      	ldr	r0, [r4, #12]
 800284e:	9b03      	ldr	r3, [sp, #12]
 8002850:	4298      	cmp	r0, r3
 8002852:	bfb8      	it	lt
 8002854:	4618      	movlt	r0, r3
 8002856:	e7a6      	b.n	80027a6 <_printf_i+0x15e>
 8002858:	2301      	movs	r3, #1
 800285a:	4632      	mov	r2, r6
 800285c:	4649      	mov	r1, r9
 800285e:	4640      	mov	r0, r8
 8002860:	47d0      	blx	sl
 8002862:	3001      	adds	r0, #1
 8002864:	d09d      	beq.n	80027a2 <_printf_i+0x15a>
 8002866:	3501      	adds	r5, #1
 8002868:	68e3      	ldr	r3, [r4, #12]
 800286a:	9903      	ldr	r1, [sp, #12]
 800286c:	1a5b      	subs	r3, r3, r1
 800286e:	42ab      	cmp	r3, r5
 8002870:	dcf2      	bgt.n	8002858 <_printf_i+0x210>
 8002872:	e7eb      	b.n	800284c <_printf_i+0x204>
 8002874:	2500      	movs	r5, #0
 8002876:	f104 0619 	add.w	r6, r4, #25
 800287a:	e7f5      	b.n	8002868 <_printf_i+0x220>
 800287c:	080646f9 	.word	0x080646f9
 8002880:	0806470a 	.word	0x0806470a

08002884 <_realloc_r>:
 8002884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002888:	4607      	mov	r7, r0
 800288a:	4614      	mov	r4, r2
 800288c:	460d      	mov	r5, r1
 800288e:	b921      	cbnz	r1, 800289a <_realloc_r+0x16>
 8002890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002894:	4611      	mov	r1, r2
 8002896:	f7ff bbd5 	b.w	8002044 <_malloc_r>
 800289a:	b92a      	cbnz	r2, 80028a8 <_realloc_r+0x24>
 800289c:	f7ff fcc4 	bl	8002228 <_free_r>
 80028a0:	4625      	mov	r5, r4
 80028a2:	4628      	mov	r0, r5
 80028a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028a8:	f000 f842 	bl	8002930 <_malloc_usable_size_r>
 80028ac:	4284      	cmp	r4, r0
 80028ae:	4606      	mov	r6, r0
 80028b0:	d802      	bhi.n	80028b8 <_realloc_r+0x34>
 80028b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80028b6:	d8f4      	bhi.n	80028a2 <_realloc_r+0x1e>
 80028b8:	4621      	mov	r1, r4
 80028ba:	4638      	mov	r0, r7
 80028bc:	f7ff fbc2 	bl	8002044 <_malloc_r>
 80028c0:	4680      	mov	r8, r0
 80028c2:	b908      	cbnz	r0, 80028c8 <_realloc_r+0x44>
 80028c4:	4645      	mov	r5, r8
 80028c6:	e7ec      	b.n	80028a2 <_realloc_r+0x1e>
 80028c8:	42b4      	cmp	r4, r6
 80028ca:	4622      	mov	r2, r4
 80028cc:	4629      	mov	r1, r5
 80028ce:	bf28      	it	cs
 80028d0:	4632      	movcs	r2, r6
 80028d2:	f000 f81f 	bl	8002914 <memcpy>
 80028d6:	4629      	mov	r1, r5
 80028d8:	4638      	mov	r0, r7
 80028da:	f7ff fca5 	bl	8002228 <_free_r>
 80028de:	e7f1      	b.n	80028c4 <_realloc_r+0x40>

080028e0 <memmove>:
 80028e0:	4288      	cmp	r0, r1
 80028e2:	b510      	push	{r4, lr}
 80028e4:	eb01 0402 	add.w	r4, r1, r2
 80028e8:	d902      	bls.n	80028f0 <memmove+0x10>
 80028ea:	4284      	cmp	r4, r0
 80028ec:	4623      	mov	r3, r4
 80028ee:	d807      	bhi.n	8002900 <memmove+0x20>
 80028f0:	1e43      	subs	r3, r0, #1
 80028f2:	42a1      	cmp	r1, r4
 80028f4:	d008      	beq.n	8002908 <memmove+0x28>
 80028f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028fe:	e7f8      	b.n	80028f2 <memmove+0x12>
 8002900:	4402      	add	r2, r0
 8002902:	4601      	mov	r1, r0
 8002904:	428a      	cmp	r2, r1
 8002906:	d100      	bne.n	800290a <memmove+0x2a>
 8002908:	bd10      	pop	{r4, pc}
 800290a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800290e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002912:	e7f7      	b.n	8002904 <memmove+0x24>

08002914 <memcpy>:
 8002914:	440a      	add	r2, r1
 8002916:	4291      	cmp	r1, r2
 8002918:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800291c:	d100      	bne.n	8002920 <memcpy+0xc>
 800291e:	4770      	bx	lr
 8002920:	b510      	push	{r4, lr}
 8002922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800292a:	4291      	cmp	r1, r2
 800292c:	d1f9      	bne.n	8002922 <memcpy+0xe>
 800292e:	bd10      	pop	{r4, pc}

08002930 <_malloc_usable_size_r>:
 8002930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002934:	1f18      	subs	r0, r3, #4
 8002936:	2b00      	cmp	r3, #0
 8002938:	bfbc      	itt	lt
 800293a:	580b      	ldrlt	r3, [r1, r0]
 800293c:	18c0      	addlt	r0, r0, r3
 800293e:	4770      	bx	lr

08002940 <_init>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr

0800294c <_fini>:
 800294c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294e:	bf00      	nop
 8002950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002952:	bc08      	pop	{r3}
 8002954:	469e      	mov	lr, r3
 8002956:	4770      	bx	lr
